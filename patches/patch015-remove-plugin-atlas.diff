diff --git a/plugin-atlas/.gitignore b/plugin-atlas/.gitignore
deleted file mode 100644
index 02f68bb35..000000000
--- a/plugin-atlas/.gitignore
+++ /dev/null
@@ -1,3 +0,0 @@
-/target/
-/bin/
-.settings/
diff --git a/plugin-atlas/conf/ranger-atlas-audit-changes.cfg b/plugin-atlas/conf/ranger-atlas-audit-changes.cfg
deleted file mode 100644
index 39d1d109a..000000000
--- a/plugin-atlas/conf/ranger-atlas-audit-changes.cfg
+++ /dev/null
@@ -1,44 +0,0 @@
-# Licensed to the Apache Software Foundation (ASF) under one or more
-# contributor license agreements.  See the NOTICE file distributed with
-# this work for additional information regarding copyright ownership.
-# The ASF licenses this file to You under the Apache License, Version 2.0
-# (the "License"); you may not use this file except in compliance with
-# the License.  You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-
-#solr configuration
-xasecure.audit.destination.solr                                    %XAAUDIT.SOLR.ENABLE%                              mod create-if-not-exists
-xasecure.audit.destination.solr.urls                               %XAAUDIT.SOLR.URL%                                 mod create-if-not-exists
-xasecure.audit.destination.solr.user 							   %XAAUDIT.SOLR.USER% 								  mod create-if-not-exists
-xasecure.audit.destination.solr.password 						   %XAAUDIT.SOLR.PASSWORD% 							  mod create-if-not-exists
-xasecure.audit.destination.solr.zookeepers                         %XAAUDIT.SOLR.ZOOKEEPER%                           mod create-if-not-exists
-
-xasecure.audit.destination.elasticsearch                                    %XAAUDIT.ELASTICSEARCH.ENABLE%                              mod create-if-not-exists
-xasecure.audit.destination.elasticsearch.urls                               %XAAUDIT.ELASTICSEARCH.URL%                                 mod create-if-not-exists
-xasecure.audit.destination.elasticsearch.user 							   %XAAUDIT.ELASTICSEARCH.USER% 								  mod create-if-not-exists
-xasecure.audit.destination.elasticsearch.password 						   %XAAUDIT.ELASTICSEARCH.PASSWORD% 							  mod create-if-not-exists
-xasecure.audit.destination.elasticsearch.index 						   %XAAUDIT.ELASTICSEARCH.INDEX% 							  mod create-if-not-exists
-xasecure.audit.destination.elasticsearch.port 						   %XAAUDIT.ELASTICSEARCH.PORT% 							  mod create-if-not-exists
-xasecure.audit.destination.elasticsearch.protocol 						   %XAAUDIT.ELASTICSEARCH.PROTOCOL% 							  mod create-if-not-exists
-
-#hdfs configuration
-xasecure.audit.destination.hdfs					   %XAAUDIT.HDFS.ENABLE%                      mod create-if-not-exists
-xasecure.audit.destination.hdfs.dir                		   %XAAUDIT.HDFS.HDFS_DIR%                      mod create-if-not-exists
-
-#log4j configuration
-xasecure.audit.log4j.is.enabled                %XAAUDIT.LOG4J.ENABLE%                      mod create-if-not-exists
-xasecure.audit.log4j.is.async                %XAAUDIT.LOG4J.IS_ASYNC%                      mod create-if-not-exists
-xasecure.audit.log4j.async.max.queue.size                %XAAUDIT.LOG4J.ASYNC.MAX.QUEUE.SIZE%                      mod create-if-not-exists
-xasecure.audit.log4j.async.max.flush.interval.ms                %XAAUDIT.LOG4J.ASYNC.MAX.FLUSH.INTERVAL.MS%                      mod create-if-not-exists
-xasecure.audit.destination.log4j                %XAAUDIT.LOG4J.DESTINATION.LOG4J%                      mod create-if-not-exists
-xasecure.audit.destination.log4j.logger                %XAAUDIT.LOG4J.DESTINATION.LOG4J.LOGGER%                      mod create-if-not-exists
-
-
diff --git a/plugin-atlas/conf/ranger-atlas-audit.xml b/plugin-atlas/conf/ranger-atlas-audit.xml
deleted file mode 100644
index 29dd5fcda..000000000
--- a/plugin-atlas/conf/ranger-atlas-audit.xml
+++ /dev/null
@@ -1,121 +0,0 @@
-<?xml version="1.0"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
--->
-<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
-<configuration xmlns:xi="http://www.w3.org/2001/XInclude">
-	<property>
-		<name>xasecure.audit.is.enabled</name>
-		<value>true</value>
-	</property>	
-
-    <!-- Solr audit provider configuration -->
-
-	<property>
-		<name>xasecure.audit.destination.solr</name>
-		<value>false</value>
-	</property>	
-
-	<property>
-		<name>xasecure.audit.destination.solr.urls</name>
-		<value>NONE</value>
-	</property>	
-	
-	<property>
-		<name>xasecure.audit.destination.solr.zookeepers</name>
-		<value></value>
-	</property>	
-	
-	<property>
-		<name>xasecure.audit.destination.solr.collection</name>
-		<value>NONE</value>
-	</property>
-
-	<!-- HDFS audit provider configuration -->
-	<property>
-		<name>xasecure.audit.destination.hdfs</name>
-		<value>false</value>
-	</property>	
-
-	<property>
-		<name>xasecure.audit.destination.hdfs.dir</name>
-		<value>hdfs://__REPLACE__NAME_NODE_HOST:8020/ranger/audit</value>
-	</property>	
-	
-	<property>
-		<name>xasecure.audit.destination.hdfs.subdir</name>
-		<value>%app-type%/%time:yyyyMMdd%</value>
-	</property>	
-	
-	<property>
-		<name>xasecure.audit.destination.hdfs.filename.format</name>
-		<value>%app-type%_ranger_audit_%hostname%.log</value>
-	</property>	
-	
-	<property>
-		<name>xasecure.audit.destination.hdfs.file.rollover.sec</name>
-		<value>86400</value>
-	</property>	
-
-	<!-- Audit to HDFS on Azure Datastore (WASB) requires v3 style settings.  Comment the above and uncomment only the
-	following to audit to Azure Blob Datastore via hdfs' WASB schema.
-
-	NOTE: If you specify one audit destination in v3 style then other destinations, if any, must also be specified in v3 style
-	====
-
-	<property>
-		<name>xasecure.audit.destination.hdfs</name>
-		<value>enabled</value>
-	</property>
-
-	<property>
-		<name>xasecure.audit.destination.hdfs.dir</name>
-		<value>wasb://ranger-audit1@youraccount.blob.core.windows.net</value>
-	</property>
-
-	the following 3 correspond to the properties with similar name in core-site.xml, i.e.
-	- fs.azure.account.key.youraccount.blob.core.windows.net => xasecure.audit.destination.hdfs.config.fs.azure.account.key.youraccount.blob.core.windows.net and
-	- fs.azure.account.keyprovider.youraccount.blob.core.windows.net => xasecure.audit.destination.hdfs.config.fs.azure.account.keyprovider.youraccount.blob.core.windows.net,
-	- fs.azure.shellkeyprovider.script => xasecure.audit.destination.hdfs.config.fs.azure.shellkeyprovider.script,
-
-	<property>
-		<name>xasecure.audit.destination.hdfs.config.fs.azure.account.key.youraccount.blob.core.windows.net</name>
-		<value>YOUR ENCRYPTED ACCESS KEY</value>
-	</property>
-
-	<property>
-		<name>xasecure.audit.destination.hdfs.config.fs.azure.account.keyprovider.youraccount.blob.core.windows.net</name>
-		<value>org.apache.hadoop.fs.azure.ShellDecryptionKeyProvider</value>
-	</property>
-
-	<property>
-		<name>xasecure.audit.destination.hdfs.config.fs.azure.shellkeyprovider.script</name>
-		<value>/usr/lib/python2.7/dist-packages/hdinsight_common/decrypt.sh</value>
-	</property>
-	-->
-
-	<!-- Log4j audit provider configuration -->
-	<property>
-		<name>xasecure.audit.destination.log4j</name>
-		<value>false</value>
-	</property>	
-
-	<property>
-		<name>xasecure.audit.destination.log4j.logger</name>
-		<value></value>
-	</property>	
-	
-</configuration>
diff --git a/plugin-atlas/conf/ranger-atlas-security-changes.cfg b/plugin-atlas/conf/ranger-atlas-security-changes.cfg
deleted file mode 100644
index 6b7351fbc..000000000
--- a/plugin-atlas/conf/ranger-atlas-security-changes.cfg
+++ /dev/null
@@ -1,29 +0,0 @@
-# Licensed to the Apache Software Foundation (ASF) under one or more
-# contributor license agreements.  See the NOTICE file distributed with
-# this work for additional information regarding copyright ownership.
-# The ASF licenses this file to You under the Apache License, Version 2.0
-# (the "License"); you may not use this file except in compliance with
-# the License.  You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# Change the original policy parameter to work with policy manager based.
-# 
-#
-ranger.plugin.atlas.service.name %REPOSITORY_NAME% mod create-if-not-exists
-
-ranger.plugin.atlas.policy.source.impl org.apache.ranger.admin.client.RangerAdminRESTClient mod create-if-not-exists
-
-ranger.plugin.atlas.policy.rest.url             %POLICY_MGR_URL%                        mod create-if-not-exists
-ranger.plugin.atlas.policy.rest.ssl.config.file %COMPONENT_INSTALL_DIR_NAME%/conf/ranger-policymgr-ssl.xml mod create-if-not-exists
-ranger.plugin.atlas.policy.pollIntervalMs       30000                                   mod create-if-not-exists
-ranger.plugin.atlas.policy.cache.dir            %POLICY_CACHE_FILE_PATH%                mod create-if-not-exists
-ranger.plugin.atlas.policy.rest.client.connection.timeoutMs 120000				       mod create-if-not-exists
-ranger.plugin.atlas.policy.rest.client.read.timeoutMs	   30000					   mod create-if-not-exists
-
diff --git a/plugin-atlas/conf/ranger-atlas-security.xml b/plugin-atlas/conf/ranger-atlas-security.xml
deleted file mode 100644
index 933c8e78d..000000000
--- a/plugin-atlas/conf/ranger-atlas-security.xml
+++ /dev/null
@@ -1,83 +0,0 @@
-<?xml version="1.0"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
--->
-<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
-<configuration xmlns:xi="http://www.w3.org/2001/XInclude">
-	<property>
-		<name>ranger.plugin.atlas.service.name</name>
-		<value>atlasdev</value>
-		<description>
-			Name of the Ranger service containing policies for this YARN instance
-		</description>
-	</property>
-
-	<property>
-		<name>ranger.plugin.atlas.policy.source.impl</name>
-		<value>org.apache.ranger.admin.client.RangerAdminRESTClient</value>
-		<description>
-			Class to retrieve policies from the source
-		</description>
-	</property>
-
-	<property>
-		<name>ranger.plugin.atlas.policy.rest.url</name>
-		<value>http://policymanagerhost:port</value>
-		<description>
-			URL to Ranger Admin
-		</description>
-	</property>
-
-	<property>
-		<name>ranger.plugin.atlas.policy.rest.ssl.config.file</name>
-		<value>/etc/atlas/conf/ranger-policymgr-ssl.xml</value>
-		<description>
-			Path to the file containing SSL details to contact Ranger Admin
-		</description>
-	</property>
-
-	<property>
-		<name>ranger.plugin.atlas.policy.pollIntervalMs</name>
-		<value>30000</value>
-		<description>
-			How often to poll for changes in policies?
-		</description>
-	</property>
-
-	<property>
-		<name>ranger.plugin.atlas.policy.cache.dir</name>
-		<value>/etc/ranger/atlasdev/policycache</value>
-		<description>
-			Directory where Ranger policies are cached after successful retrieval from the source
-		</description>
-	</property>
-
-	<property>
-		<name>ranger.plugin.atlas.policy.rest.client.connection.timeoutMs</name>
-		<value>120000</value>
-		<description>
-			RangerRestClient Connection Timeout in Milli Seconds
-		</description>
-	</property>
-
-	<property>
-		<name>ranger.plugin.atlas.policy.rest.client.read.timeoutMs</name>
-		<value>30000</value>
-		<description>
-			RangerRestClient read Timeout in Milli Seconds
-		</description>
-	</property>
-</configuration>
diff --git a/plugin-atlas/conf/ranger-policymgr-ssl-changes.cfg b/plugin-atlas/conf/ranger-policymgr-ssl-changes.cfg
deleted file mode 100644
index 47126492f..000000000
--- a/plugin-atlas/conf/ranger-policymgr-ssl-changes.cfg
+++ /dev/null
@@ -1,21 +0,0 @@
-# Licensed to the Apache Software Foundation (ASF) under one or more
-# contributor license agreements.  See the NOTICE file distributed with
-# this work for additional information regarding copyright ownership.
-# The ASF licenses this file to You under the Apache License, Version 2.0
-# (the "License"); you may not use this file except in compliance with
-# the License.  You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# SSL Params
-#
-xasecure.policymgr.clientssl.keystore					 %SSL_KEYSTORE_FILE_PATH%						mod create-if-not-exists
-xasecure.policymgr.clientssl.keystore.credential.file	 jceks://file%CREDENTIAL_PROVIDER_FILE%			mod create-if-not-exists
-xasecure.policymgr.clientssl.truststore				     %SSL_TRUSTSTORE_FILE_PATH%						mod create-if-not-exists
-xasecure.policymgr.clientssl.truststore.credential.file  jceks://file%CREDENTIAL_PROVIDER_FILE%         mod create-if-not-exists	
\ No newline at end of file
diff --git a/plugin-atlas/conf/ranger-policymgr-ssl.xml b/plugin-atlas/conf/ranger-policymgr-ssl.xml
deleted file mode 100644
index 3baf7725c..000000000
--- a/plugin-atlas/conf/ranger-policymgr-ssl.xml
+++ /dev/null
@@ -1,49 +0,0 @@
-<?xml version="1.0"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
--->
-<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
-<configuration xmlns:xi="http://www.w3.org/2001/XInclude">
-	<!--  The following properties are used for 2-way SSL client server validation -->
-	<property>
-		<name>xasecure.policymgr.clientssl.keystore</name>
-		<value>hadoopdev-clientcert.jks</value>
-		<description> 
-			Java Keystore files 
-		</description>
-	</property>
-	<property>
-		<name>xasecure.policymgr.clientssl.truststore</name>
-		<value>cacerts-xasecure.jks</value>
-		<description> 
-			java truststore file
-		</description>
-	</property>
-    <property>
-		<name>xasecure.policymgr.clientssl.keystore.credential.file</name>
-		<value>jceks://file/tmp/keystore-hadoopdev-ssl.jceks</value>
-		<description> 
-			java  keystore credential file
-		</description>
-	</property>
-	<property>
-		<name>xasecure.policymgr.clientssl.truststore.credential.file</name>
-		<value>jceks://file/tmp/truststore-hadoopdev-ssl.jceks</value>
-		<description> 
-			java  truststore credential file
-		</description>
-	</property>
-</configuration>
\ No newline at end of file
diff --git a/plugin-atlas/pom.xml b/plugin-atlas/pom.xml
deleted file mode 100644
index 73d2aac7c..000000000
--- a/plugin-atlas/pom.xml
+++ /dev/null
@@ -1,90 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
--->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-    <modelVersion>4.0.0</modelVersion>
-    <artifactId>ranger-atlas-plugin</artifactId>
-    <name>Atlas Security Plugin</name>
-    <description>Atlas Security Plugins</description>
-    <packaging>jar</packaging>
-    <properties>
-        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-    </properties>
-    <parent>
-        <groupId>org.apache.ranger</groupId>
-        <artifactId>ranger</artifactId>
-        <version>2.2.0</version>
-        <relativePath>..</relativePath>
-    </parent>
-    <dependencies>
-        <dependency>
-            <groupId>commons-lang</groupId>
-            <artifactId>commons-lang</artifactId>
-            <version>${commons.lang.version}</version>
-        </dependency>
-        <dependency>
-            <groupId>com.google.code.gson</groupId>
-            <artifactId>gson</artifactId>
-        </dependency>
-        <dependency>
-            <groupId>org.apache.ranger</groupId>
-            <artifactId>ranger-plugins-common</artifactId>
-            <version>${project.version}</version>
-        </dependency>
-        <dependency>
-            <groupId>org.apache.ranger</groupId>
-            <artifactId>ranger-plugins-audit</artifactId>
-            <version>${project.version}</version>
-        </dependency>
-        <dependency>         
-      		<groupId>org.apache.atlas</groupId>
-      		<artifactId>atlas-authorization</artifactId>
-			<version>${atlas.version}</version>
-    	</dependency>
-     	<dependency>
-      		<groupId>org.apache.atlas</groupId>
-      		<artifactId>atlas-common</artifactId>
-      		<version>${atlas.version}</version>
-		<exclusions>
-                <exclusion>
-                    <groupId>org.springframework</groupId>
-                    <artifactId>spring-beans</artifactId>
-                </exclusion>
-                <exclusion>
-                    <groupId>org.springframework</groupId>
-                    <artifactId>spring-core</artifactId>
-                </exclusion>
-                <exclusion>
-                    <groupId>org.springframework</groupId>
-                    <artifactId>spring-asm</artifactId>
-                </exclusion>
-            </exclusions>
-    	</dependency>
-        <dependency>
-    		<groupId>org.apache.httpcomponents</groupId>
-    		<artifactId>httpcore</artifactId>
-    		<version>${httpcomponents.httpcore.version}</version>
-	</dependency>
-	<dependency>
-                <groupId>com.google.guava</groupId>
-                <artifactId>guava</artifactId>
-                <version>${google.guava.version}</version>
-        </dependency>
-    </dependencies>
-</project>
-
-
diff --git a/plugin-atlas/scripts/install.properties b/plugin-atlas/scripts/install.properties
deleted file mode 100644
index 94a802343..000000000
--- a/plugin-atlas/scripts/install.properties
+++ /dev/null
@@ -1,127 +0,0 @@
-# Licensed to the Apache Software Foundation (ASF) under one or more
-# contributor license agreements.  See the NOTICE file distributed with
-# this work for additional information regarding copyright ownership.
-# The ASF licenses this file to You under the Apache License, Version 2.0
-# (the "License"); you may not use this file except in compliance with
-# the License.  You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-#
-# Location of Policy Manager URL  
-#
-# Example:
-# POLICY_MGR_URL=http://policymanager.xasecure.net:6080
-#
-POLICY_MGR_URL=
-
-#
-# This is the repository name created within policy manager
-#
-# Example:
-# REPOSITORY_NAME=atlasdev
-#
-REPOSITORY_NAME=
-
-#
-# Atlas installation directory
-#
-COMPONENT_INSTALL_DIR_NAME=
-
-# AUDIT configuration with V3 properties
-
-#Should audit be summarized at source
-XAAUDIT.SUMMARY.ENABLE=true
-
-# Enable audit logs to Solr
-#Example
-#XAAUDIT.SOLR.ENABLE=true
-#XAAUDIT.SOLR.URL=http://localhost:6083/solr/ranger_audits
-#XAAUDIT.SOLR.ZOOKEEPER=
-#XAAUDIT.SOLR.FILE_SPOOL_DIR=/var/log/atlas/audit/solr/spool
-
-XAAUDIT.SOLR.ENABLE=false
-XAAUDIT.SOLR.URL=NONE
-XAAUDIT.SOLR.USER=NONE
-XAAUDIT.SOLR.PASSWORD=NONE
-XAAUDIT.SOLR.ZOOKEEPER=NONE
-
-# Enable audit logs to ElasticSearch
-#Example
-#XAAUDIT.ELASTICSEARCH.ENABLE=true
-#XAAUDIT.ELASTICSEARCH.URL=localhost
-#XAAUDIT.ELASTICSEARCH.INDEX=audit
-
-XAAUDIT.ELASTICSEARCH.ENABLE=false
-XAAUDIT.ELASTICSEARCH.URL=NONE
-XAAUDIT.ELASTICSEARCH.USER=NONE
-XAAUDIT.ELASTICSEARCH.PASSWORD=NONE
-XAAUDIT.ELASTICSEARCH.INDEX=NONE
-XAAUDIT.ELASTICSEARCH.PORT=NONE
-XAAUDIT.ELASTICSEARCH.PROTOCOL=NONE
-
-# Enable audit logs to HDFS
-#Example
-#XAAUDIT.HDFS.ENABLE=true
-#XAAUDIT.HDFS.HDFS_DIR=hdfs://node-1.example.com:8020/ranger/audit
-#  If using Azure Blob Storage
-#XAAUDIT.HDFS.HDFS_DIR=wasb[s]://<containername>@<accountname>.blob.core.windows.net/<path>
-#XAAUDIT.HDFS.HDFS_DIR=wasb://ranger_audit_container@my-azure-account.blob.core.windows.net/ranger/audit
-#XAAUDIT.HDFS.FILE_SPOOL_DIR=/var/log/atlas/audit/hdfs/spool
-
-XAAUDIT.HDFS.ENABLE=false
-XAAUDIT.HDFS.HDFS_DIR=hdfs://__REPLACE__NAME_NODE_HOST:8020/ranger/audit
-
-# Following additional propertis are needed When auditing to Azure Blob Storage via HDFS
-# Get these values from your /etc/hadoop/conf/core-site.xml
-#XAAUDIT.HDFS.HDFS_DIR=wasb[s]://<containername>@<accountname>.blob.core.windows.net/<path>
-XAAUDIT.HDFS.AZURE_ACCOUNTNAME=__REPLACE_AZURE_ACCOUNT_NAME
-XAAUDIT.HDFS.AZURE_ACCOUNTKEY=__REPLACE_AZURE_ACCOUNT_KEY
-XAAUDIT.HDFS.AZURE_SHELL_KEY_PROVIDER=__REPLACE_AZURE_SHELL_KEY_PROVIDER
-XAAUDIT.HDFS.AZURE_ACCOUNTKEY_PROVIDER=__REPLACE_AZURE_ACCOUNT_KEY_PROVIDER
-
-#Log4j Audit Provider
-XAAUDIT.LOG4J.ENABLE=false
-XAAUDIT.LOG4J.IS_ASYNC=false
-XAAUDIT.LOG4J.ASYNC.MAX.QUEUE.SIZE=10240
-XAAUDIT.LOG4J.ASYNC.MAX.FLUSH.INTERVAL.MS=30000
-XAAUDIT.LOG4J.DESTINATION.LOG4J=true
-XAAUDIT.LOG4J.DESTINATION.LOG4J.LOGGER=xaaudit
-
-# End of V3 properties
-
-#
-# SSL Client Certificate Information
-#
-# Example:
-# SSL_KEYSTORE_FILE_PATH=/etc/atlas/conf/ranger-plugin-keystore.jks
-# SSL_KEYSTORE_PASSWORD=none
-# SSL_TRUSTSTORE_FILE_PATH=/etc/atlas/conf/ranger-plugin-truststore.jks
-# SSL_TRUSTSTORE_PASSWORD=none
-#
-# You do not need use SSL between agent and security admin tool, please leave these sample value as it is.
-#
-SSL_KEYSTORE_FILE_PATH=/etc/atlas/conf/ranger-plugin-keystore.jks
-SSL_KEYSTORE_PASSWORD=myKeyFilePassword
-SSL_TRUSTSTORE_FILE_PATH=/etc/atlas/conf/ranger-plugin-truststore.jks
-SSL_TRUSTSTORE_PASSWORD=changeit
-
-#
-# Custom component user
-# CUSTOM_COMPONENT_USER=<custom-user>
-# keep blank if component user is default
-CUSTOM_USER=atlas
-
-
-#
-# Custom component group
-# CUSTOM_COMPONENT_GROUP=<custom-group>
-# keep blank if component group is default
-CUSTOM_GROUP=hadoop
-
diff --git a/plugin-atlas/src/main/java/org/apache/ranger/authorization/atlas/authorizer/RangerAtlasAuthorizer.java b/plugin-atlas/src/main/java/org/apache/ranger/authorization/atlas/authorizer/RangerAtlasAuthorizer.java
deleted file mode 100644
index 2fe733839..000000000
--- a/plugin-atlas/src/main/java/org/apache/ranger/authorization/atlas/authorizer/RangerAtlasAuthorizer.java
+++ /dev/null
@@ -1,556 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.apache.ranger.authorization.atlas.authorizer;
-
-
-import org.apache.atlas.authorize.AtlasAdminAccessRequest;
-import org.apache.atlas.authorize.AtlasAuthorizationException;
-import org.apache.atlas.authorize.AtlasEntityAccessRequest;
-import org.apache.atlas.authorize.AtlasSearchResultScrubRequest;
-import org.apache.atlas.authorize.AtlasRelationshipAccessRequest;
-import org.apache.atlas.authorize.AtlasTypesDefFilterRequest;
-import org.apache.atlas.authorize.AtlasTypeAccessRequest;
-import org.apache.atlas.authorize.AtlasAccessRequest;
-import org.apache.atlas.authorize.AtlasAuthorizer;
-import org.apache.atlas.authorize.AtlasPrivilege;
-import org.apache.atlas.model.typedef.AtlasBaseTypeDef;
-import org.apache.atlas.model.typedef.AtlasTypesDef;
-import org.apache.atlas.model.discovery.AtlasSearchResult;
-import org.apache.atlas.model.instance.AtlasEntityHeader;
-import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.collections.MapUtils;
-import org.apache.commons.lang.StringUtils;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.apache.ranger.audit.model.AuthzAuditEvent;
-import org.apache.ranger.plugin.audit.RangerDefaultAuditHandler;
-import org.apache.ranger.plugin.model.RangerServiceDef;
-import org.apache.ranger.plugin.policyengine.RangerAccessRequestImpl;
-import org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl;
-import org.apache.ranger.plugin.policyengine.RangerAccessResult;
-import org.apache.ranger.plugin.service.RangerBasePlugin;
-import org.apache.ranger.plugin.util.RangerPerfTracer;
-
-import java.util.*;
-
-import static org.apache.ranger.services.atlas.RangerServiceAtlas.*;
-
-
-public class RangerAtlasAuthorizer implements AtlasAuthorizer {
-    private static final Log LOG      = LogFactory.getLog(RangerAtlasAuthorizer.class);
-    private static final Log PERF_LOG = RangerPerfTracer.getPerfLogger("atlasauth.request");
-
-    private static final  Set<AtlasPrivilege> CLASSIFICATION_PRIVILEGES = new HashSet<AtlasPrivilege>() {{
-        add(AtlasPrivilege.ENTITY_ADD_CLASSIFICATION);
-        add(AtlasPrivilege.ENTITY_REMOVE_CLASSIFICATION);
-        add(AtlasPrivilege.ENTITY_UPDATE_CLASSIFICATION);
-    }};
-
-    private static volatile RangerBasePlugin atlasPlugin = null;
-
-    @Override
-    public void init() {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("==> RangerAtlasPlugin.init()");
-        }
-
-        RangerBasePlugin plugin = atlasPlugin;
-
-        if (plugin == null) {
-            synchronized (RangerAtlasPlugin.class) {
-                plugin = atlasPlugin;
-
-                if (plugin == null) {
-                    plugin = new RangerAtlasPlugin();
-
-                    plugin.init();
-
-                    plugin.setResultProcessor(new RangerDefaultAuditHandler(plugin.getConfig()));
-
-                    atlasPlugin = plugin;
-                }
-            }
-        }
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("<== RangerAtlasPlugin.init()");
-        }
-    }
-
-    @Override
-    public void cleanUp() {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("==> cleanUp ");
-        }
-    }
-
-    @Override
-    public boolean isAccessAllowed(AtlasAdminAccessRequest request) throws AtlasAuthorizationException {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("==> isAccessAllowed(" + request + ")");
-        }
-
-        final boolean    ret;
-        RangerPerfTracer perf = null;
-
-        try {
-            if (RangerPerfTracer.isPerfTraceEnabled(PERF_LOG)) {
-                perf = RangerPerfTracer.getPerfTracer(PERF_LOG, "RangerAtlasAuthorizer.isAccessAllowed(" + request + ")");
-            }
-
-            String                   action         = request.getAction() != null ? request.getAction().getType() : null;
-            RangerAccessResourceImpl rangerResource = new RangerAccessResourceImpl(Collections.singletonMap(RESOURCE_SERVICE, "*"));
-            RangerAccessRequestImpl  rangerRequest  = new RangerAccessRequestImpl(rangerResource, action, request.getUser(), request.getUserGroups(), null);
-
-            rangerRequest.setClientIPAddress(request.getClientIPAddress());
-            rangerRequest.setAccessTime(request.getAccessTime());
-            rangerRequest.setAction(action);
-            rangerRequest.setForwardedAddresses(request.getForwardedAddresses());
-            rangerRequest.setRemoteIPAddress(request.getRemoteIPAddress());
-
-
-            ret = checkAccess(rangerRequest);
-        } finally {
-            RangerPerfTracer.log(perf);
-        }
-
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("<== isAccessAllowed(" + request + "): " + ret);
-        }
-
-        return ret;
-    }
-
-    @Override
-    public boolean isAccessAllowed(AtlasEntityAccessRequest request) throws AtlasAuthorizationException {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("==> isAccessAllowed(" + request + ")");
-        }
-
-        boolean                 ret          = true;
-        RangerPerfTracer        perf         = null;
-        RangerAtlasAuditHandler auditHandler = null;
-
-        try {
-            if (RangerPerfTracer.isPerfTraceEnabled(PERF_LOG)) {
-                perf = RangerPerfTracer.getPerfTracer(PERF_LOG, "RangerAtlasAuthorizer.isAccessAllowed(" + request + ")");
-            }
-
-            // not initializing audit handler, so that audits are not logged when entity details are NULL or EMPTY STRING
-            if (!(StringUtils.isEmpty(request.getEntityId()) && request.getClassification() == null && request.getEntity() == null)) {
-                auditHandler = new RangerAtlasAuditHandler(request, getServiceDef());
-            }
-
-            ret = isAccessAllowed(request, auditHandler);
-        } finally {
-            RangerPerfTracer.log(perf);
-        }
-
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("<== isAccessAllowed(" + request + "): " + ret);
-        }
-
-        return ret;
-    }
-
-    @Override
-    public boolean isAccessAllowed(AtlasTypeAccessRequest request) throws AtlasAuthorizationException {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("==> isAccessAllowed(" + request + ")");
-        }
-
-        final boolean    ret;
-        RangerPerfTracer perf = null;
-
-        try {
-            if (RangerPerfTracer.isPerfTraceEnabled(PERF_LOG)) {
-                perf = RangerPerfTracer.getPerfTracer(PERF_LOG, "RangerAtlasAuthorizer.isAccessAllowed(" + request + ")");
-            }
-
-            final String typeName     = request.getTypeDef() != null ? request.getTypeDef().getName() : null;
-            final String typeCategory = request.getTypeDef() != null && request.getTypeDef().getCategory() != null ? request.getTypeDef().getCategory().name() : null;
-            final String action       = request.getAction() != null ? request.getAction().getType() : null;
-
-            RangerAccessResourceImpl rangerResource = new RangerAccessResourceImpl();
-
-            rangerResource.setValue(RESOURCE_TYPE_NAME, typeName);
-            rangerResource.setValue(RESOURCE_TYPE_CATEGORY, typeCategory);
-
-            RangerAccessRequestImpl rangerRequest = new RangerAccessRequestImpl(rangerResource, action, request.getUser(), request.getUserGroups(), null);
-            rangerRequest.setClientIPAddress(request.getClientIPAddress());
-            rangerRequest.setAccessTime(request.getAccessTime());
-            rangerRequest.setAction(action);
-            rangerRequest.setForwardedAddresses(request.getForwardedAddresses());
-            rangerRequest.setRemoteIPAddress(request.getRemoteIPAddress());
-
-            boolean isAuditDisabled = ACCESS_TYPE_TYPE_READ.equalsIgnoreCase(action);
-
-            if (isAuditDisabled) {
-                ret = checkAccess(rangerRequest, null);
-            } else {
-                ret = checkAccess(rangerRequest);
-            }
-
-        } finally {
-            RangerPerfTracer.log(perf);
-        }
-
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("<== isAccessAllowed(" + request + "): " + ret);
-        }
-
-        return ret;
-    }
-
-
-
-    public boolean isAccessAllowed(AtlasRelationshipAccessRequest request) throws AtlasAuthorizationException {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("==> isAccessAllowed(" + request + ")");
-        }
-
-        boolean ret;
-        RangerPerfTracer perf = null;
-
-        try {
-            if (RangerPerfTracer.isPerfTraceEnabled(PERF_LOG)) {
-                perf = RangerPerfTracer.getPerfTracer(PERF_LOG, "RangerAtlasAuthorizer.isAccessAllowed(" + request + ")");
-            }
-
-            final String      action                      = request.getAction() != null ? request.getAction().getType() : null;
-            final Set<String> end1EntityTypeAndSuperTypes = request.getEnd1EntityTypeAndAllSuperTypes();
-            final Set<String> end1Classifications         = new HashSet<>(request.getEnd1EntityClassifications());
-            final String      end1EntityId                = request.getEnd1EntityId();
-
-            final Set<String> end2EntityTypeAndSuperTypes = request.getEnd2EntityTypeAndAllSuperTypes();
-            final Set<String> end2Classifications         = new HashSet<>(request.getEnd2EntityClassifications());
-            final String      end2EntityId                = request.getEnd2EntityId();
-
-
-            String relationShipType = request.getRelationshipType();
-
-            RangerAccessResourceImpl rangerResource = new RangerAccessResourceImpl();
-
-            RangerAccessRequestImpl rangerRequest = new RangerAccessRequestImpl(rangerResource, action, request.getUser(), request.getUserGroups(), null);
-            rangerRequest.setClientIPAddress(request.getClientIPAddress());
-            rangerRequest.setAccessTime(request.getAccessTime());
-            rangerRequest.setAction(action);
-            rangerRequest.setForwardedAddresses(request.getForwardedAddresses());
-            rangerRequest.setRemoteIPAddress(request.getRemoteIPAddress());
-
-            rangerResource.setValue(RESOURCE_RELATIONSHIP_TYPE, relationShipType);
-
-
-            Set<String> classificationsWithSuperTypesEnd1 = new HashSet();
-
-            for (String classificationToAuthorize : end1Classifications) {
-                classificationsWithSuperTypesEnd1.addAll(request.getClassificationTypeAndAllSuperTypes(classificationToAuthorize));
-            }
-
-            rangerResource.setValue(RESOURCE_END_ONE_ENTITY_TYPE, end1EntityTypeAndSuperTypes);
-            rangerResource.setValue(RESOURCE_END_ONE_ENTITY_CLASSIFICATION, classificationsWithSuperTypesEnd1);
-            rangerResource.setValue(RESOURCE_END_ONE_ENTITY_ID, end1EntityId);
-
-
-            Set<String> classificationsWithSuperTypesEnd2 = new HashSet();
-
-            for (String classificationToAuthorize : end2Classifications) {
-                classificationsWithSuperTypesEnd2.addAll(request.getClassificationTypeAndAllSuperTypes(classificationToAuthorize));
-            }
-
-            rangerResource.setValue(RESOURCE_END_TWO_ENTITY_TYPE, end2EntityTypeAndSuperTypes);
-            rangerResource.setValue(RESOURCE_END_TWO_ENTITY_CLASSIFICATION, classificationsWithSuperTypesEnd2);
-            rangerResource.setValue(RESOURCE_END_TWO_ENTITY_ID, end2EntityId);
-
-            ret = checkAccess(rangerRequest);
-
-        } finally {
-            RangerPerfTracer.log(perf);
-        }
-
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("<== isAccessAllowed(" + request + "): " + ret);
-        }
-
-        return ret;
-    }
-
-
-    @Override
-    public void scrubSearchResults(AtlasSearchResultScrubRequest request) throws AtlasAuthorizationException {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("==> scrubSearchResults(" + request + ")");
-        }
-
-        RangerPerfTracer perf = null;
-
-        try {
-            if (RangerPerfTracer.isPerfTraceEnabled(PERF_LOG)) {
-                perf = RangerPerfTracer.getPerfTracer(PERF_LOG, "RangerAtlasAuthorizer.scrubSearchResults(" + request + ")");
-            }
-
-            final AtlasSearchResult result = request.getSearchResult();
-
-            if (CollectionUtils.isNotEmpty(result.getEntities())) {
-                for (AtlasEntityHeader entity : result.getEntities()) {
-                    checkAccessAndScrub(entity, request);
-                }
-            }
-
-            if (CollectionUtils.isNotEmpty(result.getFullTextResult())) {
-                for (AtlasSearchResult.AtlasFullTextResult fullTextResult : result.getFullTextResult()) {
-                    if (fullTextResult != null) {
-                        checkAccessAndScrub(fullTextResult.getEntity(), request);
-                    }
-                }
-            }
-
-            if (MapUtils.isNotEmpty(result.getReferredEntities())) {
-                for (AtlasEntityHeader entity : result.getReferredEntities().values()) {
-                    checkAccessAndScrub(entity, request);
-                }
-            }
-        } finally {
-            RangerPerfTracer.log(perf);
-        }
-
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("<== scrubSearchResults(): " + request);
-        }
-    }
-
-    @Override
-    public void filterTypesDef(AtlasTypesDefFilterRequest request) throws AtlasAuthorizationException {
-
-        AtlasTypesDef typesDef = request.getTypesDef();
-
-        filterTypes(request, typesDef.getEnumDefs());
-        filterTypes(request, typesDef.getStructDefs());
-        filterTypes(request, typesDef.getEntityDefs());
-        filterTypes(request, typesDef.getClassificationDefs());
-        filterTypes(request, typesDef.getRelationshipDefs());
-        filterTypes(request, typesDef.getBusinessMetadataDefs());
-
-    }
-
-    private void filterTypes(AtlasAccessRequest request, List<? extends AtlasBaseTypeDef> typeDefs)throws AtlasAuthorizationException {
-        if (typeDefs != null) {
-            for (ListIterator<? extends AtlasBaseTypeDef> iter = typeDefs.listIterator(); iter.hasNext();) {
-                AtlasBaseTypeDef       typeDef     = iter.next();
-                AtlasTypeAccessRequest typeRequest = new AtlasTypeAccessRequest(request.getAction(), typeDef, request.getUser(), request.getUserGroups());
-
-                typeRequest.setClientIPAddress(request.getClientIPAddress());
-                typeRequest.setForwardedAddresses(request.getForwardedAddresses());
-                typeRequest.setRemoteIPAddress(request.getRemoteIPAddress());
-
-                if (!isAccessAllowed(typeRequest)) {
-                    iter.remove();
-                }
-            }
-        }
-    }
-
-
-    private RangerServiceDef getServiceDef() {
-        RangerBasePlugin plugin = atlasPlugin;
-
-        return plugin != null ? plugin.getServiceDef() : null;
-    }
-
-    private boolean isAccessAllowed(AtlasEntityAccessRequest request, RangerAtlasAuditHandler auditHandler) throws AtlasAuthorizationException {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("==> isAccessAllowed(" + request + ")");
-        }
-
-        boolean ret = false;
-
-        try {
-            final String                   action         = request.getAction() != null ? request.getAction().getType() : null;
-            final Set<String>              entityTypes    = request.getEntityTypeAndAllSuperTypes();
-            final String                   entityId       = request.getEntityId();
-            final String                   classification = request.getClassification() != null ? request.getClassification().getTypeName() : null;
-            final RangerAccessRequestImpl  rangerRequest  = new RangerAccessRequestImpl();
-            final RangerAccessResourceImpl rangerResource = new RangerAccessResourceImpl();
-            final String                   ownerUser      = request.getEntity() != null ? (String) request.getEntity().getAttribute(RESOURCE_ENTITY_OWNER) : null;
-
-            rangerResource.setValue(RESOURCE_ENTITY_TYPE, entityTypes);
-            rangerResource.setValue(RESOURCE_ENTITY_ID, entityId);
-            rangerResource.setOwnerUser(ownerUser);
-            rangerRequest.setAccessType(action);
-            rangerRequest.setAction(action);
-            rangerRequest.setUser(request.getUser());
-            rangerRequest.setUserGroups(request.getUserGroups());
-            rangerRequest.setClientIPAddress(request.getClientIPAddress());
-            rangerRequest.setAccessTime(request.getAccessTime());
-            rangerRequest.setResource(rangerResource);
-            rangerRequest.setForwardedAddresses(request.getForwardedAddresses());
-            rangerRequest.setRemoteIPAddress(request.getRemoteIPAddress());
-
-            if (AtlasPrivilege.ENTITY_ADD_LABEL.equals(request.getAction()) || AtlasPrivilege.ENTITY_REMOVE_LABEL.equals(request.getAction())) {
-                rangerResource.setValue(RESOURCE_ENTITY_LABEL, request.getLabel());
-            } else if (AtlasPrivilege.ENTITY_UPDATE_BUSINESS_METADATA.equals(request.getAction())) {
-                rangerResource.setValue(RESOURCE_ENTITY_BUSINESS_METADATA, request.getBusinessMetadata());
-            } else if (StringUtils.isNotEmpty(classification) && CLASSIFICATION_PRIVILEGES.contains(request.getAction())) {
-                rangerResource.setValue(RESOURCE_CLASSIFICATION, request.getClassificationTypeAndAllSuperTypes(classification));
-            }
-
-            if (CollectionUtils.isNotEmpty(request.getEntityClassifications())) {
-                // check authorization for each classification
-                for (String classificationToAuthorize : request.getEntityClassifications()) {
-                    rangerResource.setValue(RESOURCE_ENTITY_CLASSIFICATION, request.getClassificationTypeAndAllSuperTypes(classificationToAuthorize));
-
-                    ret = checkAccess(rangerRequest, auditHandler);
-
-                    if (!ret) {
-                        break;
-                    }
-                }
-            } else {
-                rangerResource.setValue(RESOURCE_ENTITY_CLASSIFICATION, ENTITY_NOT_CLASSIFIED );
-
-                ret = checkAccess(rangerRequest, auditHandler);
-            }
-
-        } finally {
-            if(auditHandler != null) {
-                auditHandler.flushAudit();
-            }
-        }
-
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("<== isAccessAllowed(" + request + "): " + ret);
-        }
-
-        return ret;
-    }
-
-    private boolean checkAccess(RangerAccessRequestImpl request) {
-        boolean          ret    = false;
-        RangerBasePlugin plugin = atlasPlugin;
-
-        if (plugin != null) {
-            RangerAccessResult result = plugin.isAccessAllowed(request);
-
-            ret = result != null && result.getIsAllowed();
-        } else {
-            LOG.warn("RangerAtlasPlugin not initialized. Access blocked!!!");
-        }
-
-        return ret;
-    }
-
-    private boolean checkAccess(RangerAccessRequestImpl request, RangerAtlasAuditHandler auditHandler) {
-        boolean          ret    = false;
-        RangerBasePlugin plugin = atlasPlugin;
-
-        if (plugin != null) {
-            RangerAccessResult result = plugin.isAccessAllowed(request, auditHandler);
-
-            ret = result != null && result.getIsAllowed();
-        } else {
-            LOG.warn("RangerAtlasPlugin not initialized. Access blocked!!!");
-        }
-
-        return ret;
-    }
-
-    private void checkAccessAndScrub(AtlasEntityHeader entity, AtlasSearchResultScrubRequest request) throws AtlasAuthorizationException {
-        if (entity != null && request != null) {
-            final AtlasEntityAccessRequest entityAccessRequest = new AtlasEntityAccessRequest(request.getTypeRegistry(), AtlasPrivilege.ENTITY_READ, entity, request.getUser(), request.getUserGroups());
-
-            entityAccessRequest.setClientIPAddress(request.getClientIPAddress());
-            entityAccessRequest.setForwardedAddresses(request.getForwardedAddresses());
-            entityAccessRequest.setRemoteIPAddress(request.getRemoteIPAddress());
-
-            if (!isAccessAllowed(entityAccessRequest, null)) {
-                scrubEntityHeader(entity);
-            }
-        }
-    }
-
-    class RangerAtlasPlugin extends RangerBasePlugin {
-        RangerAtlasPlugin() {
-            super("atlas", "atlas");
-        }
-    }
-
-    class RangerAtlasAuditHandler extends RangerDefaultAuditHandler {
-        private final Map<String, AuthzAuditEvent> auditEvents;
-        private final String                       resourcePath;
-        private       boolean                      denyExists = false;
-
-        public RangerAtlasAuditHandler(AtlasEntityAccessRequest request, RangerServiceDef serviceDef) {
-            Collection<String> classifications    = request.getEntityClassifications();
-            String             strClassifications = classifications == null ? "[]" : classifications.toString();
-
-            if (request.getClassification() != null) {
-                strClassifications += ("," + request.getClassification().getTypeName());
-            }
-
-            RangerAccessResourceImpl rangerResource = new RangerAccessResourceImpl();
-
-            rangerResource.setServiceDef(serviceDef);
-            rangerResource.setValue(RESOURCE_ENTITY_TYPE, request.getEntityType());
-            rangerResource.setValue(RESOURCE_ENTITY_CLASSIFICATION, strClassifications);
-            rangerResource.setValue(RESOURCE_ENTITY_ID, request.getEntityId());
-
-            if (AtlasPrivilege.ENTITY_ADD_LABEL.equals(request.getAction()) || AtlasPrivilege.ENTITY_REMOVE_LABEL.equals(request.getAction())) {
-                rangerResource.setValue(RESOURCE_ENTITY_LABEL, "label=" + request.getLabel());
-            } else if (AtlasPrivilege.ENTITY_UPDATE_BUSINESS_METADATA.equals(request.getAction())) {
-                rangerResource.setValue(RESOURCE_ENTITY_BUSINESS_METADATA, "business-metadata=" + request.getBusinessMetadata());
-            }
-
-            auditEvents  = new HashMap<>();
-            resourcePath = rangerResource.getAsString();
-        }
-
-        @Override
-        public void processResult(RangerAccessResult result) {
-            if (denyExists) { // nothing more to do, if a deny already encountered
-                return;
-            }
-
-            AuthzAuditEvent auditEvent = super.getAuthzEvents(result);
-
-            if (auditEvent != null) {
-                // audit event might have list of entity-types and classification-types; overwrite with the values in original request
-                if (resourcePath != null) {
-                    auditEvent.setResourcePath(resourcePath);
-                }
-
-                if (!result.getIsAllowed()) {
-                    denyExists = true;
-
-                    auditEvents.clear();
-                }
-
-                auditEvents.put(auditEvent.getPolicyId() + auditEvent.getAccessType(), auditEvent);
-            }
-        }
-
-
-        public void flushAudit() {
-            if (auditEvents != null) {
-                for (AuthzAuditEvent auditEvent : auditEvents.values()) {
-                    logAuthzAudit(auditEvent);
-                }
-            }
-        }
-    }
-}
diff --git a/plugin-atlas/src/main/java/org/apache/ranger/services/atlas/RangerServiceAtlas.java b/plugin-atlas/src/main/java/org/apache/ranger/services/atlas/RangerServiceAtlas.java
deleted file mode 100644
index 4851d8740..000000000
--- a/plugin-atlas/src/main/java/org/apache/ranger/services/atlas/RangerServiceAtlas.java
+++ /dev/null
@@ -1,693 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.apache.ranger.services.atlas;
-
-import java.security.PrivilegedAction;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import com.google.gson.Gson;
-import com.sun.jersey.api.client.Client;
-import com.sun.jersey.api.client.ClientResponse;
-import com.sun.jersey.api.client.WebResource;
-import com.sun.jersey.core.util.MultivaluedMapImpl;
-import org.apache.atlas.model.discovery.AtlasSearchResult;
-import org.apache.atlas.model.instance.AtlasEntityHeader;
-import org.apache.commons.io.FilenameUtils;
-import org.apache.commons.io.IOCase;
-import org.apache.commons.lang.StringUtils;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.apache.ranger.plugin.client.BaseClient;
-import org.apache.ranger.plugin.client.HadoopException;
-import org.apache.ranger.plugin.model.RangerPolicy;
-import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItem;
-import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItemAccess;
-import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyResource;
-import org.apache.ranger.plugin.model.RangerService;
-import org.apache.ranger.plugin.model.RangerServiceDef;
-import org.apache.ranger.plugin.policyengine.RangerPolicyEngine;
-import org.apache.ranger.plugin.service.RangerBaseService;
-import org.apache.ranger.plugin.service.ResourceLookupContext;
-import org.apache.ranger.plugin.util.PasswordUtils;
-import javax.security.auth.Subject;
-import javax.ws.rs.core.MultivaluedMap;
-import javax.ws.rs.core.NewCookie;
-
-public class RangerServiceAtlas extends RangerBaseService {
-	private static final Log LOG = LogFactory.getLog(RangerServiceAtlas.class);
-
-	public static final String RESOURCE_SERVICE                       = "atlas-service";
-	public static final String RESOURCE_TYPE_CATEGORY                 = "type-category";
-	public static final String RESOURCE_TYPE_NAME                     = "type";
-	public static final String RESOURCE_ENTITY_TYPE                   = "entity-type";
-	public static final String RESOURCE_ENTITY_CLASSIFICATION         = "entity-classification";
-	public static final String RESOURCE_CLASSIFICATION                = "classification";
-	public static final String RESOURCE_ENTITY_ID                     = "entity";
-	public static final String RESOURCE_ENTITY_LABEL                  = "entity-label";
-	public static final String RESOURCE_ENTITY_BUSINESS_METADATA      = "entity-business-metadata";
-	public static final String RESOURCE_ENTITY_OWNER                  = "owner";
-	public static final String RESOURCE_RELATIONSHIP_TYPE             = "relationship-type";
-	public static final String RESOURCE_END_ONE_ENTITY_TYPE           = "end-one-entity-type";
-	public static final String RESOURCE_END_ONE_ENTITY_CLASSIFICATION = "end-one-entity-classification";
-	public static final String RESOURCE_END_ONE_ENTITY_ID             = "end-one-entity";
-	public static final String RESOURCE_END_TWO_ENTITY_TYPE           =  "end-two-entity-type";
-	public static final String RESOURCE_END_TWO_ENTITY_CLASSIFICATION = "end-two-entity-classification";
-	public static final String RESOURCE_END_TWO_ENTITY_ID             = "end-two-entity";
-	public static final String SEARCH_FEATURE_POLICY_NAME             = "Allow users to manage favorite searches";
-
-	public static final String ACCESS_TYPE_ENTITY_READ  = "entity-read";
-	public static final String ACCESS_TYPE_TYPE_READ = "type-read";
-	public static final String ACCESS_TYPE_ENTITY_CREATE  = "entity-create";
-	public static final String ACCESS_TYPE_ENTITY_UPDATE = "entity-update";
-	public static final String ACCESS_TYPE_ENTITY_DELETE = "entity-delete";
-	public static final String ADMIN_USERNAME_DEFAULT   = "admin";
-	public static final String TAGSYNC_USERNAME_DEFAULT = "rangertagsync";
-	public static final String ENTITY_TYPE_USER_PROFILE = "__AtlasUserProfile";
-	public static final String ENTITY_TYPE_SAVED_SEARCH = "__AtlasUserSavedSearch";
-	public static final String ENTITY_ID_USER_PROFILE = RangerPolicyEngine.USER_CURRENT;
-	public static final String ENTITY_ID_USER_SAVED_SEARCH= RangerPolicyEngine.USER_CURRENT + ":*";
-
-
-	public static final String CONFIG_REST_ADDRESS            = "atlas.rest.address";
-	public static final String CONFIG_USERNAME                = "username";
-	public static final String CONFIG_PASSWORD                = "password";
-	public static final String ENTITY_NOT_CLASSIFIED          = "_NOT_CLASSIFIED";
-
-	private static final String TYPE_ENTITY             = "entity";
-	private static final String TYPE_CLASSIFICATION     = "classification";
-	private static final String TYPE_STRUCT             = "struct";
-	private static final String TYPE_ENUM               = "enum";
-	private static final String TYPE_RELATIONSHIP       = "relationship";
-	private static final String TYPE_BUSINESS_METADATA  = "business_metadata";
-
-	private static final String URL_LOGIN                = "/j_spring_security_check";
-	private static final String URL_GET_TYPESDEF_HEADERS = "/api/atlas/v2/types/typedefs/headers";
-	private static final String URl_ENTITY_SEARCH        = "v2/search/attribute?attrName=qualifiedName";
-
-	private static final String WEB_RESOURCE_CONTENT_TYPE = "application/x-www-form-urlencoded";
-	private static final String CONNECTION_ERROR_MSG      =   " You can still save the repository and start creating"
-	                                                        + " policies, but you would not be able to use autocomplete for"
-	                                                        + " resource names. Check ranger_admin.log for more info.";
-
-	public RangerServiceAtlas() {
-		super();
-	}
-
-	@Override
-	public void init(RangerServiceDef serviceDef, RangerService service) {
-		super.init(serviceDef, service);
-	}
-
-	@Override
-	public Map<String, Object> validateConfig() throws Exception {
-		if (LOG.isDebugEnabled()) {
-			LOG.debug("==> RangerServiceAtlas.validateConfig()");
-		}
-
-		AtlasServiceClient  client = new AtlasServiceClient(getServiceName(), configs);
-		Map<String, Object> ret    = client.validateConfig();
-
-		if (LOG.isDebugEnabled()) {
-			LOG.debug("<== RangerServiceAtlas.validateConfig(): " + ret );
-		}
-
-		return ret;
-	}
-
-	@Override
-	public List<String> lookupResource(ResourceLookupContext context)throws Exception {
-		if (LOG.isDebugEnabled()) {
-			LOG.debug("==> RangerServiceAtlas.lookupResource(" + context + ")");
-		}
-
-		AtlasServiceClient client = new AtlasServiceClient(getServiceName(), configs);
-		List<String>       ret    = client.lookupResource(context);
-
-		if (LOG.isDebugEnabled()) {
-			LOG.debug("<== RangerServiceAtlas.lookupResource("+ context + "): " + ret);
-		}
-
-		return ret;
-	}
-
-    @Override
-    public List<RangerPolicy> getDefaultRangerPolicies() throws Exception {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("==> RangerServiceAtlas.getDefaultRangerPolicies()");
-        }
-
-        List<RangerPolicy> ret                         = super.getDefaultRangerPolicies();
-        String             adminUser                   = getStringConfig("atlas.admin.user", ADMIN_USERNAME_DEFAULT);
-        String             tagSyncUser                 = getStringConfig("atlas.rangertagsync.user", TAGSYNC_USERNAME_DEFAULT);
-
-        boolean            relationshipTypeAllowPublic = getBooleanConfig("atlas.default-policy.relationship-type.allow.public", true);
-
-
-        for (RangerPolicy defaultPolicy : ret) {
-            final Map<String, RangerPolicyResource> policyResources = defaultPolicy.getResources();
-
-            // 1. add adminUser to every policyItem
-            for (RangerPolicyItem defaultPolicyItem : defaultPolicy.getPolicyItems()) {
-                defaultPolicyItem.getUsers().add(adminUser);
-            }
-
-            // 2. add a policy-item for rangertagsync user with 'entity-read' permission in the policy for 'entity-type'
-            if (policyResources.containsKey(RESOURCE_ENTITY_TYPE) && !policyResources.containsKey(RESOURCE_CLASSIFICATION)) {
-                RangerPolicyItem policyItemForTagSyncUser = new RangerPolicyItem();
-
-                policyItemForTagSyncUser.setUsers(Collections.singletonList(tagSyncUser));
-                policyItemForTagSyncUser.setGroups(Collections.singletonList(RangerPolicyEngine.GROUP_PUBLIC));
-                policyItemForTagSyncUser.setAccesses(Collections.singletonList(new RangerPolicyItemAccess(ACCESS_TYPE_ENTITY_READ)));
-
-                defaultPolicy.getPolicyItems().add(policyItemForTagSyncUser);
-            }
-
-            if (relationshipTypeAllowPublic) {
-                // 3. add 'public' group in the policy for 'relationship-type',
-                if (policyResources.containsKey(RangerServiceAtlas.RESOURCE_RELATIONSHIP_TYPE)) {
-                    for (RangerPolicyItem defaultPolicyItem : defaultPolicy.getPolicyItems()) {
-                        defaultPolicyItem.getGroups().add(RangerPolicyEngine.GROUP_PUBLIC);
-                    }
-                }
-            }
-
-			if (defaultPolicy.getName().contains("all")
-					&& policyResources.containsKey(RangerServiceAtlas.RESOURCE_ENTITY_TYPE)
-					&& StringUtils.isNotBlank(lookUpUser) && !policyResources.containsKey(RESOURCE_CLASSIFICATION)) {
-				RangerPolicyItem policyItemForLookupUser = new RangerPolicyItem();
-				policyItemForLookupUser.setUsers(Collections.singletonList(lookUpUser));
-				policyItemForLookupUser.setAccesses(Collections.singletonList(new RangerPolicyItemAccess(ACCESS_TYPE_ENTITY_READ)));
-				policyItemForLookupUser.setDelegateAdmin(false);
-				defaultPolicy.getPolicyItems().add(policyItemForLookupUser);
-			}
-
-			//  add a policy-item for rangertagsync user with 'type-read' permission in the policy for 'type-category'
-			if (policyResources.containsKey(RangerServiceAtlas.RESOURCE_TYPE_CATEGORY)) {
-				RangerPolicyItem policyItemTypeReadForAll = new RangerPolicyItem();
-				policyItemTypeReadForAll.setGroups(Collections.singletonList(RangerPolicyEngine.GROUP_PUBLIC));
-				policyItemTypeReadForAll.setAccesses(Collections.singletonList(new RangerPolicyItemAccess(ACCESS_TYPE_TYPE_READ)));
-				defaultPolicy.getPolicyItems().add(policyItemTypeReadForAll);
-			}
-        }
-
-        //4.add new policy for public group with entity-read, entity-create, entity-update, entity-delete for  __AtlasUserProfile, __AtlasUserSavedSearch entity type
-        RangerPolicy searchFeaturePolicy = getSearchFeaturePolicy();
-        ret.add(searchFeaturePolicy);
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("<== RangerServiceAtlas.getDefaultRangerPolicies()");
-        }
-
-        return ret;
-    }
-
-	private RangerPolicy getSearchFeaturePolicy() {
-		RangerPolicy searchFeaturePolicy = new RangerPolicy();
-
-		searchFeaturePolicy.setName(SEARCH_FEATURE_POLICY_NAME);
-		searchFeaturePolicy.setService(serviceName);
-		searchFeaturePolicy.setResources(getSearchFeaturePolicyResource());
-		searchFeaturePolicy.setPolicyItems(getSearchFeaturePolicyItem());
-
-		return searchFeaturePolicy;
-	}
-
-	private List<RangerPolicyItem> getSearchFeaturePolicyItem() {
-		List<RangerPolicyItemAccess> accesses = new ArrayList<RangerPolicyItemAccess>();
-
-		accesses.add(new RangerPolicyItemAccess(ACCESS_TYPE_ENTITY_READ));
-		accesses.add(new RangerPolicyItemAccess(ACCESS_TYPE_ENTITY_CREATE));
-		accesses.add(new RangerPolicyItemAccess(ACCESS_TYPE_ENTITY_UPDATE));
-		accesses.add(new RangerPolicyItemAccess(ACCESS_TYPE_ENTITY_DELETE));
-
-		RangerPolicyItem item = new RangerPolicyItem(accesses, Arrays.asList(RangerPolicyEngine.USER_CURRENT), null, null, null, false);
-
-		return Collections.singletonList(item);
-	}
-
-	private Map<String, RangerPolicyResource> getSearchFeaturePolicyResource() {
-		Map<String, RangerPolicyResource> resources = new HashMap<>();
-
-		resources.put(RESOURCE_ENTITY_TYPE, new RangerPolicyResource(Arrays.asList(ENTITY_TYPE_USER_PROFILE, ENTITY_TYPE_SAVED_SEARCH), false, false));
-		resources.put(RESOURCE_ENTITY_CLASSIFICATION, new RangerPolicyResource("*"));
-		resources.put(RESOURCE_ENTITY_ID, new RangerPolicyResource(Arrays.asList(ENTITY_ID_USER_PROFILE, ENTITY_ID_USER_SAVED_SEARCH), false, false));
-
-		return resources;
-	}
-
-	private static class AtlasServiceClient extends BaseClient {
-		private static final String[] TYPE_CATEGORIES = new String[] { "classification", "enum", "entity", "relationship", "struct" ,"business_metadata" };
-
-		Map<String, List<String>> typesDef = new HashMap<>();
-
-		public AtlasServiceClient(String serviceName, Map<String, String> serviceConfig) {
-			super(serviceName, serviceConfig);
-		}
-
-		public Map<String, Object> validateConfig() {
-			Map<String, Object> ret = new HashMap<>();
-
-			loginToAtlas(Client.create());
-
-			BaseClient.generateResponseDataMap(true, "ConnectionTest Successful", "ConnectionTest Successful", null, null, ret);
-
-			return ret;
-		}
-
-		public List<String> lookupResource(ResourceLookupContext lookupContext) {
-			final List<String> ret           = new ArrayList<>();
-			final String       userInput     = lookupContext.getUserInput();
-			final List<String> currentValues = lookupContext.getResources().get(lookupContext.getResourceName());
-
-			switch(lookupContext.getResourceName()) {
-				case RESOURCE_TYPE_CATEGORY: {
-					for (String typeCategory : TYPE_CATEGORIES) {
-						addIfStartsWithAndNotExcluded(ret, typeCategory, userInput, currentValues);
-					}
-				}
-				break;
-
-				case RESOURCE_TYPE_NAME: {
-					refreshTypesDefs();
-
-					final List<String> typeCategories = lookupContext.getResources().get(RESOURCE_TYPE_CATEGORY);
-
-					if (emptyOrContainsMatch(typeCategories, TYPE_CLASSIFICATION)) {
-						addIfStartsWithAndNotExcluded(ret, typesDef.get(TYPE_CLASSIFICATION), userInput, currentValues);
-					}
-
-					if (emptyOrContainsMatch(typeCategories, TYPE_ENTITY)) {
-						addIfStartsWithAndNotExcluded(ret, typesDef.get(TYPE_ENTITY), userInput, currentValues);
-					}
-
-					if (emptyOrContainsMatch(typeCategories, TYPE_ENUM)) {
-						addIfStartsWithAndNotExcluded(ret, typesDef.get(TYPE_ENUM), userInput, currentValues);
-					}
-
-					if (emptyOrContainsMatch(typeCategories, TYPE_STRUCT)) {
-						addIfStartsWithAndNotExcluded(ret, typesDef.get(TYPE_STRUCT), userInput, currentValues);
-					}
-
-					if (emptyOrContainsMatch(typeCategories, TYPE_RELATIONSHIP)) {
-						addIfStartsWithAndNotExcluded(ret, typesDef.get(TYPE_RELATIONSHIP), userInput, currentValues);
-					}
-
-					if (emptyOrContainsMatch(typeCategories, TYPE_BUSINESS_METADATA)) {
-						addIfStartsWithAndNotExcluded(ret, typesDef.get(TYPE_BUSINESS_METADATA), userInput, currentValues);
-					}
-				}
-				break;
-
-				case RESOURCE_END_ONE_ENTITY_TYPE:
-				case RESOURCE_END_TWO_ENTITY_TYPE:
-				case RESOURCE_ENTITY_TYPE: {
-					refreshTypesDefs();
-
-					addIfStartsWithAndNotExcluded(ret, typesDef.get(TYPE_ENTITY), userInput, currentValues);
-				}
-				break;
-
-				case RESOURCE_END_ONE_ENTITY_CLASSIFICATION:
-				case RESOURCE_END_TWO_ENTITY_CLASSIFICATION:
-				case RESOURCE_ENTITY_CLASSIFICATION: {
-					refreshTypesDefs();
-
-					addIfStartsWithAndNotExcluded(ret, typesDef.get(TYPE_CLASSIFICATION), userInput, currentValues);
-				}
-                break;
-
-				case RESOURCE_ENTITY_ID: {
-					List<String> searchTypes = lookupContext.getResources().get("entity-type");
-
-					if (searchTypes != null && searchTypes.size() == 1) {
-						List<String> values = searchEntities(userInput, searchTypes.get(0));
-
-						addIfStartsWithAndNotExcluded(ret, values, userInput, currentValues);
-					}
-				}
-				break;
-
-				case RESOURCE_RELATIONSHIP_TYPE: {
-					refreshTypesDefs();
-					addIfStartsWithAndNotExcluded(ret, typesDef.get(TYPE_RELATIONSHIP), userInput, currentValues);
-
-				}
-				break;
-
-				case RESOURCE_END_ONE_ENTITY_ID: {
-
-					List<String> searchTypes = lookupContext.getResources().get(RESOURCE_END_ONE_ENTITY_TYPE);
-
-					if (searchTypes != null && searchTypes.size() == 1) {
-						List<String> values = searchEntities(userInput, searchTypes.get(0));
-
-						addIfStartsWithAndNotExcluded(ret, values, userInput, currentValues);
-					}
-
-				}
-				break;
-
-				case RESOURCE_END_TWO_ENTITY_ID: {
-					List<String> searchTypes = lookupContext.getResources().get(RESOURCE_END_TWO_ENTITY_TYPE);
-
-					if (searchTypes != null && searchTypes.size() == 1) {
-						List<String> values = searchEntities(userInput, searchTypes.get(0));
-
-						addIfStartsWithAndNotExcluded(ret, values, userInput, currentValues);
-					}
-				}
-				break;
-
-				default: {
-					ret.add(lookupContext.getResourceName());
-				}
-			}
-
-			return ret;
-		}
-
-		private ClientResponse loginToAtlas(Client client) {
-			ClientResponse ret      = null;
-			HadoopException excp     = null;
-			String          loginUrl = null;
-
-			for (String atlasUrl : getAtlasUrls()) {
-				try {
-					loginUrl = atlasUrl + URL_LOGIN;
-
-					WebResource                    webResource = client.resource(loginUrl);
-					MultivaluedMap<String, String> formData    = new MultivaluedMapImpl();
-					String                         password    = null;
-
-					try {
-						password = PasswordUtils.decryptPassword(getPassword());
-					} catch (Exception ex) {
-						LOG.info("Password decryption failed; trying Atlas connection with received password string");
-					}
-
-					if (password == null) {
-						password = getPassword();
-					}
-
-					formData.add("j_username", getUserName());
-					formData.add("j_password", password);
-
-					try {
-						ret = webResource.type(WEB_RESOURCE_CONTENT_TYPE).post(ClientResponse.class, formData);
-					} catch (Exception e) {
-						LOG.error("failed to login to Atlas at " + loginUrl, e);
-					}
-
-					if (ret != null) {
-						break;
-					}
-				} catch (Throwable t) {
-					String msgDesc = "Exception while login to Atlas at : " + loginUrl;
-
-					LOG.error(msgDesc, t);
-
-					excp = new HadoopException(msgDesc, t);
-
-					excp.generateResponseDataMap(false, BaseClient.getMessage(t), msgDesc + CONNECTION_ERROR_MSG, null, null);
-				}
-			}
-
-			if (ret == null) {
-				if (excp == null) {
-					String msgDesc = "Exception while login to Atlas at : " + loginUrl;
-
-					excp = new HadoopException(msgDesc);
-
-					excp.generateResponseDataMap(false, "", msgDesc + CONNECTION_ERROR_MSG, null, null);
-				}
-
-				throw excp;
-			}
-
-			return ret;
-		}
-
-		private boolean refreshTypesDefs() {
-			boolean ret  = false;
-			Subject subj = getLoginSubject();
-
-			if (subj == null) {
-				return ret;
-			}
-
-			Map<String, List<String>> typesDef = Subject.doAs(subj, new PrivilegedAction<Map<String, List<String>>>() {
-				@Override
-				public Map<String, List<String>> run() {
-					Map<String, List<String>> ret  = null;
-
-					for (String atlasUrl : getAtlasUrls()) {
-						Client client = null;
-
-						try {
-							client = Client.create();
-
-							ClientResponse      loginResponse = loginToAtlas(client);
-							WebResource         webResource   = client.resource(atlasUrl + URL_GET_TYPESDEF_HEADERS);
-							WebResource.Builder builder       = webResource.getRequestBuilder();
-
-							for (NewCookie cook : loginResponse.getCookies()) {
-								builder = builder.cookie(cook);
-							}
-
-							ClientResponse response = builder.get(ClientResponse.class);
-
-							if (response != null) {
-								String jsonString = response.getEntity(String.class);
-								Gson   gson       = new Gson();
-								List   types      = gson.fromJson(jsonString, List.class);
-
-								ret = new HashMap<>();
-
-								for (Object type : types) {
-									if (type instanceof Map) {
-										Map    typeDef  = (Map) type;
-										Object name     = typeDef.get("name");
-										Object category = typeDef.get("category");
-
-										if (name != null && category != null) {
-											String       strCategory  = category.toString().toLowerCase();
-											List<String> categoryList = ret.get(strCategory);
-
-											if (categoryList == null) {
-												categoryList = new ArrayList<>();
-
-												ret.put(strCategory, categoryList);
-											}
-
-											categoryList.add(name.toString());
-										}
-									}
-								}
-
-								break;
-							}
-						} catch (Throwable t) {
-							String msgDesc = "Exception while getting Atlas Resource List.";
-
-							LOG.error(msgDesc, t);
-						} finally {
-							if (client != null) {
-								client.destroy();
-							}
-						}
-					}
-
-					return ret;
-				}
-			});
-
-			if (typesDef != null) {
-				this.typesDef = typesDef;
-
-				ret = true;
-			}
-
-			return ret;
-		}
-
-		private List<String> searchEntities(String userInput, String entityType) {
-			if( LOG.isDebugEnabled()) {
-				LOG.debug("==> RangerServiceAtlas.searchEntities(userInput=" + userInput + ", entityType=" + entityType + ")");
-			}
-
-			Subject subj = getLoginSubject();
-
-			if (subj == null) {
-				return null;
-			}
-
-			List<String> list = Subject.doAs(subj, new PrivilegedAction<List<String>>() {
-				@Override
-				public List<String> run() {
-					List<String> ret = null;
-
-					for (String atlasUrl : getAtlasUrls()) {
-						Client client = null;
-
-						try {
-							client = Client.create();
-
-							ClientResponse loginResponse     = loginToAtlas(client);
-							String         entitySearcApiUrl = atlasUrl + "/api/atlas/" + URl_ENTITY_SEARCH;
-							StringBuilder  searchUrl         = new StringBuilder();
-
-							searchUrl.append(entitySearcApiUrl)
-									 .append("&typeName=")
-									 .append(entityType)
-									 .append("&attrValuePrefix=" + userInput + "&limit=25");
-
-
-							WebResource         webResource = client.resource(searchUrl.toString());
-							WebResource.Builder builder     = webResource.getRequestBuilder();
-
-							for (NewCookie cook : loginResponse.getCookies()) {
-								builder = builder.cookie(cook);
-							}
-
-							ClientResponse response = builder.get(ClientResponse.class);
-
-							if (response != null) {
-								String            jsonString   = response.getEntity(String.class);
-								Gson              gson         = new Gson();
-								AtlasSearchResult searchResult = gson.fromJson(jsonString, AtlasSearchResult.class);
-
-								ret = new ArrayList<>();
-
-								if (searchResult != null) {
-									List<AtlasEntityHeader> entityHeaderList = searchResult.getEntities();
-
-									for (AtlasEntityHeader entity : entityHeaderList) {
-										ret.add((String) entity.getAttribute("qualifiedName"));
-									}
-								}
-							}
-						} catch (Throwable t) {
-							String msgDesc = "Exception while getting Atlas Entity Resource List.";
-
-							LOG.error(msgDesc, t);
-						} finally {
-							if (client != null) {
-								client.destroy();
-							}
-						}
-					}
-
-					return ret;
-				}
-			});
-
-			if (LOG.isDebugEnabled()) {
-				LOG.debug("<== RangerServiceAtlas.searchEntities(userInput=" + userInput + ", entityType=" + entityType + "): " + list);
-			}
-
-			return list;
-		}
-
-		String[] getAtlasUrls() {
-			String   urlString = connectionProperties.get(CONFIG_REST_ADDRESS);
-			String[] ret       = urlString == null ? new String[0] : urlString.split(",");
-
-			// remove separator at the end
-			for (int i = 0; i < ret.length; i++) {
-				String url = ret[i];
-
-				while (url.length() > 0 && url.charAt(url.length() - 1) == '/') {
-					url = url.substring(0, url.length() - 1);
-				}
-
-				ret[i] = url;
-			}
-
-			return ret;
-		}
-
-		String getUserName() {
-			return connectionProperties.get(CONFIG_USERNAME);
-		}
-
-		String getPassword() {
-			return connectionProperties.get(CONFIG_PASSWORD);
-		}
-
-		boolean emptyOrContainsMatch(List<String> list, String value) {
-			if (list == null || list.isEmpty()) {
-				return true;
-			}
-
-			for (String item : list) {
-				if (StringUtils.equalsIgnoreCase(item, value) || FilenameUtils.wildcardMatch(value, item, IOCase.INSENSITIVE)) {
-					return true;
-				}
-			}
-
-			return false;
-		}
-
-		void addIfStartsWithAndNotExcluded(List<String> list, List<String> values, String prefix, List<String> excludeList) {
-			if (list == null) {
-				return;
-			}
-
-			if (values == null) {
-				addIfStartsWithAndNotExcluded(list, ENTITY_NOT_CLASSIFIED, prefix, excludeList);
-			} else {
-				for (String value : values) {
-					addIfStartsWithAndNotExcluded(list, value, prefix, excludeList);
-				}
-			}
-		}
-
-		void addIfStartsWithAndNotExcluded(List<String> list, String value, String prefix, List<String> excludeList) {
-			if (value == null || list == null) {
-				return;
-			}
-
-			if (prefix != null && !value.startsWith(prefix)) {
-				return;
-			}
-
-			if (excludeList != null && excludeList.contains(value)) {
-				return;
-			}
-
-			list.add(value);
-		}
-	}
-
-	String getStringConfig(String configName, String defaultValue) {
-		String val = service.getConfigs().get(configName);
-
-		return StringUtils.isBlank(val) ? defaultValue : val;
-	}
-
-	boolean getBooleanConfig(String configName, boolean defaultValue) {
-		String val = service.getConfigs().get(configName);
-
-		return StringUtils.isBlank(val) ? defaultValue : Boolean.parseBoolean(val);
-	}
-}
diff --git a/plugin-atlas/src/main/java/org/apache/ranger/services/atlas/json/model/ResourceEntityResponse.java b/plugin-atlas/src/main/java/org/apache/ranger/services/atlas/json/model/ResourceEntityResponse.java
deleted file mode 100644
index a9ebc6633..000000000
--- a/plugin-atlas/src/main/java/org/apache/ranger/services/atlas/json/model/ResourceEntityResponse.java
+++ /dev/null
@@ -1,60 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.apache.ranger.services.atlas.json.model;
-
-public class ResourceEntityResponse {
-
-	private String href;
-	private String name;
-	private String id;
-	private String type;
-
-	public String getHref() {
-		return href;
-	}
-
-	public void setHref(String href) {
-		this.href = href;
-	}
-
-	public String getName() {
-		return name;
-	}
-
-	public void setName(String name) {
-		this.name = name;
-	}
-
-	public String getId() {
-		return id;
-	}
-
-	public void setId(String id) {
-		this.id = id;
-	}
-
-	public String getType() {
-		return type;
-	}
-
-	public void setType(String type) {
-		this.type = type;
-	}
-
-}
diff --git a/plugin-atlas/src/main/java/org/apache/ranger/services/atlas/json/model/ResourceOperationResponse.java b/plugin-atlas/src/main/java/org/apache/ranger/services/atlas/json/model/ResourceOperationResponse.java
deleted file mode 100644
index d017e4719..000000000
--- a/plugin-atlas/src/main/java/org/apache/ranger/services/atlas/json/model/ResourceOperationResponse.java
+++ /dev/null
@@ -1,83 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.apache.ranger.services.atlas.json.model;
-
-import java.util.List;
-
-public class ResourceOperationResponse {
-	private String requestId;
-	private String query;
-	private String queryType;
-	private List<Results> results;
-
-	public String getRequestId() {
-		return requestId;
-	}
-
-	public void setRequestId(String requestId) {
-		this.requestId = requestId;
-	}
-
-	public String getQuery() {
-		return query;
-	}
-
-	public void setQuery(String query) {
-		this.query = query;
-	}
-
-	public String getQueryType() {
-		return queryType;
-	}
-
-	public void setQueryType(String queryType) {
-		this.queryType = queryType;
-	}
-
-	public List<Results> getResults() {
-		return results;
-	}
-
-	public void setResults(List<Results> results) {
-		this.results = results;
-	}
-
-	public class Results {
-
-		private String result;
-		private String count;
-
-		public String getResult() {
-			return result;
-		}
-
-		public void setResult(String result) {
-			this.result = result;
-		}
-
-		public String getCount() {
-			return count;
-		}
-
-		public void setCount(String count) {
-			this.count = count;
-		}
-	}
-
-}
diff --git a/plugin-atlas/src/main/java/org/apache/ranger/services/atlas/json/model/ResourceTaxonomyResponse.java b/plugin-atlas/src/main/java/org/apache/ranger/services/atlas/json/model/ResourceTaxonomyResponse.java
deleted file mode 100644
index 8d4d18332..000000000
--- a/plugin-atlas/src/main/java/org/apache/ranger/services/atlas/json/model/ResourceTaxonomyResponse.java
+++ /dev/null
@@ -1,50 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.apache.ranger.services.atlas.json.model;
-
-public class ResourceTaxonomyResponse {
-	private String href;
-	private String name;
-	private String description;
-
-	public String getHref() {
-		return href;
-	}
-
-	public void setHref(String href) {
-		this.href = href;
-	}
-
-	public String getName() {
-		return name;
-	}
-
-	public void setName(String name) {
-		this.name = name;
-	}
-
-	public String getDescription() {
-		return description;
-	}
-
-	public void setDescription(String description) {
-		this.description = description;
-	}
-
-}
diff --git a/plugin-atlas/src/main/java/org/apache/ranger/services/atlas/json/model/ResourceTermResponse.java b/plugin-atlas/src/main/java/org/apache/ranger/services/atlas/json/model/ResourceTermResponse.java
deleted file mode 100644
index 75259ec6f..000000000
--- a/plugin-atlas/src/main/java/org/apache/ranger/services/atlas/json/model/ResourceTermResponse.java
+++ /dev/null
@@ -1,51 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.apache.ranger.services.atlas.json.model;
-
-public class ResourceTermResponse {
-
-	private String href;
-	private String name;
-	private String description;
-
-	public String getHref() {
-		return href;
-	}
-
-	public void setHref(String href) {
-		this.href = href;
-	}
-
-	public String getName() {
-		return name;
-	}
-
-	public void setName(String name) {
-		this.name = name;
-	}
-
-	public String getDescription() {
-		return description;
-	}
-
-	public void setDescription(String description) {
-		this.description = description;
-	}
-
-}
diff --git a/plugin-atlas/src/main/java/org/apache/ranger/services/atlas/json/model/ResourceTypeResponse.java b/plugin-atlas/src/main/java/org/apache/ranger/services/atlas/json/model/ResourceTypeResponse.java
deleted file mode 100644
index 6df978282..000000000
--- a/plugin-atlas/src/main/java/org/apache/ranger/services/atlas/json/model/ResourceTypeResponse.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.apache.ranger.services.atlas.json.model;
-
-import java.util.List;
-
-public class ResourceTypeResponse {
-
-	private List<String> results;
-	private String count;
-	private String requestId;
-
-	public String getCount() {
-		return count;
-	}
-
-	public void setCount(String count) {
-		this.count = count;
-	}
-
-	public String getRequestId() {
-		return requestId;
-	}
-
-	public void setRequestId(String requestId) {
-		this.requestId = requestId;
-	}
-
-	public List<String> getResults() {
-		return results;
-	}
-
-	public void setResults(List<String> results) {
-		this.results = results;
-	}
-
-}
diff --git a/plugin-atlas/src/test/resource/log4j.properties b/plugin-atlas/src/test/resource/log4j.properties
deleted file mode 100644
index f7ab2bad5..000000000
--- a/plugin-atlas/src/test/resource/log4j.properties
+++ /dev/null
@@ -1,34 +0,0 @@
-# Licensed to the Apache Software Foundation (ASF) under one or more
-# contributor license agreements.  See the NOTICE file distributed with
-# this work for additional information regarding copyright ownership.
-# The ASF licenses this file to You under the Apache License, Version 2.0
-# (the "License"); you may not use this file except in compliance with
-# the License.  You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-##-- To prevent junits from cluttering the build run by default all test runs send output to null appender
-log4j.appender.devnull=org.apache.log4j.varia.NullAppender
-ranger.root.logger=FATAL,devnull
-
-##-- uncomment the following line during during development/debugging so see debug messages during test run to be emitted to console
-# ranger.root.logger=DEBUG,console
-log4j.rootLogger=${ranger.root.logger}
-
-# Logging Threshold
-log4j.threshold=ALL
-
-#
-# console
-# Add "console" to rootlogger above if you want to use this
-#
-log4j.appender.console=org.apache.log4j.ConsoleAppender
-log4j.appender.console.target=System.err
-log4j.appender.console.layout=org.apache.log4j.PatternLayout
-log4j.appender.console.layout.ConversionPattern=%d{ISO8601} %-5p [%t] %c{2}: %m%n
diff --git a/plugin-atlas/template/configuration.xml b/plugin-atlas/template/configuration.xml
deleted file mode 100644
index bdb012589..000000000
--- a/plugin-atlas/template/configuration.xml
+++ /dev/null
@@ -1,20 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
-<!--
-Licensed to the Apache Software Foundation (ASF) under one or more
-contributor license agreements. See the NOTICE file distributed with
-this work for additional information regarding copyright ownership.
-The ASF licenses this file to You under the Apache License, Version 2.0
-(the "License"); you may not use this file except in compliance with
-the License. You may obtain a copy of the License at
-
-http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
--->
-<configuration>
-</configuration>
diff --git a/pom.xml b/pom.xml
index 046a72ca3..b77535045 100644
--- a/pom.xml
+++ b/pom.xml
@@ -270,7 +270,6 @@
                 <module>ranger-kms-plugin-shim</module>
                 <module>ranger-presto-plugin-shim</module>
                 <module>ranger-tools</module>
-                <module>plugin-atlas</module>
                 <module>plugin-schema-registry</module>
                 <module>plugin-sqoop</module>
                 <module>ranger-sqoop-plugin-shim</module>
@@ -391,20 +390,6 @@
                 <module>ranger-kms-plugin-shim</module>
             </modules>
         </profile>
-        <profile>
-            <id>ranger-atlas-plugin</id>
-            <modules>
-                <module>agents-audit</module>
-                <module>agents-common</module>
-                <module>agents-cred</module>
-                <module>agents-installer</module>
-                <module>credentialbuilder</module>
-                <module>ranger-plugin-classloader</module>
-                <module>ranger-util</module>
-                <module>plugin-atlas</module>
-                <module>ranger-atlas-plugin-shim</module>
-            </modules>
-        </profile>
         <profile>
             <id>ranger-sqoop-plugin</id>
             <modules>
@@ -493,7 +478,6 @@
                 <module>ranger-atlas-plugin-shim</module>
                 <module>ranger-kms-plugin-shim</module>
                 <module>ranger-tools</module>
-                <module>plugin-atlas</module>
                 <module>plugin-schema-registry</module>
                 <module>plugin-sqoop</module>
                 <module>ranger-sqoop-plugin-shim</module>
@@ -570,7 +554,6 @@
                 <module>ranger-kms-plugin-shim</module>
                 <module>ranger-presto-plugin-shim</module>
                 <module>ranger-tools</module>
-                <module>plugin-atlas</module>
                 <module>plugin-schema-registry</module>
                 <module>plugin-sqoop</module>
                 <module>ranger-sqoop-plugin-shim</module>
