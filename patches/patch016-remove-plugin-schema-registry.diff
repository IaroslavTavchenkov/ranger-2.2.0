diff --git a/plugin-schema-registry/.gitignore b/plugin-schema-registry/.gitignore
deleted file mode 100644
index 02f68bb35..000000000
--- a/plugin-schema-registry/.gitignore
+++ /dev/null
@@ -1,3 +0,0 @@
-/target/
-/bin/
-.settings/
diff --git a/plugin-schema-registry/src/main/java/org/apache/ranger/services/schema/registry/RangerServiceSchemaRegistry.java b/plugin-schema-registry/src/main/java/org/apache/ranger/services/schema/registry/RangerServiceSchemaRegistry.java
deleted file mode 100644
index 8306b5193..000000000
--- a/plugin-schema-registry/src/main/java/org/apache/ranger/services/schema/registry/RangerServiceSchemaRegistry.java
+++ /dev/null
@@ -1,88 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.ranger.services.schema.registry;
-
-import org.apache.ranger.services.schema.registry.client.AutocompletionAgent;
-import org.apache.ranger.services.schema.registry.client.SchemaRegistryResourceMgr;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.apache.ranger.plugin.model.RangerService;
-import org.apache.ranger.plugin.model.RangerServiceDef;
-import org.apache.ranger.plugin.service.RangerBaseService;
-import org.apache.ranger.plugin.service.ResourceLookupContext;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-
-public class RangerServiceSchemaRegistry extends RangerBaseService {
-
-    private static final Log LOG = LogFactory.getLog(RangerServiceSchemaRegistry.class);
-
-
-    @Override
-    public void init(RangerServiceDef serviceDef, RangerService service) {
-        super.init(serviceDef, service);
-    }
-
-    @Override
-    public HashMap<String, Object> validateConfig() {
-        HashMap<String, Object> ret = new HashMap<String, Object>();
-
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("==> RangerServiceSchemaRegistry.validateConfig(" + serviceName + ")");
-        }
-
-        if (configs != null) {
-            try {
-                AutocompletionAgent autocompletionAgent = new AutocompletionAgent(serviceName, configs);
-                ret = autocompletionAgent.connectionTest();
-            } catch (Exception e) {
-                LOG.error("<== RangerServiceSchemaRegistry.validateConfig Error:" + e);
-                throw e;
-            }
-        }
-
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("<== RangerServiceSchemaRegistry.validateConfig(" + serviceName + "): ret=" + ret);
-        }
-
-        return ret;
-    }
-
-    @Override
-    public List<String> lookupResource(ResourceLookupContext context) throws Exception {
-        List<String> ret = new ArrayList<String>();
-
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("==> RangerServiceSchemaRegistry.lookupResource(" + serviceName + ")");
-        }
-
-        if (configs != null) {
-            AutocompletionAgent autocompletionAgent = new AutocompletionAgent(serviceName, configs);
-            ret = SchemaRegistryResourceMgr.getSchemaRegistryResources(serviceName, configs, context, autocompletionAgent);
-        }
-
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("<== RangerServiceSchemaRegistry.lookupResource(" + serviceName + "): ret=" + ret);
-        }
-
-        return ret;
-    }
-
-}
diff --git a/plugin-schema-registry/src/main/java/org/apache/ranger/services/schema/registry/client/AutocompletionAgent.java b/plugin-schema-registry/src/main/java/org/apache/ranger/services/schema/registry/client/AutocompletionAgent.java
deleted file mode 100644
index 3bb107e1d..000000000
--- a/plugin-schema-registry/src/main/java/org/apache/ranger/services/schema/registry/client/AutocompletionAgent.java
+++ /dev/null
@@ -1,144 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.ranger.services.schema.registry.client;
-
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.apache.ranger.plugin.client.BaseClient;
-import org.apache.ranger.services.schema.registry.client.connection.DefaultSchemaRegistryClient;
-import org.apache.ranger.services.schema.registry.client.connection.ISchemaRegistryClient;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.stream.Collectors;
-
-/**
- * The class that is used to get needed information for auto completion feature.
- */
-public class AutocompletionAgent {
-    private static final Log LOG = LogFactory.getLog(AutocompletionAgent.class);
-
-    private ISchemaRegistryClient client;
-    private String serviceName;
-
-    private static final String errMessage = "You can still save the repository and start creating "
-            + "policies, but you would not be able to use autocomplete for "
-            + "resource names. Check server logs for more info.";
-
-    private static final String successMsg = "ConnectionTest Successful";
-
-
-    public AutocompletionAgent(String serviceName, Map<String, String> configs) {
-        this(serviceName, new DefaultSchemaRegistryClient(configs));
-    }
-
-    public AutocompletionAgent(String serviceName, ISchemaRegistryClient client) {
-        this.serviceName = serviceName;
-        this.client = client;
-    }
-
-    public HashMap<String, Object> connectionTest() {
-        HashMap<String, Object> responseData = new HashMap<String, Object>();
-
-        try {
-            client.checkConnection();
-            // If it doesn't throw exception, then assume the instance is
-            // reachable
-            BaseClient.generateResponseDataMap(true, successMsg,
-                    successMsg, null, null, responseData);
-            if(LOG.isDebugEnabled()) {
-                LOG.debug("ConnectionTest Successful.");
-            }
-        } catch (Exception e) {
-            LOG.error("Error connecting to SchemaRegistry. schemaRegistryClient=" + this, e);
-            BaseClient.generateResponseDataMap(false, errMessage,
-                    errMessage, null, null, responseData);
-        }
-
-        return responseData;
-    }
-
-    public List<String> getSchemaGroupList(String lookupGroupName, List<String> groupList) {
-        List<String> res = groupList;
-        Collection<String> schemaGroups = client.getSchemaGroups();
-        schemaGroups.forEach(gName -> {
-            if (!res.contains(gName) && gName.contains(lookupGroupName)) {
-                res.add(gName);
-            }
-        });
-
-        return res;
-    }
-
-    public List<String> getSchemaMetadataList(String lookupSchemaMetadataName,
-                                              List<String> schemaGroupList,
-                                              List<String> schemaMetadataList) {
-        List<String> res = schemaMetadataList;
-
-        Collection<String> schemas = client.getSchemaNames(schemaGroupList);
-        schemas.forEach(sName -> {
-            if (!res.contains(sName) && sName.contains(lookupSchemaMetadataName)) {
-                res.add(sName);
-            }
-        });
-
-        return res;
-    }
-
-    public List<String> getBranchList(String lookupBranchName,
-                                      List<String> groupList,
-                                      List<String> schemaList,
-                                      List<String> branchList) {
-        List<String> res = branchList;
-        List<String> expandedSchemaList = schemaList.stream().flatMap(
-                schemaName -> expandSchemaMetadataNameRegex(groupList, schemaName).stream())
-                .collect(Collectors.toList());
-        expandedSchemaList.forEach(schemaMetadataName -> {
-            Collection<String> branches = client.getSchemaBranches(schemaMetadataName);
-            branches.forEach(bName -> {
-                if (!res.contains(bName) && bName.contains(lookupBranchName)) {
-                    res.add(bName);
-                }
-            });
-        });
-
-        return res;
-    }
-
-    List<String> expandSchemaMetadataNameRegex(List<String> schemaGroupList, String lookupSchemaMetadataName) {
-        List<String> res = new ArrayList<>();
-
-        Collection<String> schemas = client.getSchemaNames(schemaGroupList);
-        schemas.forEach(sName -> {
-            if (sName.matches(lookupSchemaMetadataName)) {
-                res.add(sName);
-            }
-        });
-
-        return res;
-    }
-
-    @Override
-    public String toString() {
-        return "AutocompletionAgent [serviceName=" + serviceName + "]";
-    }
-
-}
diff --git a/plugin-schema-registry/src/main/java/org/apache/ranger/services/schema/registry/client/SchemaRegistryResourceMgr.java b/plugin-schema-registry/src/main/java/org/apache/ranger/services/schema/registry/client/SchemaRegistryResourceMgr.java
deleted file mode 100644
index 3cc1199e9..000000000
--- a/plugin-schema-registry/src/main/java/org/apache/ranger/services/schema/registry/client/SchemaRegistryResourceMgr.java
+++ /dev/null
@@ -1,134 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.ranger.services.schema.registry.client;
-
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.apache.ranger.plugin.service.ResourceLookupContext;
-import org.apache.ranger.plugin.util.TimedEventUtil;
-
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-import java.util.concurrent.Callable;
-import java.util.concurrent.TimeUnit;
-
-public class SchemaRegistryResourceMgr {
-
-    private static final Log LOG = LogFactory.getLog(SchemaRegistryResourceMgr.class);
-
-    private static final String REGISTRY_SERVICE = "registry-service";
-    private static final String SERDE = "serde";
-    private static final String SCHEMA_GROUP = "schema-group";
-    private static final String SCHEMA_METADATA = "schema-metadata";
-    private static final String SCHEMA_BRANCH = "schema-branch";
-    private static final String SCHEMA_VERSION = "schema-version";
-
-    private static final List<String> asteriskList = Collections.singletonList("*");
-
-    private static final int LOOKUP_TIMEOUT_SEC = 5;
-
-
-    public static List<String> getSchemaRegistryResources(String serviceName,
-                                                          Map<String, String> configs,
-                                                          ResourceLookupContext context,
-                                                          AutocompletionAgent registryClient) throws Exception {
-
-        String userInput = context.getUserInput();
-        String resource = context.getResourceName();
-        Map<String, List<String>> resourceMap = context.getResources();
-        List<String> resultList = null;
-
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("==> SchemaRegistryResourceMgr.getSchemaRegistryResources()  UserInput: \"" + userInput + "\" resource : " + resource + " resourceMap: " + resourceMap);
-        }
-
-        if (userInput != null
-                && !userInput.isEmpty()
-                && serviceName != null
-                && resource != null
-                && resourceMap != null
-                && !resourceMap.isEmpty()) {
-            if (registryClient != null) {
-                Callable<List<String>> callableObj = null;
-                try {
-                    switch (resource.trim().toLowerCase()) {
-                        case SCHEMA_GROUP: {
-                            List<String> schemaGroupList = resourceMap.get(SCHEMA_GROUP);
-                            // get the SchemaGroupList for given Input
-                            final String finalSchemaGroupName = userInput;
-                            callableObj = ()
-                                    -> registryClient.getSchemaGroupList(finalSchemaGroupName, schemaGroupList);
-                            break;
-                        }
-                        case SCHEMA_METADATA: {
-                            List<String> schemaGroupList = resourceMap.get(SCHEMA_GROUP);
-                            List<String> schemaMeatadataList = resourceMap.get(SCHEMA_METADATA);
-                            // get the SchemaMetadataList for the given Input
-                            final String finalSchemaName = userInput;
-                            callableObj = ()
-                                    -> registryClient.getSchemaMetadataList(finalSchemaName,
-                                    schemaGroupList,
-                                    schemaMeatadataList);
-                            break;
-                        }
-                        case SCHEMA_BRANCH: {
-                            List<String> schemaGroupList = resourceMap.get(SCHEMA_GROUP);
-                            List<String> schemaMeatadataList = resourceMap.get(SCHEMA_METADATA);
-                            List<String> branchList = resourceMap.get(SCHEMA_BRANCH);
-                            // get the SchemaBranchList for given Input
-                            final String finalBranchName = userInput;
-                            callableObj = ()
-                                    -> registryClient.getBranchList(finalBranchName,
-                                    schemaGroupList,
-                                    schemaMeatadataList,
-                                    branchList);
-                            break;
-                        }
-                        case SCHEMA_VERSION: case SERDE: case REGISTRY_SERVICE: {
-                            return asteriskList;
-                        }
-                        default:
-                            break;
-                    }
-                } catch (Exception e) {
-                    LOG.error("Unable to get Schema Registry resources.", e);
-                    throw e;
-                }
-                if (callableObj != null) {
-                    synchronized (registryClient) {
-                        resultList = TimedEventUtil.timedTask(callableObj, LOOKUP_TIMEOUT_SEC,
-                                TimeUnit.SECONDS);
-                    }
-                } else {
-                    LOG.error("Could not initiate at timedTask");
-                }
-            }
-        }
-
-        if(LOG.isDebugEnabled()) {
-            LOG.debug("<== SchemaRegistryResourceMgr.getSchemaRegistryResources() UserInput: "
-                    + userInput
-                    + " configs: " + configs
-                    + "Result :" + resultList );
-
-        }
-
-        return resultList;
-    }
-}
diff --git a/plugin-schema-registry/src/main/java/org/apache/ranger/services/schema/registry/client/connection/DefaultSchemaRegistryClient.java b/plugin-schema-registry/src/main/java/org/apache/ranger/services/schema/registry/client/connection/DefaultSchemaRegistryClient.java
deleted file mode 100644
index 3a46436bf..000000000
--- a/plugin-schema-registry/src/main/java/org/apache/ranger/services/schema/registry/client/connection/DefaultSchemaRegistryClient.java
+++ /dev/null
@@ -1,294 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.ranger.services.schema.registry.client.connection;
-
-import com.hortonworks.registries.auth.Login;
-import com.hortonworks.registries.schemaregistry.client.LoadBalancedFailoverUrlSelector;
-import com.hortonworks.registries.schemaregistry.client.UrlSelector;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.apache.ranger.services.schema.registry.client.connection.util.SecurityUtils;
-import org.codehaus.jettison.json.JSONArray;
-import org.codehaus.jettison.json.JSONObject;
-import org.glassfish.jersey.client.ClientConfig;
-import org.glassfish.jersey.client.ClientProperties;
-import org.glassfish.jersey.client.JerseyClientBuilder;
-
-import javax.net.ssl.SSLContext;
-import javax.ws.rs.client.ClientBuilder;
-import javax.ws.rs.client.WebTarget;
-import javax.ws.rs.core.MediaType;
-import javax.ws.rs.core.Response;;
-import java.io.UnsupportedEncodingException;
-import java.lang.reflect.InvocationTargetException;
-import java.net.URLEncoder;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
-
-import com.hortonworks.registries.schemaregistry.client.SchemaRegistryClient.Configuration;
-
-import static com.hortonworks.registries.schemaregistry.client.SchemaRegistryClient.Configuration.DEFAULT_CONNECTION_TIMEOUT;
-import static com.hortonworks.registries.schemaregistry.client.SchemaRegistryClient.Configuration.DEFAULT_READ_TIMEOUT;
-
-
-public class DefaultSchemaRegistryClient implements ISchemaRegistryClient {
-
-    private static final Log LOG = LogFactory.getLog(DefaultSchemaRegistryClient.class);
-
-    private static final String SCHEMA_REGISTRY_PATH = "/api/v1/schemaregistry";
-    private static final String SCHEMAS_PATH = SCHEMA_REGISTRY_PATH + "/schemas/";
-    private static final String SCHEMA_REGISTRY_VERSION_PATH = SCHEMA_REGISTRY_PATH + "/version";
-    private static final String SSL_ALGORITHM = "TLS";
-    private final javax.ws.rs.client.Client client;
-    private final Login login;
-    private final UrlSelector urlSelector;
-    private final Map<String, SchemaRegistryTargets> urlWithTargets;
-    private final Configuration configuration;
-
-    public DefaultSchemaRegistryClient(Map<String, ?> conf) {
-        configuration = new Configuration(conf);
-        login = SecurityUtils.initializeSecurityContext(conf);
-        ClientConfig config = createClientConfig(conf);
-        final boolean SSLEnabled = SecurityUtils.isHttpsConnection(conf);
-        ClientBuilder clientBuilder = JerseyClientBuilder.newBuilder()
-                .withConfig(config)
-                .property(ClientProperties.FOLLOW_REDIRECTS, Boolean.TRUE);
-        if (SSLEnabled) {
-            SSLContext ctx;
-            try {
-                ctx = SecurityUtils.createSSLContext(conf, SSL_ALGORITHM);
-            } catch (Exception e) {
-                throw new RuntimeException(e);
-            }
-            clientBuilder.sslContext(ctx);
-        }
-        client = clientBuilder.build();
-
-        // get list of urls and create given or default UrlSelector.
-        urlSelector = createUrlSelector();
-        urlWithTargets = new ConcurrentHashMap<>();
-    }
-
-    private ClientConfig createClientConfig(Map<String, ?> conf) {
-        ClientConfig config = new ClientConfig();
-        config.property(ClientProperties.CONNECT_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT);
-        config.property(ClientProperties.READ_TIMEOUT, DEFAULT_READ_TIMEOUT);
-        config.property(ClientProperties.FOLLOW_REDIRECTS, true);
-        for (Map.Entry<String, ?> entry : conf.entrySet()) {
-            config.property(entry.getKey(), entry.getValue());
-        }
-        return config;
-    }
-
-    private UrlSelector createUrlSelector() {
-        UrlSelector urlSelector = null;
-        String rootCatalogURL = configuration.getValue(Configuration.SCHEMA_REGISTRY_URL.name());
-        String urlSelectorClass = configuration.getValue(Configuration.URL_SELECTOR_CLASS.name());
-        if (urlSelectorClass == null) {
-            urlSelector = new LoadBalancedFailoverUrlSelector(rootCatalogURL);
-        } else {
-            try {
-                urlSelector = (UrlSelector) Class.forName(urlSelectorClass)
-                        .getConstructor(String.class)
-                        .newInstance(rootCatalogURL);
-            } catch (InstantiationException | IllegalAccessException | ClassNotFoundException | NoSuchMethodException
-                    | InvocationTargetException e) {
-                throw new RuntimeException(e);
-            }
-        }
-        urlSelector.init(configuration.getConfig());
-
-        return urlSelector;
-    }
-
-    private static class SchemaRegistryTargets {
-        private final WebTarget schemaRegistryVersion;
-        private final WebTarget schemasTarget;
-
-        SchemaRegistryTargets(WebTarget rootResource) {
-            schemaRegistryVersion = rootResource.path(SCHEMA_REGISTRY_VERSION_PATH);
-            schemasTarget = rootResource.path(SCHEMAS_PATH);
-        }
-    }
-
-    private SchemaRegistryTargets currentSchemaRegistryTargets() {
-        String url = urlSelector.select();
-        urlWithTargets.computeIfAbsent(url, s -> new SchemaRegistryTargets(client.target(s)));
-        return urlWithTargets.get(url);
-    }
-
-    private static String encode(String schemaName) {
-        try {
-            return URLEncoder.encode(schemaName, "UTF-8");
-        } catch (UnsupportedEncodingException e) {
-            throw new RuntimeException(e);
-        }
-    }
-
-    @Override
-    public List<String> getSchemaGroups() {
-        if(LOG.isDebugEnabled()) {
-            LOG.debug("==> DefaultSchemaRegistryClient.getSchemaGroups()");
-        }
-
-        ArrayList<String> res = new ArrayList<>();
-        WebTarget webResource = currentSchemaRegistryTargets().schemasTarget;
-        try {
-            Response response = login.doAction(() ->
-                    webResource.request(MediaType.APPLICATION_JSON_TYPE).get(Response.class));
-
-            if(LOG.isDebugEnabled()) {
-                LOG.debug("DefaultSchemaRegistryClient.getSchemaGroups(): response statusCode = " + response.getStatus());
-            }
-
-            JSONArray mDataList = new JSONObject(response.readEntity(String.class)).getJSONArray("entities");
-            int len = mDataList.length();
-            for(int i = 0; i < len; i++) {
-                JSONObject entity = mDataList.getJSONObject(i);
-                JSONObject schemaMetadata = (JSONObject)entity.get("schemaMetadata");
-                String group = (String) schemaMetadata.get("schemaGroup");
-                res.add(group);
-            }
-        } catch (Exception e) {
-            throw new RuntimeException(e);
-        }
-
-        if(LOG.isDebugEnabled()) {
-            LOG.debug("<== DefaultSchemaRegistryClient.getSchemaGroups(): "
-                    + res.size()
-                    + " schemaGroups found");
-        }
-
-        return res;
-    }
-
-    @Override
-    public List<String> getSchemaNames(List<String> schemaGroups) {
-        if(LOG.isDebugEnabled()) {
-            LOG.debug("==> DefaultSchemaRegistryClient.getSchemaNames( " + schemaGroups + " )");
-        }
-
-        ArrayList<String> res = new ArrayList<>();
-        WebTarget webTarget = currentSchemaRegistryTargets().schemasTarget;
-        try {
-            Response response = login.doAction(() ->
-                    webTarget.request(MediaType.APPLICATION_JSON_TYPE).get(Response.class));
-
-            if(LOG.isDebugEnabled()) {
-                LOG.debug("DefaultSchemaRegistryClient.getSchemaNames(): response statusCode = " + response.getStatus());
-            }
-
-            JSONArray mDataList = new JSONObject(response.readEntity(String.class)).getJSONArray("entities");
-            int len = mDataList.length();
-            for(int i = 0; i < len; i++) {
-                JSONObject entity = mDataList.getJSONObject(i);
-                JSONObject schemaMetadata = (JSONObject)entity.get("schemaMetadata");
-                String group = (String) schemaMetadata.get("schemaGroup");
-                for(String schemaGroup:  schemaGroups) {
-                    if(group.matches(schemaGroup)) {
-                        String name = (String) schemaMetadata.get("name");
-                        res.add(name);
-                    }
-                }
-            }
-        } catch (Exception e) {
-            throw new RuntimeException(e);
-        }
-
-        if(LOG.isDebugEnabled()) {
-            LOG.debug("<== DefaultSchemaRegistryClient.getSchemaNames( " + schemaGroups + " ): "
-                    + res.size()
-                    + " schemaNames found");
-        }
-
-        return res;
-    }
-
-    @Override
-    public List<String> getSchemaBranches(String schemaMetadataName) {
-        if(LOG.isDebugEnabled()) {
-            LOG.debug("==> DefaultSchemaRegistryClient.getSchemaBranches( " + schemaMetadataName + " )");
-        }
-
-        ArrayList<String> res = new ArrayList<>();
-        WebTarget target = currentSchemaRegistryTargets().schemasTarget.path(encode(schemaMetadataName) + "/branches");
-        try {
-            Response response = login.doAction(() ->
-                    target.request(MediaType.APPLICATION_JSON_TYPE).get(Response.class));
-
-            if(LOG.isDebugEnabled()) {
-                LOG.debug("DefaultSchemaRegistryClient.getSchemaBranches(): response statusCode = " + response.getStatus());
-            }
-
-            JSONArray mDataList = new JSONObject(response.readEntity(String.class)).getJSONArray("entities");
-            int len = mDataList.length();
-            for(int i = 0; i < len; i++) {
-                JSONObject entity = mDataList.getJSONObject(i);
-                JSONObject branchInfo = entity;
-                String smName = (String) branchInfo.get("schemaMetadataName");
-                if (smName.matches(schemaMetadataName)) {
-                    String bName = (String) branchInfo.get("name");
-                    res.add(bName);
-                }
-
-            }
-        } catch (Exception e) {
-            throw new RuntimeException(e);
-        }
-
-        if(LOG.isDebugEnabled()) {
-            LOG.debug("<== DefaultSchemaRegistryClient.getSchemaBranches( " + schemaMetadataName + " ): "
-                    + res.size()
-                    + " branches found.");
-        }
-
-        return res;
-    }
-
-    @Override
-    public void checkConnection() throws Exception {
-        if(LOG.isDebugEnabled()) {
-            LOG.debug("==> DefaultSchemaRegistryClient.checkConnection(): trying to connect to the SR server... ");
-        }
-
-        WebTarget webTarget = currentSchemaRegistryTargets().schemaRegistryVersion;
-        Response responce = login.doAction(() ->
-                webTarget.request(MediaType.APPLICATION_JSON_TYPE).get(Response.class));
-        if(LOG.isDebugEnabled()) {
-            LOG.debug("DefaultSchemaRegistryClient.checkConnection(): response statusCode = " + responce.getStatus());
-        }
-        if(responce.getStatus() != Response.Status.OK.getStatusCode()) {
-            LOG.error("DefaultSchemaRegistryClient.checkConnection(): Connection failed. Response StatusCode = "
-                    + responce.getStatus());
-            throw new Exception("Connection failed. StatusCode = " + responce.getStatus());
-        }
-
-        String respStr = responce.readEntity(String.class);
-        if (!(respStr.contains("version") && respStr.contains("revision"))) {
-            LOG.error("DefaultSchemaRegistryClient.checkConnection(): Connection failed. Bad response body.");
-            throw new Exception("Connection failed. Bad response body.");
-        }
-
-        if(LOG.isDebugEnabled()) {
-            LOG.debug("<== DefaultSchemaRegistryClient.checkConnection(): connection test successfull ");
-        }
-    }
-
-}
diff --git a/plugin-schema-registry/src/main/java/org/apache/ranger/services/schema/registry/client/connection/ISchemaRegistryClient.java b/plugin-schema-registry/src/main/java/org/apache/ranger/services/schema/registry/client/connection/ISchemaRegistryClient.java
deleted file mode 100644
index 98009ce73..000000000
--- a/plugin-schema-registry/src/main/java/org/apache/ranger/services/schema/registry/client/connection/ISchemaRegistryClient.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.ranger.services.schema.registry.client.connection;
-
-import java.util.List;
-
-public interface ISchemaRegistryClient {
-    List<String> getSchemaGroups();
-    List<String> getSchemaNames(List<String> schemaGroup);
-    List<String> getSchemaBranches(String schemaMetadataName);
-    void checkConnection() throws Exception;
-}
-
diff --git a/plugin-schema-registry/src/main/java/org/apache/ranger/services/schema/registry/client/connection/util/SecurityUtils.java b/plugin-schema-registry/src/main/java/org/apache/ranger/services/schema/registry/client/connection/util/SecurityUtils.java
deleted file mode 100644
index 13eaf8ee1..000000000
--- a/plugin-schema-registry/src/main/java/org/apache/ranger/services/schema/registry/client/connection/util/SecurityUtils.java
+++ /dev/null
@@ -1,228 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.ranger.services.schema.registry.client.connection.util;
-
-import com.hortonworks.registries.auth.KerberosLogin;
-import com.hortonworks.registries.auth.Login;
-import com.hortonworks.registries.auth.NOOPLogin;
-import com.hortonworks.registries.auth.util.JaasConfiguration;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-
-import javax.net.ssl.KeyManager;
-import javax.net.ssl.KeyManagerFactory;
-import javax.net.ssl.SSLContext;
-import javax.net.ssl.TrustManager;
-import javax.net.ssl.TrustManagerFactory;
-import javax.net.ssl.X509TrustManager;
-import javax.security.auth.login.LoginException;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
-import java.io.InputStream;
-import java.security.KeyStore;
-import java.security.SecureRandom;
-import java.security.cert.CertificateException;
-import java.security.cert.X509Certificate;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Optional;
-
-import static com.hortonworks.registries.schemaregistry.client.SchemaRegistryClient.Configuration.SCHEMA_REGISTRY_URL;
-import static org.apache.ranger.plugin.client.HadoopConfigHolder.HADOOP_SECURITY_AUTHENTICATION_METHOD;
-import static org.apache.ranger.plugin.client.HadoopConfigHolder.RANGER_AUTH_TYPE;
-import static org.apache.ranger.plugin.client.HadoopConfigHolder.RANGER_LOOKUP_KEYTAB;
-import static org.apache.ranger.plugin.client.HadoopConfigHolder.RANGER_LOOKUP_PRINCIPAL;
-
-public class SecurityUtils {
-
-    private static final Log LOG = LogFactory.getLog(SecurityUtils.class);
-    private static final long KERBEROS_SYNCHRONIZATION_TIMEOUT_MS = 180000;
-    private static final String REGISTY_CLIENT_JAAS_SECTION = "RegistryClient";
-
-    public static boolean isHttpsConnection(Map<String, ?> conf) {
-        String urls = conf.get(SCHEMA_REGISTRY_URL.name()).toString();
-        return urls.trim().startsWith("https://");
-    }
-
-    public static SSLContext createSSLContext(Map<String, ?> sslConfigurations, String sslAlgorithm) throws Exception {
-        SSLContext context = SSLContext.getInstance(sslAlgorithm);
-        KeyManager[] km = null;
-        String keyStorePath = (String)sslConfigurations.get("keyStorePath");
-        if (keyStorePath == null || keyStorePath.isEmpty()) {
-            keyStorePath = System.getProperty("javax.net.ssl.keyStore");
-        }
-        String keyStorePassword = (String)sslConfigurations.get("keyStorePassword");
-        if (keyStorePassword == null || keyStorePath.isEmpty()) {
-            keyStorePassword = Optional.ofNullable(System.getProperty("javax.net.ssl.keyStorePassword")).orElse("");
-        }
-        String keyStoreType = (String)sslConfigurations.get("keyStoreType");
-        if (keyStoreType == null || keyStoreType.isEmpty()) {
-            keyStoreType = System.getProperty("javax.net.ssl.keyStoreType");
-        }
-
-        String trustStorePath = (String)sslConfigurations.get("trustStorePath");
-        if (trustStorePath == null || trustStorePath.isEmpty()) {
-            trustStorePath = System.getProperty("javax.net.ssl.trustStore");
-        }
-        String trustStorePassword = (String)sslConfigurations.get("trustStorePassword");
-        if (trustStorePassword == null || trustStorePassword.isEmpty()) {
-            trustStorePassword = Optional.ofNullable(System.getProperty("javax.net.ssl.trustStorePassword")).orElse("");
-        }
-        String trustStoreType = (String)sslConfigurations.get("trustStoreType");
-        if (trustStoreType == null || trustStoreType.isEmpty()) {
-            trustStoreType = System.getProperty("javax.net.ssl.trustStoreType");
-        }
-
-        Object obj = sslConfigurations.get("serverCertValidation");
-        boolean serverCertValidation = (obj == null) || Boolean.parseBoolean(obj.toString());
-
-        if (keyStorePath != null) {
-            KeyStore ks = KeyStore.getInstance(keyStoreType != null ?
-                    keyStoreType : KeyStore.getDefaultType());
-
-            InputStream in = getFileInputStream(keyStorePath);
-
-            try {
-                ks.load(in, keyStorePassword.toCharArray());
-            } finally {
-                if (in != null) {
-                    in.close();
-                }
-            }
-
-            KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
-            kmf.init(ks, keyStorePassword.toCharArray());
-            km = kmf.getKeyManagers();
-        }
-        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
-        TrustManager[] tm = null;
-        if (serverCertValidation) {
-            if (trustStorePath != null) {
-                KeyStore trustStore = KeyStore.getInstance(trustStoreType != null ?
-                        trustStoreType : KeyStore.getDefaultType());
-                InputStream in = getFileInputStream(trustStorePath);
-                try {
-                    trustStore.load(in, trustStorePassword.toCharArray());
-
-                    trustManagerFactory.init(trustStore);
-
-                    tm = trustManagerFactory.getTrustManagers();
-
-                } finally {
-                    if (in != null) {
-                        in.close();
-                    }
-                }
-            }
-        } else {
-            TrustManager ignoreValidationTM = new X509TrustManager() {
-                public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
-                    // Ignore Server Certificate Validation
-                }
-
-                public X509Certificate[] getAcceptedIssuers() {
-                    return new X509Certificate[0];
-                }
-
-                public void checkServerTrusted(X509Certificate[] chain,
-                                               String authType)
-                        throws CertificateException {
-                    // Ignore Server Certificate Validation
-                }
-            };
-
-            tm  = new TrustManager[] {ignoreValidationTM};
-        }
-        SecureRandom random = new SecureRandom();
-        context.init(km, tm, random);
-
-        return context;
-    }
-
-    static private InputStream getFileInputStream(String path) throws FileNotFoundException {
-        InputStream ret;
-        File f = new File(path);
-        if (f.exists()) {
-            ret = new FileInputStream(f);
-        } else {
-            ret = SecurityUtils.class.getResourceAsStream(path);
-
-            if (ret == null) {
-                if (! path.startsWith("/")) {
-                    ret = SecurityUtils.class.getResourceAsStream("/" + path);
-                }
-            }
-
-            if (ret == null) {
-                ret = ClassLoader.getSystemClassLoader().getResourceAsStream(path);
-                if (ret == null) {
-                    if (! path.startsWith("/")) {
-                        ret = ClassLoader.getSystemResourceAsStream("/" + path);
-                    }
-                }
-            }
-        }
-        return ret;
-    }
-
-    static String getJaasConfigForClientPrincipal(Map<String, ?> conf) {
-        String keytabFile = (String)conf.get(RANGER_LOOKUP_KEYTAB);
-        String principal = (String)conf.get(RANGER_LOOKUP_PRINCIPAL);
-
-        if(keytabFile == null || keytabFile.isEmpty()
-                || principal == null || principal.isEmpty()) {
-            return null;
-        }
-
-        return "com.sun.security.auth.module.Krb5LoginModule required useTicketCache=false principal=\""
-                + principal
-                + "\" useKeyTab=true keyTab=\""
-                + keytabFile
-                + "\";";
-    }
-
-    public static Login initializeSecurityContext(Map<String, ?> conf) {
-        String saslJaasConfig = getJaasConfigForClientPrincipal(conf);
-        boolean kerberosOn = isKerberosEnabled(conf);
-        if (kerberosOn && saslJaasConfig != null) {
-            KerberosLogin kerberosLogin = new KerberosLogin(KERBEROS_SYNCHRONIZATION_TIMEOUT_MS);
-            try {
-                kerberosLogin.configure(new HashMap<>(), REGISTY_CLIENT_JAAS_SECTION, new JaasConfiguration(REGISTY_CLIENT_JAAS_SECTION, saslJaasConfig));
-                kerberosLogin.login();
-                return kerberosLogin;
-            } catch (LoginException e) {
-                LOG.error("Failed to initialize the dynamic JAAS config: " + saslJaasConfig + ". Attempting static JAAS config.");
-            } catch (Exception e) {
-                LOG.error("Failed to parse the dynamic JAAS config. Attempting static JAAS config.", e);
-            }
-        }
-
-        return new NOOPLogin();
-    }
-
-    static boolean isKerberosEnabled(Map<String, ?> conf) {
-        String rangerAuthType = (String) conf.get(RANGER_AUTH_TYPE);
-        String pluginAuthType = (String) conf.get("schema-registry.authentication");
-
-        return rangerAuthType != null
-                && pluginAuthType != null
-                && rangerAuthType.equals(HADOOP_SECURITY_AUTHENTICATION_METHOD)
-                && pluginAuthType.equalsIgnoreCase(HADOOP_SECURITY_AUTHENTICATION_METHOD);
-    }
-}
diff --git a/plugin-schema-registry/src/test/java/org/apache/ranger/services/schema/registry/client/AutocompletionAgentTest.java b/plugin-schema-registry/src/test/java/org/apache/ranger/services/schema/registry/client/AutocompletionAgentTest.java
deleted file mode 100644
index beafae359..000000000
--- a/plugin-schema-registry/src/test/java/org/apache/ranger/services/schema/registry/client/AutocompletionAgentTest.java
+++ /dev/null
@@ -1,194 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.ranger.services.schema.registry.client;
-
-import org.apache.ranger.services.schema.registry.client.connection.ISchemaRegistryClient;
-import org.apache.ranger.services.schema.registry.client.util.DefaultSchemaRegistryClientForTesting;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-
-import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertThat;
-
-
-public class AutocompletionAgentTest {
-
-
-    @Test
-    public void connectionTest() {
-        ISchemaRegistryClient client = new DefaultSchemaRegistryClientForTesting();
-
-        AutocompletionAgent autocompletionAgent =
-                new AutocompletionAgent("schema-registry", client);
-
-        HashMap<String, Object> res = autocompletionAgent.connectionTest();
-        assertEquals(res.get("connectivityStatus"), true);
-        assertEquals(res.get("message"), "ConnectionTest Successful");
-        assertEquals(res.get("description"), "ConnectionTest Successful");
-        assertNull(res.get("objectId"));
-        assertNull(res.get("fieldName"));
-
-
-        client = new DefaultSchemaRegistryClientForTesting() {
-            public void checkConnection() throws Exception {
-                throw new Exception("Cannot connect to the SR server");
-            }
-        };
-        autocompletionAgent =
-                new AutocompletionAgent("schema-registry", client);
-
-        res = autocompletionAgent.connectionTest();
-        String errMessage = "You can still save the repository and start creating "
-                + "policies, but you would not be able to use autocomplete for "
-                + "resource names. Check server logs for more info.";
-        assertEquals(res.get("connectivityStatus"), false);
-        assertThat(res.get("message"), is(errMessage));
-        assertThat(res.get("description"), is(errMessage));
-        assertNull(res.get("objectId"));
-        assertNull(res.get("fieldName"));
-
-    }
-
-    @Test
-    public void getSchemaGroupList() {
-        ISchemaRegistryClient client = new DefaultSchemaRegistryClientForTesting(){
-            public List<String> getSchemaGroups() {
-                List<String> groups = new ArrayList<>();
-                groups.add("testGroup");
-                return groups;
-            }
-        };
-
-        AutocompletionAgent autocompletionAgent =
-                new AutocompletionAgent("schema-registry", client);
-
-        // Empty initialGroups and the list of groups returned by ISchemaRegistryClient
-        // doesn't contain any groups that starts with 'tesSome'
-        List<String> initialGroups = new ArrayList<>();
-        List<String> res = autocompletionAgent.getSchemaGroupList("tesSome", initialGroups);
-        assertEquals(0, res.size());
-
-        // Empty initialGroups and the list of groups returned by ISchemaRegistryClient
-        // contains a group that starts with 'tes'
-        initialGroups = new ArrayList<>();
-        res = autocompletionAgent.getSchemaGroupList("tes", initialGroups);
-        List<String>  expected = new ArrayList<>();
-        expected.add("testGroup");
-        assertEquals(1, res.size());
-        assertThat(res, is(expected));
-
-        // initialGroups contains one element, list of the groups returned by ISchemaRegistryClient
-        // contains the same values that are already present in initialGroups
-        initialGroups = new ArrayList<>();
-        initialGroups.add("testGroup");
-        res = autocompletionAgent.getSchemaGroupList("tes", initialGroups);
-        expected = new ArrayList<>();
-        expected.add("testGroup");
-        assertEquals(1, res.size());
-        assertThat(res, is(expected));
-
-        // initialGroups contains one element, list of the groups returned by ISchemaRegistryClient
-        // contains one element too, that is not equal to the element in initialGroups
-        initialGroups = new ArrayList<>();
-        initialGroups.add("testGroup2");
-        res = autocompletionAgent.getSchemaGroupList("tes", initialGroups);
-        expected = new ArrayList<>();
-        expected.add("testGroup2");
-        expected.add("testGroup");
-        assertEquals(2, res.size());
-        assertThat(res, is(expected));
-
-    }
-
-    @Test
-    public void getSchemaMetadataList() {
-        ISchemaRegistryClient client = new DefaultSchemaRegistryClientForTesting(){
-
-            public List<String> getSchemaNames(List<String> schemaGroup) {
-                if(!schemaGroup.contains("Group1")) {
-                    return new ArrayList<>();
-                }
-                List<String> schemas = new ArrayList<>();
-                schemas.add("testSchema");
-                return schemas;
-            }
-        };
-
-        AutocompletionAgent autocompletionAgent =
-                new AutocompletionAgent("schema-registry", client);
-
-        List<String> groupList = new ArrayList<>();
-        groupList.add("Group1");
-        groupList.add("Group2");
-        List<String> res = autocompletionAgent.getSchemaMetadataList("tes", groupList, new ArrayList<>());
-        List<String> expected = new ArrayList<>();
-        expected.add("testSchema");
-        assertEquals(1, res.size());
-        assertThat(res, is(expected));
-
-        res = autocompletionAgent.getSchemaMetadataList("tesSome", groupList, new ArrayList<>());
-        assertEquals(0, res.size());
-    }
-
-    @Test
-    public void getBranchList() {
-        ISchemaRegistryClient client = new DefaultSchemaRegistryClientForTesting(){
-
-            public List<String> getSchemaBranches(String schemaMetadataName) {
-                if(!schemaMetadataName.equals("Schema1")) {
-                    return new ArrayList<>();
-                }
-                List<String> branches = new ArrayList<>();
-                branches.add("testBranch");
-                return branches;
-            }
-
-
-            public List<String> getSchemaNames(List<String> schemaGroup) {
-                if(!schemaGroup.contains("Group1")) {
-                    return new ArrayList<>();
-                }
-                List<String> schemas = new ArrayList<>();
-                schemas.add("Schema1");
-                return schemas;
-            }
-        };
-
-        AutocompletionAgent autocompletionAgent =
-                new AutocompletionAgent("schema-registry", client);
-
-        List<String> schemaList = new ArrayList<>();
-        schemaList.add("Schema1");
-        schemaList.add("Schema2");
-        List<String> groups = new ArrayList<>();
-        groups.add("Group1");
-        List<String> res = autocompletionAgent.getBranchList("tes", groups, schemaList, new ArrayList<>());
-        List<String> expected = new ArrayList<>();
-        expected.add("testBranch");
-        assertEquals(1, res.size());
-        assertThat(res, is(expected));
-
-        res = autocompletionAgent.getSchemaMetadataList("tesSome", schemaList, new ArrayList<>());
-        assertEquals(0, res.size());
-    }
-}
\ No newline at end of file
diff --git a/plugin-schema-registry/src/test/java/org/apache/ranger/services/schema/registry/client/SchemaRegistryResourceMgrTest.java b/plugin-schema-registry/src/test/java/org/apache/ranger/services/schema/registry/client/SchemaRegistryResourceMgrTest.java
deleted file mode 100644
index 33860b385..000000000
--- a/plugin-schema-registry/src/test/java/org/apache/ranger/services/schema/registry/client/SchemaRegistryResourceMgrTest.java
+++ /dev/null
@@ -1,108 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.ranger.services.schema.registry.client;
-
-import org.apache.ranger.plugin.service.ResourceLookupContext;
-import org.apache.ranger.services.schema.registry.client.util.TestAutocompletionAgent;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
-
-public class SchemaRegistryResourceMgrTest {
-
-    @Test
-    public void getSchemaRegistryResources() throws Exception {
-        String serviceName = "schema-registry";
-        Map<String, String> configs = new HashMap<>();
-        configs.put("schema.registry.url", "http://dummyname:8081");
-        AutocompletionAgent client = new TestAutocompletionAgent("schema-registry", configs);
-
-
-        ResourceLookupContext lookupContext = new ResourceLookupContext();
-        lookupContext.setResources(new HashMap<>());
-        List<String> groups = new ArrayList<>(), schemas = new ArrayList<>(), branches = new ArrayList<>();
-        groups.add("Group1");
-        schemas.add("Schema1");
-        branches.add("Branch1");
-
-        lookupContext.getResources().put("schema-group", groups);
-        lookupContext.getResources().put("schema-metadata", schemas);
-        lookupContext.getResources().put("schema-branch", branches);
-
-        lookupContext.setResourceName("schema-group");
-        lookupContext.setUserInput("test");
-        List<String> res = SchemaRegistryResourceMgr.getSchemaRegistryResources(serviceName,
-                configs,
-                lookupContext,
-                client);
-        List<String> expected = new ArrayList<>();
-        expected.add("Group1"); expected.add("testGroup");
-        assertThat(res, is(expected));
-
-        lookupContext.setResourceName("schema-metadata");
-        lookupContext.setUserInput("testS");
-        res = SchemaRegistryResourceMgr.getSchemaRegistryResources(serviceName,
-                configs,
-                lookupContext,
-                client);
-        expected = new ArrayList<>();
-        expected.add("Schema1"); expected.add("testSchema");
-        assertThat(res, is(expected));
-
-        lookupContext.setResourceName("schema-branch");
-        lookupContext.setUserInput("testB");
-        res = SchemaRegistryResourceMgr.getSchemaRegistryResources(serviceName,
-                configs,
-                lookupContext,
-                client);
-        expected = new ArrayList<>();
-        expected.add("Branch1"); expected.add("testBranch");
-        assertThat(res, is(expected));
-
-        lookupContext.setResourceName("schema-version");
-        lookupContext.setUserInput("*");
-        res = SchemaRegistryResourceMgr.getSchemaRegistryResources(serviceName,
-                configs,
-                lookupContext,
-                client);
-        expected = new ArrayList<>();
-        expected.add("*");
-        assertThat(res, is(expected));
-
-        lookupContext.setResourceName("serde");
-        res = SchemaRegistryResourceMgr.getSchemaRegistryResources(serviceName,
-                configs,
-                lookupContext,
-                client);
-        assertThat(res, is(expected));
-
-        lookupContext.setResourceName("registry-service");
-        res = SchemaRegistryResourceMgr.getSchemaRegistryResources(serviceName,
-                configs,
-                lookupContext,
-                client);
-        assertThat(res, is(expected));
-
-    }
-}
\ No newline at end of file
diff --git a/plugin-schema-registry/src/test/java/org/apache/ranger/services/schema/registry/client/connection/DefaultSchemaRegistryClientTest.java b/plugin-schema-registry/src/test/java/org/apache/ranger/services/schema/registry/client/connection/DefaultSchemaRegistryClientTest.java
deleted file mode 100644
index 4f2c12ecc..000000000
--- a/plugin-schema-registry/src/test/java/org/apache/ranger/services/schema/registry/client/connection/DefaultSchemaRegistryClientTest.java
+++ /dev/null
@@ -1,191 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.ranger.services.schema.registry.client.connection;
-
-import com.google.common.io.Resources;
-import com.hortonworks.registries.schemaregistry.SchemaMetadata;
-import com.hortonworks.registries.schemaregistry.SchemaVersion;
-import com.hortonworks.registries.schemaregistry.webservice.LocalSchemaRegistryServer;
-import org.apache.commons.io.IOUtils;
-import org.junit.BeforeClass;
-import org.junit.Test;
-import org.yaml.snakeyaml.Yaml;
-
-import java.io.File;
-import java.io.FileInputStream;
-import java.net.URISyntaxException;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import static com.hortonworks.registries.schemaregistry.client.SchemaRegistryClient.Configuration.SCHEMA_REGISTRY_URL;
-import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-
-
-@org.junit.Ignore
-public class DefaultSchemaRegistryClientTest {
-
-    private static final String V1_API_PATH = "api/v1";
-
-    private static LocalSchemaRegistryServer localSchemaRegistryServer;
-
-    private static ISchemaRegistryClient client;
-
-    @BeforeClass
-    public static void init() throws Exception {
-        localSchemaRegistryServer =
-                new LocalSchemaRegistryServer(getFilePath("ssl-schema-registry.yaml"));
-
-        try {
-            localSchemaRegistryServer.start();
-        } catch (Exception e){
-            localSchemaRegistryServer.stop();
-            throw e;
-        }
-
-        SchemaMetadata schemaMetadata1 = new SchemaMetadata
-                .Builder("Schema1")
-                .type("avro")
-                .schemaGroup("Group1")
-                .description("description")
-                .build();
-
-        SchemaMetadata schemaMetadata2 = new SchemaMetadata
-                .Builder("Schema2")
-                .type("avro")
-                .schemaGroup("Group2")
-                .description("description")
-                .build();
-
-        SchemaMetadata schemaMetadata3 = new SchemaMetadata
-                .Builder("Schema3")
-                .type("avro")
-                .schemaGroup("Group3")
-                .description("description")
-                .build();
-
-        com.hortonworks.registries.schemaregistry.client.SchemaRegistryClient client = getClient("ssl-schema-registry-client.yaml");
-
-        client.registerSchemaMetadata(schemaMetadata1);
-        client.registerSchemaMetadata(schemaMetadata2);
-        client.registerSchemaMetadata(schemaMetadata3);
-
-        SchemaVersion sv = new SchemaVersion(getSchema("schema-text3.avcs"),
-                "Initial version of the schema");
-        client.addSchemaVersion(schemaMetadata3, sv);
-
-        ///////////////////////////////////////////////
-        Map<String, Object> conf = new HashMap<>();
-        conf.put(SCHEMA_REGISTRY_URL.name(), "https://localhost:" + localSchemaRegistryServer.getLocalPort());
-        String keyStorePath = "./src/test/resources/keystore.jks";
-        String keyStorePassword = "password";
-        String keyStoreType = "jks";
-
-        String trustStorePath = "./src/test/resources/truststore.jks";
-        String trustStorePassword = "password";
-        String trustStoreType = "jks";
-        conf.put("keyStorePath", keyStorePath);
-        conf.put("keyStorePassword", keyStorePassword);
-        conf.put("keyStoreType", keyStoreType);
-
-        conf.put("trustStorePath", trustStorePath);
-        conf.put("trustStorePassword", trustStorePassword);
-        conf.put("trustStoreType", trustStoreType);
-
-        DefaultSchemaRegistryClientTest.client = new DefaultSchemaRegistryClient(conf);
-
-    }
-
-    private static String getSchema(String schemaFileName) throws Exception {
-        try (FileInputStream fis = new FileInputStream(getFilePath(schemaFileName))) {
-            org.apache.avro.Schema.Parser parser = new org.apache.avro.Schema.Parser();
-            return parser.parse(fis).toString();
-        } catch (Exception e) {
-            throw new Exception("Failed to read schema text from : "
-                    + getFilePath(schemaFileName), e);
-        }
-
-    }
-
-    private static String getFilePath(String serverYAMLFileName) throws URISyntaxException {
-        return new File(Resources.getResource(serverYAMLFileName)
-                .toURI())
-                .getAbsolutePath();
-    }
-
-    private static com.hortonworks.registries.schemaregistry.client.SchemaRegistryClient getClient(String clientYAMLFileName) throws Exception {
-        String registryURL = localSchemaRegistryServer.getLocalURL() + V1_API_PATH;
-        Map<String, Object> conf = new HashMap<>();
-        try (FileInputStream fis = new FileInputStream(getFilePath(clientYAMLFileName))) {
-            conf = (Map<String, Object>) new Yaml().load(IOUtils.toString(fis, "UTF-8"));
-            conf.put("schema.registry.url", registryURL);
-        } catch(Exception e) {
-            throw new Exception("Failed to export schema client configuration for yaml : " + getFilePath(clientYAMLFileName), e);
-        }
-        conf.put(SCHEMA_REGISTRY_URL.name(), registryURL);
-
-        return new com.hortonworks.registries.schemaregistry.client.SchemaRegistryClient(conf);
-    }
-
-    @Test
-    public void getSchemaGroups() {
-        List<String> groups = client.getSchemaGroups();
-        assertThat(groups.size(), is(3));
-        assertTrue(groups.contains("Group1"));
-        assertTrue(groups.contains("Group2"));
-        assertTrue(groups.contains("Group3"));
-    }
-
-    @Test
-    public void getSchemaNames() {
-        List<String> groups = new ArrayList<>();
-        groups.add("Group1");
-        groups.add("Group2");
-        List<String> schemas = client.getSchemaNames(groups);
-        assertThat(schemas.size(), is(2));
-        assertTrue(schemas.contains("Schema1"));
-        assertTrue(schemas.contains("Schema2"));
-    }
-
-    @Test
-    public void getSchemaBranches() {
-        List<String> branches = client.getSchemaBranches("Schema1");
-        assertTrue(branches.isEmpty());
-        branches = client.getSchemaBranches("Schema3");
-        assertThat(branches.size(), is(1));
-        assertThat(branches.get(0), is("MASTER"));
-    }
-
-    @Test
-    public void checkConnection() {
-        try {
-            client.checkConnection();
-        } catch (Exception e) {
-            fail("No Exception should be thrown");
-        }
-    }
-
-    @Test(expected = Exception.class)
-    public void checkConnection2() throws Exception {
-        new DefaultSchemaRegistryClient(new HashMap<>()).checkConnection();
-    }
-}
diff --git a/plugin-schema-registry/src/test/java/org/apache/ranger/services/schema/registry/client/connection/util/SecurityUtilsTest.java b/plugin-schema-registry/src/test/java/org/apache/ranger/services/schema/registry/client/connection/util/SecurityUtilsTest.java
deleted file mode 100644
index 541056ca9..000000000
--- a/plugin-schema-registry/src/test/java/org/apache/ranger/services/schema/registry/client/connection/util/SecurityUtilsTest.java
+++ /dev/null
@@ -1,121 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.ranger.services.schema.registry.client.connection.util;
-
-import org.junit.Test;
-
-import javax.net.ssl.SSLContext;
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.hortonworks.registries.schemaregistry.client.SchemaRegistryClient.Configuration.SCHEMA_REGISTRY_URL;
-import static org.apache.ranger.plugin.client.HadoopConfigHolder.RANGER_AUTH_TYPE;
-import static org.apache.ranger.plugin.client.HadoopConfigHolder.RANGER_LOOKUP_KEYTAB;
-import static org.apache.ranger.plugin.client.HadoopConfigHolder.RANGER_LOOKUP_PRINCIPAL;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-
-public class SecurityUtilsTest {
-
-    @Test
-    public void isHttpsConnection() {
-        Map<String, String> conf = new HashMap();
-        conf.put(SCHEMA_REGISTRY_URL.name(), "https://dummy:8081");
-        assertTrue(SecurityUtils.isHttpsConnection(conf));
-
-        conf = new HashMap();
-        conf.put(SCHEMA_REGISTRY_URL.name(), "http://dummy:8081");
-        assertFalse(SecurityUtils.isHttpsConnection(conf));
-    }
-
-    @Test
-    public void createSSLContext() throws Exception {
-        String keyStorePath = "keystore.jks";
-        String keyStorePassword = "password";
-        String keyStoreType = "jks";
-
-        String trustStorePath = "trustsrore.jks";
-        String trustStorePassword = "password";
-        String trustStoreType = "jks";
-
-        Map<String, String> conf = new HashMap();
-        SSLContext sslContext = SecurityUtils.createSSLContext(conf, "TLS");
-        assertTrue(sslContext != null);
-
-        conf.put("keyStorePath", keyStorePath);
-        conf.put("keyStorePassword", keyStorePassword);
-        conf.put("keyStoreType", keyStoreType);
-
-        conf.put("trustStorePath", trustStorePath);
-        conf.put("trustStorePassword", trustStorePassword);
-        conf.put("trustStoreType", trustStoreType);
-        sslContext = SecurityUtils.createSSLContext(conf, "TLS");
-
-        assertTrue(sslContext != null);
-
-    }
-
-    @Test
-    public void getJaasConfigForClientPrincipal() {
-        Map<String, String> conf = new HashMap();
-        assertNull(SecurityUtils.getJaasConfigForClientPrincipal(conf));
-        conf.put(RANGER_LOOKUP_KEYTAB, "/tmp/rangerlookup.keytab");
-        assertNull(SecurityUtils.getJaasConfigForClientPrincipal(conf));
-        conf.put(RANGER_LOOKUP_PRINCIPAL, "rangerlookup");
-
-        String expected = "com.sun.security.auth.module.Krb5LoginModule" +
-                " required useTicketCache=false principal=\"rangerlookup\" " +
-                "useKeyTab=true keyTab=\"/tmp/rangerlookup.keytab\";";
-        String actual = SecurityUtils.getJaasConfigForClientPrincipal(conf);
-        assertEquals(actual, expected);
-    }
-
-
-    @Test
-    public void isKerberosEnabled() {
-        Map<String, String> conf = new HashMap();
-
-        conf.put(RANGER_AUTH_TYPE, "kerberos");
-        conf.put("schema-registry.authentication", "kerberos");
-        assertTrue(SecurityUtils.isKerberosEnabled(conf));
-
-        conf = new HashMap();
-        assertFalse(SecurityUtils.isKerberosEnabled(conf));
-
-        conf = new HashMap();
-        conf.put(RANGER_AUTH_TYPE, "kerberos");
-        assertFalse(SecurityUtils.isKerberosEnabled(conf));
-
-        conf = new HashMap();
-        conf.put("schema-registry.authentication", "kerberos");
-        assertFalse(SecurityUtils.isKerberosEnabled(conf));
-
-        conf = new HashMap();
-        conf.put(RANGER_AUTH_TYPE, "kerberos");
-        conf.put("schema-registry.authentication", "Something wrong");
-        assertFalse(SecurityUtils.isKerberosEnabled(conf));
-
-        conf = new HashMap();
-        conf.put("schema-registry.authentication", "kerberos");
-        conf.put(RANGER_AUTH_TYPE, "Something wrong");
-        assertFalse(SecurityUtils.isKerberosEnabled(conf));
-
-    }
-}
\ No newline at end of file
diff --git a/plugin-schema-registry/src/test/java/org/apache/ranger/services/schema/registry/client/util/AcceptAllHostnameVerifier.java b/plugin-schema-registry/src/test/java/org/apache/ranger/services/schema/registry/client/util/AcceptAllHostnameVerifier.java
deleted file mode 100644
index 7d018602c..000000000
--- a/plugin-schema-registry/src/test/java/org/apache/ranger/services/schema/registry/client/util/AcceptAllHostnameVerifier.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.ranger.services.schema.registry.client.util;
-
-import javax.net.ssl.HostnameVerifier;
-import javax.net.ssl.SSLSession;
-
-public class AcceptAllHostnameVerifier implements HostnameVerifier {
-    @Override
-    public boolean verify(String s, SSLSession sslSession) {
-        return true;
-    }
-}
\ No newline at end of file
diff --git a/plugin-schema-registry/src/test/java/org/apache/ranger/services/schema/registry/client/util/DefaultSchemaRegistryClientForTesting.java b/plugin-schema-registry/src/test/java/org/apache/ranger/services/schema/registry/client/util/DefaultSchemaRegistryClientForTesting.java
deleted file mode 100644
index 083dd6bd8..000000000
--- a/plugin-schema-registry/src/test/java/org/apache/ranger/services/schema/registry/client/util/DefaultSchemaRegistryClientForTesting.java
+++ /dev/null
@@ -1,46 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.ranger.services.schema.registry.client.util;
-
-import org.apache.ranger.services.schema.registry.client.connection.ISchemaRegistryClient;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class DefaultSchemaRegistryClientForTesting implements ISchemaRegistryClient {
-
-    @Override
-    public List<String> getSchemaGroups() {
-        return new ArrayList<>();
-    }
-
-    @Override
-    public List<String> getSchemaNames(List<String> schemaGroup) {
-        return new ArrayList<>();
-    }
-
-    @Override
-    public List<String> getSchemaBranches(String schemaMetadataName) {
-        return new ArrayList<>();
-    }
-
-    @Override
-    public void checkConnection() throws Exception {
-
-    }
-}
diff --git a/plugin-schema-registry/src/test/java/org/apache/ranger/services/schema/registry/client/util/TestAutocompletionAgent.java b/plugin-schema-registry/src/test/java/org/apache/ranger/services/schema/registry/client/util/TestAutocompletionAgent.java
deleted file mode 100644
index 3dd874845..000000000
--- a/plugin-schema-registry/src/test/java/org/apache/ranger/services/schema/registry/client/util/TestAutocompletionAgent.java
+++ /dev/null
@@ -1,59 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.ranger.services.schema.registry.client.util;
-
-import org.apache.ranger.services.schema.registry.client.AutocompletionAgent;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-
-public class TestAutocompletionAgent extends AutocompletionAgent {
-    public TestAutocompletionAgent(String serviceName, Map<String, String> configs) {
-        super(serviceName, configs);
-    }
-
-    @Override
-    public List<String> getSchemaGroupList(String lookupGroupName, List<String> groupList) {
-        List<String> res = new ArrayList<>(groupList);
-        res.add("testGroup");
-
-        return res;
-    }
-
-    @Override
-    public List<String> getSchemaMetadataList(String finalSchemaMetadataName,
-                                              List<String> schemaGroupList,
-                                              List<String> schemaMetadataList) {
-        List<String> res = new ArrayList<>(schemaMetadataList);
-        res.add("testSchema");
-
-        return res;
-    }
-
-    @Override
-    public List<String> getBranchList(String lookupBranchName,
-                                      List<String> groups,
-                                      List<String> schemaList,
-                                      List<String> branchList) {
-        List<String> res = new ArrayList<>(branchList);
-        res.add("testBranch");
-
-        return res;
-    }
-}
diff --git a/pom.xml b/pom.xml
index b77535045..0077db423 100644
--- a/pom.xml
+++ b/pom.xml
@@ -270,7 +270,6 @@
                 <module>ranger-kms-plugin-shim</module>
                 <module>ranger-presto-plugin-shim</module>
                 <module>ranger-tools</module>
-                <module>plugin-schema-registry</module>
                 <module>plugin-sqoop</module>
                 <module>ranger-sqoop-plugin-shim</module>
                 <module>plugin-kylin</module>
@@ -478,7 +477,6 @@
                 <module>ranger-atlas-plugin-shim</module>
                 <module>ranger-kms-plugin-shim</module>
                 <module>ranger-tools</module>
-                <module>plugin-schema-registry</module>
                 <module>plugin-sqoop</module>
                 <module>ranger-sqoop-plugin-shim</module>
                 <module>plugin-kylin</module>
@@ -554,7 +552,6 @@
                 <module>ranger-kms-plugin-shim</module>
                 <module>ranger-presto-plugin-shim</module>
                 <module>ranger-tools</module>
-                <module>plugin-schema-registry</module>
                 <module>plugin-sqoop</module>
                 <module>ranger-sqoop-plugin-shim</module>
                 <module>plugin-kylin</module>
