diff --git a/plugin-elasticsearch/.gitignore b/plugin-elasticsearch/.gitignore
deleted file mode 100644
index b83d22266..000000000
--- a/plugin-elasticsearch/.gitignore
+++ /dev/null
@@ -1 +0,0 @@
-/target/
diff --git a/plugin-elasticsearch/conf/ranger-elasticsearch-audit-changes.cfg b/plugin-elasticsearch/conf/ranger-elasticsearch-audit-changes.cfg
deleted file mode 100644
index c396d5d55..000000000
--- a/plugin-elasticsearch/conf/ranger-elasticsearch-audit-changes.cfg
+++ /dev/null
@@ -1,75 +0,0 @@
-# Licensed to the Apache Software Foundation (ASF) under one or more
-# contributor license agreements.  See the NOTICE file distributed with
-# this work for additional information regarding copyright ownership.
-# The ASF licenses this file to You under the Apache License, Version 2.0
-# (the "License"); you may not use this file except in compliance with
-# the License.  You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-xasecure.audit.hdfs.is.enabled                                     %XAAUDIT.HDFS.IS_ENABLED%                               mod create-if-not-exists
-xasecure.audit.hdfs.config.destination.directory                   %XAAUDIT.HDFS.DESTINATION_DIRECTORY%                    mod create-if-not-exists
-xasecure.audit.hdfs.config.destination.file                        %XAAUDIT.HDFS.DESTINTATION_FILE%                        mod create-if-not-exists
-xasecure.audit.hdfs.config.destination.flush.interval.seconds      %XAAUDIT.HDFS.DESTINTATION_FLUSH_INTERVAL_SECONDS%      mod create-if-not-exists
-xasecure.audit.hdfs.config.destination.rollover.interval.seconds   %XAAUDIT.HDFS.DESTINTATION_ROLLOVER_INTERVAL_SECONDS%   mod create-if-not-exists
-xasecure.audit.hdfs.config.destination.open.retry.interval.seconds %XAAUDIT.HDFS.DESTINTATION_OPEN_RETRY_INTERVAL_SECONDS% mod create-if-not-exists
-xasecure.audit.hdfs.config.local.buffer.directory                  %XAAUDIT.HDFS.LOCAL_BUFFER_DIRECTORY%                   mod create-if-not-exists
-xasecure.audit.hdfs.config.local.buffer.file                       %XAAUDIT.HDFS.LOCAL_BUFFER_FILE%                        mod create-if-not-exists
-xasecure.audit.hdfs.config.local.buffer.flush.interval.seconds     %XAAUDIT.HDFS.LOCAL_BUFFER_FLUSH_INTERVAL_SECONDS%      mod create-if-not-exists
-xasecure.audit.hdfs.config.local.buffer.rollover.interval.seconds  %XAAUDIT.HDFS.LOCAL_BUFFER_ROLLOVER_INTERVAL_SECONDS%   mod create-if-not-exists
-xasecure.audit.hdfs.config.local.archive.directory                 %XAAUDIT.HDFS.LOCAL_ARCHIVE_DIRECTORY%                  mod create-if-not-exists
-xasecure.audit.hdfs.config.local.archive.max.file.count            %XAAUDIT.HDFS.LOCAL_ARCHIVE_MAX_FILE_COUNT%             mod create-if-not-exists
-
-#xasecure.audit.kafka.is.enabled                                    %XAAUDIT.KAFKA.IS_ENABLED%                             mod create-if-not-exists
-#xasecure.audit.kafka.is.async                                      %XAAUDIT.KAFKA.IS_ASYNC%                               mod create-if-not-exists
-#xasecure.audit.kafka.async.max.queue.size                          %XAAUDIT.KAFKA.MAX_QUEUE_SIZE%                         mod create-if-not-exists
-#xasecure.audit.kafka.async.max.flush.interval.ms                   %XAAUDIT.KAFKA.MAX_FLUSH_INTERVAL_MS%                  mod create-if-not-exists
-#xasecure.audit.kafka.broker_list                                   %XAAUDIT.KAFKA.BROKER_LIST%                            mod create-if-not-exists
-#xasecure.audit.kafka.topic_name                                    %XAAUDIT.KAFKA.TOPIC_NAME%                             mod create-if-not-exists
-
-xasecure.audit.solr.is.enabled                                    %XAAUDIT.SOLR.IS_ENABLED%                               mod create-if-not-exists
-xasecure.audit.solr.async.max.queue.size                          %XAAUDIT.SOLR.MAX_QUEUE_SIZE%                           mod create-if-not-exists
-xasecure.audit.solr.async.max.flush.interval.ms                   %XAAUDIT.SOLR.MAX_FLUSH_INTERVAL_MS%                    mod create-if-not-exists
-xasecure.audit.solr.solr_url                                      %XAAUDIT.SOLR.SOLR_URL%                                 mod create-if-not-exists
-
-#V3 configuration
-xasecure.audit.destination.solr                                    %XAAUDIT.SOLR.ENABLE%                               mod create-if-not-exists
-xasecure.audit.destination.solr.urls                               %XAAUDIT.SOLR.URL%                                 mod create-if-not-exists
-xasecure.audit.destination.solr.user %XAAUDIT.SOLR.USER% mod create-if-not-exists
-xasecure.audit.destination.solr.password %XAAUDIT.SOLR.PASSWORD% mod create-if-not-exists
-xasecure.audit.destination.solr.zookeepers                         %XAAUDIT.SOLR.ZOOKEEPER%                           mod create-if-not-exists
-xasecure.audit.destination.solr.batch.filespool.dir                %XAAUDIT.SOLR.FILE_SPOOL_DIR%                      mod create-if-not-exists
-
-xasecure.audit.destination.elasticsearch                                    %XAAUDIT.ELASTICSEARCH.ENABLE%                              mod create-if-not-exists
-xasecure.audit.destination.elasticsearch.urls                               %XAAUDIT.ELASTICSEARCH.URL%                                 mod create-if-not-exists
-xasecure.audit.destination.elasticsearch.user 							   %XAAUDIT.ELASTICSEARCH.USER% 								  mod create-if-not-exists
-xasecure.audit.destination.elasticsearch.password 						   %XAAUDIT.ELASTICSEARCH.PASSWORD% 							  mod create-if-not-exists
-xasecure.audit.destination.elasticsearch.index 						   %XAAUDIT.ELASTICSEARCH.INDEX% 							  mod create-if-not-exists
-xasecure.audit.destination.elasticsearch.port 						   %XAAUDIT.ELASTICSEARCH.PORT% 							  mod create-if-not-exists
-xasecure.audit.destination.elasticsearch.protocol 						   %XAAUDIT.ELASTICSEARCH.PROTOCOL% 							  mod create-if-not-exists
-
-xasecure.audit.destination.hdfs					   %XAAUDIT.HDFS.ENABLE%                      mod create-if-not-exists
-xasecure.audit.destination.hdfs.batch.filespool.dir                %XAAUDIT.HDFS.FILE_SPOOL_DIR%                      mod create-if-not-exists
-xasecure.audit.destination.hdfs.dir                		   %XAAUDIT.HDFS.HDFS_DIR%                      mod create-if-not-exists
-
-AZURE.ACCOUNTNAME                                                                                                 %XAAUDIT.HDFS.AZURE_ACCOUNTNAME%            var
-xasecure.audit.destination.hdfs.config.fs.azure.shellkeyprovider.script                                           %XAAUDIT.HDFS.AZURE_SHELL_KEY_PROVIDER%     mod         create-if-not-exists
-xasecure.audit.destination.hdfs.config.fs.azure.account.key.%AZURE.ACCOUNTNAME%.blob.core.windows.net             %XAAUDIT.HDFS.AZURE_ACCOUNTKEY%             mod         create-if-not-exists
-xasecure.audit.destination.hdfs.config.fs.azure.account.keyprovider.%AZURE.ACCOUNTNAME%.blob.core.windows.net     %XAAUDIT.HDFS.AZURE_ACCOUNTKEY_PROVIDER%    mod         create-if-not-exists
-
-#xasecure.audit.destination.file					   %XAAUDIT.FILE.ENABLE%                      mod create-if-not-exists
-#xasecure.audit.destination.file.dir                		   %XAAUDIT.FILE.DIR%                      mod create-if-not-exists
-
-#log4j configuration
-xasecure.audit.log4j.is.enabled                %XAAUDIT.LOG4J.ENABLE%                      mod create-if-not-exists
-xasecure.audit.log4j.is.async                %XAAUDIT.LOG4J.IS_ASYNC%                      mod create-if-not-exists
-xasecure.audit.log4j.async.max.queue.size                %XAAUDIT.LOG4J.ASYNC.MAX.QUEUE.SIZE%                      mod create-if-not-exists
-xasecure.audit.log4j.async.max.flush.interval.ms                %XAAUDIT.LOG4J.ASYNC.MAX.FLUSH.INTERVAL.MS%                      mod create-if-not-exists
-xasecure.audit.destination.log4j                %XAAUDIT.LOG4J.DESTINATION.LOG4J%                      mod create-if-not-exists
-xasecure.audit.destination.log4j.logger                %XAAUDIT.LOG4J.DESTINATION.LOG4J.LOGGER%                      mod create-if-not-exists
diff --git a/plugin-elasticsearch/conf/ranger-elasticsearch-audit.xml b/plugin-elasticsearch/conf/ranger-elasticsearch-audit.xml
deleted file mode 100644
index f06b3840c..000000000
--- a/plugin-elasticsearch/conf/ranger-elasticsearch-audit.xml
+++ /dev/null
@@ -1,216 +0,0 @@
-<?xml version="1.0"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
--->
-<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
-<configuration xmlns:xi="http://www.w3.org/2001/XInclude">
-	<property>
-		<name>xasecure.audit.is.enabled</name>
-		<value>true</value>
-	</property>
-
-	<!-- HDFS audit provider configuration -->
-	<property>
-		<name>xasecure.audit.hdfs.is.enabled</name>
-		<value>false</value>
-	</property>
-
-	<property>
-		<name>xasecure.audit.hdfs.is.async</name>
-		<value>true</value>
-	</property>
-
-	<property>
-		<name>xasecure.audit.hdfs.async.max.queue.size</name>
-		<value>1048576</value>
-	</property>
-
-	<property>
-		<name>xasecure.audit.hdfs.async.max.flush.interval.ms</name>
-		<value>30000</value>
-	</property>
-
-	<property>
-		<name>xasecure.audit.hdfs.config.encoding</name>
-		<value></value>
-	</property>
-
-	<property>
-		<name>xasecure.audit.hdfs.config.destination.directory</name>
-		<value>hdfs://NAMENODE_HOST:8020/ranger/audit/%app-type%/%time:yyyyMMdd%</value>
-	</property>
-
-	<property>
-		<name>xasecure.audit.hdfs.config.destination.file</name>
-		<value>%hostname%-audit.log</value>
-	</property>
-
-	<property>
-		<name>xasecure.audit.hdfs.config.destination.flush.interval.seconds</name>
-		<value>900</value>
-	</property>
-
-	<property>
-		<name>xasecure.audit.hdfs.config.destination.rollover.interval.seconds</name>
-		<value>86400</value>
-	</property>
-
-	<property>
-		<name>xasecure.audit.hdfs.config.destination.open.retry.interval.seconds</name>
-		<value>60</value>
-	</property>
-
-	<property>
-		<name>xasecure.audit.hdfs.config.local.buffer.directory</name>
-		<value>/var/log/elasticsearch/audit</value>
-	</property>
-
-	<property>
-		<name>xasecure.audit.hdfs.config.local.buffer.file</name>
-		<value>%time:yyyyMMdd-HHmm.ss%.log</value>
-	</property>
-
-	<property>
-		<name>xasecure.audit.hdfs.config.local.buffer.file.buffer.size.bytes</name>
-		<value>8192</value>
-	</property>
-
-	<property>
-		<name>xasecure.audit.hdfs.config.local.buffer.flush.interval.seconds</name>
-		<value>60</value>
-	</property>
-
-	<property>
-		<name>xasecure.audit.hdfs.config.local.buffer.rollover.interval.seconds</name>
-		<value>600</value>
-	</property>
-
-	<property>
-		<name>xasecure.audit.hdfs.config.local.archive.directory</name>
-		<value>/var/log/elasticsearch/audit/archive</value>
-	</property>
-
-	<property>
-		<name>xasecure.audit.hdfs.config.local.archive.max.file.count</name>
-		<value>10</value>
-	</property>
-
-	<!-- Audit to HDFS on Azure Datastore (WASB) requires v3 style settings.  Comment the above and uncomment only the
-	following to audit to Azure Blob Datastore via hdfs' WASB schema.
-
-	NOTE: If you specify one audit destination in v3 style then other destinations, if any, must also be specified in v3 style
-	====
-
-	<property>
-		<name>xasecure.audit.destination.hdfs</name>
-		<value>enabled</value>
-	</property>
-
-	<property>
-		<name>xasecure.audit.destination.hdfs.dir</name>
-		<value>wasb://ranger-audit1@youraccount.blob.core.windows.net</value>
-	</property>
-
-	the following 3 correspond to the properties with similar name in core-site.xml, i.e.
-	- fs.azure.account.key.youraccount.blob.core.windows.net => xasecure.audit.destination.hdfs.config.fs.azure.account.key.youraccount.blob.core.windows.net and
-	- fs.azure.account.keyprovider.youraccount.blob.core.windows.net => xasecure.audit.destination.hdfs.config.fs.azure.account.keyprovider.youraccount.blob.core.windows.net,
-	- fs.azure.shellkeyprovider.script => xasecure.audit.destination.hdfs.config.fs.azure.shellkeyprovider.script,
-
-	<property>
-		<name>xasecure.audit.destination.hdfs.config.fs.azure.account.key.youraccount.blob.core.windows.net</name>
-		<value>YOUR ENCRYPTED ACCESS KEY</value>
-	</property>
-
-	<property>
-		<name>xasecure.audit.destination.hdfs.config.fs.azure.account.keyprovider.youraccount.blob.core.windows.net</name>
-		<value>org.apache.hadoop.fs.azure.ShellDecryptionKeyProvider</value>
-	</property>
-
-	<property>
-		<name>xasecure.audit.destination.hdfs.config.fs.azure.shellkeyprovider.script</name>
-		<value>/usr/lib/python2.7/dist-packages/hdinsight_common/decrypt.sh</value>
-	</property>
-	-->
-
-	<!-- Log4j audit provider configuration -->
-	<property>
-		<name>xasecure.audit.log4j.is.enabled</name>
-		<value>false</value>
-	</property>
-
-	<property>
-		<name>xasecure.audit.log4j.is.async</name>
-		<value>false</value>
-	</property>
-
-	<property>
-		<name>xasecure.audit.log4j.async.max.queue.size</name>
-		<value>10240</value>
-	</property>
-
-	<property>
-		<name>xasecure.audit.log4j.async.max.flush.interval.ms</name>
-		<value>30000</value>
-	</property>
-
-	<!-- Kafka audit provider configuration -->
-	<property>
-		<name>xasecure.audit.kafka.is.enabled</name>
-		<value>false</value>
-	</property>
-
-	<property>
-		<name>xasecure.audit.kafka.async.max.queue.size</name>
-		<value>1</value>
-	</property>
-
-	<property>
-		<name>xasecure.audit.kafka.async.max.flush.interval.ms</name>
-		<value>1000</value>
-	</property>
-
-	<property>
-		<name>xasecure.audit.kafka.broker_list</name>
-		<value>localhost:9092</value>
-	</property>
-
-	<property>
-		<name>xasecure.audit.kafka.topic_name</name>
-		<value>ranger_audits</value>
-	</property>
-
-	<!-- Ranger audit provider configuration -->
-	<property>
-		<name>xasecure.audit.solr.is.enabled</name>
-		<value>false</value>
-	</property>
-
-	<property>
-		<name>xasecure.audit.solr.async.max.queue.size</name>
-		<value>1</value>
-	</property>
-
-	<property>
-		<name>xasecure.audit.solr.async.max.flush.interval.ms</name>
-		<value>1000</value>
-	</property>
-
-	<property>
-		<name>xasecure.audit.solr.solr_url</name>
-		<value>http://localhost:6083/solr/ranger_audits</value>
-	</property>
-
-</configuration>
diff --git a/plugin-elasticsearch/conf/ranger-elasticsearch-security-changes.cfg b/plugin-elasticsearch/conf/ranger-elasticsearch-security-changes.cfg
deleted file mode 100644
index bfff29695..000000000
--- a/plugin-elasticsearch/conf/ranger-elasticsearch-security-changes.cfg
+++ /dev/null
@@ -1,28 +0,0 @@
-# Licensed to the Apache Software Foundation (ASF) under one or more
-# contributor license agreements.  See the NOTICE file distributed with
-# this work for additional information regarding copyright ownership.
-# The ASF licenses this file to You under the Apache License, Version 2.0
-# (the "License"); you may not use this file except in compliance with
-# the License.  You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# Change the original policy parameter to work with policy manager based.
-#
-#
-ranger.plugin.elasticsearch.service.name %REPOSITORY_NAME% mod create-if-not-exists
-
-ranger.plugin.elasticsearch.policy.source.impl org.apache.ranger.admin.client.RangerAdminRESTClient mod create-if-not-exists
-
-ranger.plugin.elasticsearch.policy.rest.url                %POLICY_MGR_URL%                          mod create-if-not-exists
-ranger.plugin.elasticsearch.policy.rest.ssl.config.file    %COMPONENT_INSTALL_DIR_NAME%/config/ranger-elasticsearch-plugin/ranger-policymgr-ssl.xml mod create-if-not-exists
-ranger.plugin.elasticsearch.policy.pollIntervalMs          30000                                     mod create-if-not-exists
-ranger.plugin.elasticsearch.policy.cache.dir               %POLICY_CACHE_FILE_PATH%                  mod create-if-not-exists
-ranger.plugin.elasticsearch.policy.rest.client.connection.timeoutMs 	  120000					    mod create-if-not-exists
-ranger.plugin.elasticsearch.policy.rest.client.read.timeoutMs	   	  30000					        mod create-if-not-exists
\ No newline at end of file
diff --git a/plugin-elasticsearch/conf/ranger-elasticsearch-security.xml b/plugin-elasticsearch/conf/ranger-elasticsearch-security.xml
deleted file mode 100644
index 802e573d9..000000000
--- a/plugin-elasticsearch/conf/ranger-elasticsearch-security.xml
+++ /dev/null
@@ -1,83 +0,0 @@
-<?xml version="1.0"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
--->
-<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
-<configuration xmlns:xi="http://www.w3.org/2001/XInclude">
-	<property>
-		<name>ranger.plugin.elasticsearch.service.name</name>
-		<value>elasticsearchdev</value>
-		<description>
-			Name of the Ranger service containing policies for this elasticsearch instance
-		</description>
-	</property>
-
-	<property>
-		<name>ranger.plugin.elasticsearch.policy.source.impl</name>
-		<value>org.apache.ranger.admin.client.RangerAdminRESTClient</value>
-		<description>
-			Class to retrieve policies from the source
-		</description>
-	</property>
-
-	<property>
-		<name>ranger.plugin.elasticsearch.policy.rest.url</name>
-		<value>http://policymanagerhost:port</value>
-		<description>
-			URL to Ranger Admin
-		</description>
-	</property>
-
-	<property>
-		<name>ranger.plugin.elasticsearch.policy.rest.ssl.config.file</name>
-		<value>/etc/hadoop/conf/ranger-policymgr-ssl.xml</value>
-		<description>
-			Path to the file containing SSL details to contact Ranger Admin
-		</description>
-	</property>
-
-	<property>
-		<name>ranger.plugin.elasticsearch.policy.pollIntervalMs</name>
-		<value>30000</value>
-		<description>
-			How often to poll for changes in policies?
-		</description>
-	</property>
-
-	<property>
-		<name>ranger.plugin.elasticsearch.policy.cache.dir</name>
-		<value>/etc/ranger/hadoopdev/policycache</value>
-		<description>
-			Directory where Ranger policies are cached after successful retrieval from the source
-		</description>
-	</property>
-
-	<property>
-		<name>ranger.plugin.elasticsearch.policy.rest.client.connection.timeoutMs</name>
-		<value>120000</value>
-		<description>
-			RangerRestClient Connection Timeout in Milli Seconds
-		</description>
-	</property>
-
-	<property>
-		<name>ranger.plugin.elasticsearch.policy.rest.client.read.timeoutMs</name>
-		<value>30000</value>
-		<description>
-			RangerRestClient read Timeout in Milli Seconds
-		</description>
-	</property>
-</configuration>
diff --git a/plugin-elasticsearch/conf/ranger-policymgr-ssl-changes.cfg b/plugin-elasticsearch/conf/ranger-policymgr-ssl-changes.cfg
deleted file mode 100644
index ae347e845..000000000
--- a/plugin-elasticsearch/conf/ranger-policymgr-ssl-changes.cfg
+++ /dev/null
@@ -1,21 +0,0 @@
-# Licensed to the Apache Software Foundation (ASF) under one or more
-# contributor license agreements.  See the NOTICE file distributed with
-# this work for additional information regarding copyright ownership.
-# The ASF licenses this file to You under the Apache License, Version 2.0
-# (the "License"); you may not use this file except in compliance with
-# the License.  You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# SSL Params
-#
-xasecure.policymgr.clientssl.keystore					 %SSL_KEYSTORE_FILE_PATH%						mod create-if-not-exists
-xasecure.policymgr.clientssl.keystore.credential.file	 jceks://file%CREDENTIAL_PROVIDER_FILE%			mod create-if-not-exists
-xasecure.policymgr.clientssl.truststore				     %SSL_TRUSTSTORE_FILE_PATH%						mod create-if-not-exists
-xasecure.policymgr.clientssl.truststore.credential.file  jceks://file%CREDENTIAL_PROVIDER_FILE%         mod create-if-not-exists
diff --git a/plugin-elasticsearch/conf/ranger-policymgr-ssl.xml b/plugin-elasticsearch/conf/ranger-policymgr-ssl.xml
deleted file mode 100644
index dcb0de08a..000000000
--- a/plugin-elasticsearch/conf/ranger-policymgr-ssl.xml
+++ /dev/null
@@ -1,49 +0,0 @@
-<?xml version="1.0"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
--->
-<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
-<configuration xmlns:xi="http://www.w3.org/2001/XInclude">
-	<!-- The following properties are used for 2-way SSL client server validation -->
-	<property>
-		<name>xasecure.policymgr.clientssl.keystore</name>
-		<value>elasticsearchdev-clientcert.jks</value>
-		<description>
-			Java Keystore files
-		</description>
-	</property>
-	<property>
-		<name>xasecure.policymgr.clientssl.truststore</name>
-		<value>cacerts-xasecure.jks</value>
-		<description>
-			java truststore file
-		</description>
-	</property>
-	<property>
-		<name>xasecure.policymgr.clientssl.keystore.credential.file</name>
-		<value>jceks://file/tmp/keystore-elasticsearchdev-ssl.jceks</value>
-		<description>
-			java keystore credential file
-		</description>
-	</property>
-	<property>
-		<name>xasecure.policymgr.clientssl.truststore.credential.file</name>
-		<value>jceks://file/tmp/truststore-elasticsearchdev-ssl.jceks</value>
-		<description>
-			java truststore credential file
-		</description>
-	</property>
-</configuration>
diff --git a/plugin-elasticsearch/pom.xml b/plugin-elasticsearch/pom.xml
deleted file mode 100644
index 41fdfaa22..000000000
--- a/plugin-elasticsearch/pom.xml
+++ /dev/null
@@ -1,69 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
--->
-<project xmlns="http://maven.apache.org/POM/4.0.0"
-	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-	<modelVersion>4.0.0</modelVersion>
-	<artifactId>ranger-elasticsearch-plugin</artifactId>
-	<name>Elasticsearch Security Plugin</name>
-	<description>Elasticsearch Security Plugin</description>
-	<packaging>jar</packaging>
-	<properties>
-		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-	</properties>
-	<parent>
-		<groupId>org.apache.ranger</groupId>
-		<artifactId>ranger</artifactId>
-		<version>2.2.0</version>
-		<relativePath>..</relativePath>
-	</parent>
-	<dependencies>
-		<dependency>
-			<groupId>org.elasticsearch</groupId>
-			<artifactId>elasticsearch</artifactId>
-			<version>${elasticsearch.version}</version>
-			<scope>provided</scope>
-		</dependency>
-		<dependency>
-			<groupId>org.apache.ranger</groupId>
-			<artifactId>ranger-elasticsearch-plugin-shim</artifactId>
-			<version>${project.version}</version>
-			<scope>provided</scope>
-		</dependency>
-		<dependency>
-			<groupId>org.apache.ranger</groupId>
-			<artifactId>ranger-plugins-common</artifactId>
-			<version>${project.version}</version>
-		</dependency>
-		<dependency>
-			<groupId>org.apache.ranger</groupId>
-			<artifactId>ranger-plugins-audit</artifactId>
-			<version>${project.version}</version>
-		</dependency>
-		<dependency>
-			<groupId>org.apache.ranger</groupId>
-			<artifactId>credentialbuilder</artifactId>
-			<version>${project.version}</version>
-		</dependency>
-		<dependency>
-			<groupId>org.apache.httpcomponents</groupId>
-			<artifactId>httpcore</artifactId>
-			<version>${httpcomponents.httpcore.version}</version>
-		</dependency>
-	</dependencies>
-</project>
diff --git a/plugin-elasticsearch/scripts/install.properties b/plugin-elasticsearch/scripts/install.properties
deleted file mode 100644
index 7e752c336..000000000
--- a/plugin-elasticsearch/scripts/install.properties
+++ /dev/null
@@ -1,164 +0,0 @@
-# Licensed to the Apache Software Foundation (ASF) under one or more
-# contributor license agreements.  See the NOTICE file distributed with
-# this work for additional information regarding copyright ownership.
-# The ASF licenses this file to You under the Apache License, Version 2.0
-# (the "License"); you may not use this file except in compliance with
-# the License.  You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-#
-# Location of Policy Manager URL
-#
-# Example:
-# POLICY_MGR_URL=http://policymanager.xasecure.net:6080
-#
-POLICY_MGR_URL=
-
-#
-# This is the repository name created within policy manager
-#
-# Example:
-# REPOSITORY_NAME=elasticsearchdev
-#
-REPOSITORY_NAME=
-
-#
-# Name of the directory where the component's lib and conf directory exist.
-# This location should be relative to the parent of the directory containing
-# the plugin installation files.
-#
-COMPONENT_INSTALL_DIR_NAME=../elasticsearch
-
-# Enable audit logs to Solr
-#Example
-#XAAUDIT.SOLR.ENABLE=true
-#XAAUDIT.SOLR.URL=http://localhost:6083/solr/ranger_audits
-#XAAUDIT.SOLR.ZOOKEEPER=
-#XAAUDIT.SOLR.FILE_SPOOL_DIR=/var/log/elasticsearch/audit/solr/spool
-
-XAAUDIT.SOLR.ENABLE=false
-XAAUDIT.SOLR.URL=NONE
-XAAUDIT.SOLR.USER=NONE
-XAAUDIT.SOLR.PASSWORD=NONE
-XAAUDIT.SOLR.ZOOKEEPER=NONE
-XAAUDIT.SOLR.FILE_SPOOL_DIR=/var/log/elasticsearch/audit/solr/spool
-
-# Enable audit logs to ElasticSearch
-#Example
-#XAAUDIT.ELASTICSEARCH.ENABLE=true
-#XAAUDIT.ELASTICSEARCH.URL=localhost
-#XAAUDIT.ELASTICSEARCH.INDEX=audit
-
-XAAUDIT.ELASTICSEARCH.ENABLE=false
-XAAUDIT.ELASTICSEARCH.URL=NONE
-XAAUDIT.ELASTICSEARCH.USER=NONE
-XAAUDIT.ELASTICSEARCH.PASSWORD=NONE
-XAAUDIT.ELASTICSEARCH.INDEX=NONE
-XAAUDIT.ELASTICSEARCH.PORT=NONE
-XAAUDIT.ELASTICSEARCH.PROTOCOL=NONE
-
-# Enable audit logs to HDFS
-#Example
-#XAAUDIT.HDFS.ENABLE=true
-#XAAUDIT.HDFS.HDFS_DIR=hdfs://node-1.example.com:8020/ranger/audit
-#  If using Azure Blob Storage
-#XAAUDIT.HDFS.HDFS_DIR=wasb[s]://<containername>@<accountname>.blob.core.windows.net/<path>
-#XAAUDIT.HDFS.HDFS_DIR=wasb://ranger_audit_container@my-azure-account.blob.core.windows.net/ranger/audit
-#XAAUDIT.HDFS.FILE_SPOOL_DIR=/var/log/elasticsearch/audit/hdfs/spool
-
-XAAUDIT.HDFS.ENABLE=false
-XAAUDIT.HDFS.HDFS_DIR=hdfs://__REPLACE__NAME_NODE_HOST:8020/ranger/audit
-XAAUDIT.HDFS.FILE_SPOOL_DIR=/var/log/elasticsearch/audit/hdfs/spool
-
-# Following additional propertis are needed When auditing to Azure Blob Storage via HDFS
-# Get these values from your /etc/hadoop/conf/core-site.xml
-#XAAUDIT.HDFS.HDFS_DIR=wasb[s]://<containername>@<accountname>.blob.core.windows.net/<path>
-XAAUDIT.HDFS.AZURE_ACCOUNTNAME=__REPLACE_AZURE_ACCOUNT_NAME
-XAAUDIT.HDFS.AZURE_ACCOUNTKEY=__REPLACE_AZURE_ACCOUNT_KEY
-XAAUDIT.HDFS.AZURE_SHELL_KEY_PROVIDER=__REPLACE_AZURE_SHELL_KEY_PROVIDER
-XAAUDIT.HDFS.AZURE_ACCOUNTKEY_PROVIDER=__REPLACE_AZURE_ACCOUNT_KEY_PROVIDER
-
-#Log4j Audit Provider
-XAAUDIT.LOG4J.ENABLE=false
-XAAUDIT.LOG4J.IS_ASYNC=false
-XAAUDIT.LOG4J.ASYNC.MAX.QUEUE.SIZE=10240
-XAAUDIT.LOG4J.ASYNC.MAX.FLUSH.INTERVAL.MS=30000
-XAAUDIT.LOG4J.DESTINATION.LOG4J=true
-XAAUDIT.LOG4J.DESTINATION.LOG4J.LOGGER=xaaudit
-
-# End of V3 properties
-
-#
-#  Audit to HDFS Configuration
-#
-# If XAAUDIT.HDFS.IS_ENABLED is set to true, please replace tokens
-# that start with __REPLACE__ with appropriate values
-#  XAAUDIT.HDFS.IS_ENABLED=true
-#  XAAUDIT.HDFS.DESTINATION_DIRECTORY=hdfs://__REPLACE__NAME_NODE_HOST:8020/ranger/audit/%app-type%/%time:yyyyMMdd%
-#  XAAUDIT.HDFS.LOCAL_BUFFER_DIRECTORY=__REPLACE__LOG_DIR/elasticsearch/audit
-#  XAAUDIT.HDFS.LOCAL_ARCHIVE_DIRECTORY=__REPLACE__LOG_DIR/elasticsearch/audit/archive
-#
-# Example:
-#  XAAUDIT.HDFS.IS_ENABLED=true
-#  XAAUDIT.HDFS.DESTINATION_DIRECTORY=hdfs://namenode.example.com:8020/ranger/audit/%app-type%/%time:yyyyMMdd%
-#  XAAUDIT.HDFS.LOCAL_BUFFER_DIRECTORY=/var/log/elasticsearch/audit
-#  XAAUDIT.HDFS.LOCAL_ARCHIVE_DIRECTORY=/var/log/elasticsearch/audit/archive
-#
-XAAUDIT.HDFS.IS_ENABLED=false
-XAAUDIT.HDFS.DESTINATION_DIRECTORY=hdfs://__REPLACE__NAME_NODE_HOST:8020/ranger/audit/%app-type%/%time:yyyyMMdd%
-XAAUDIT.HDFS.LOCAL_BUFFER_DIRECTORY=__REPLACE__LOG_DIR/elasticsearch/audit
-XAAUDIT.HDFS.LOCAL_ARCHIVE_DIRECTORY=__REPLACE__LOG_DIR/elasticsearch/audit/archive
-
-XAAUDIT.HDFS.DESTINTATION_FILE=%hostname%-audit.log
-XAAUDIT.HDFS.DESTINTATION_FLUSH_INTERVAL_SECONDS=900
-XAAUDIT.HDFS.DESTINTATION_ROLLOVER_INTERVAL_SECONDS=86400
-XAAUDIT.HDFS.DESTINTATION_OPEN_RETRY_INTERVAL_SECONDS=60
-XAAUDIT.HDFS.LOCAL_BUFFER_FILE=%time:yyyyMMdd-HHmm.ss%.log
-XAAUDIT.HDFS.LOCAL_BUFFER_FLUSH_INTERVAL_SECONDS=60
-XAAUDIT.HDFS.LOCAL_BUFFER_ROLLOVER_INTERVAL_SECONDS=600
-XAAUDIT.HDFS.LOCAL_ARCHIVE_MAX_FILE_COUNT=10
-
-#Solr Audit Provider
-XAAUDIT.SOLR.IS_ENABLED=false
-XAAUDIT.SOLR.MAX_QUEUE_SIZE=1
-XAAUDIT.SOLR.MAX_FLUSH_INTERVAL_MS=1000
-XAAUDIT.SOLR.SOLR_URL=http://localhost:6083/solr/ranger_audits
-
-# End of V2 properties
-
-
-#
-# SSL Client Certificate Information
-#
-# Example:
-# SSL_KEYSTORE_FILE_PATH=/etc/hadoop/conf/ranger-plugin-keystore.jks
-# SSL_KEYSTORE_PASSWORD=none
-# SSL_TRUSTSTORE_FILE_PATH=/etc/hadoop/conf/ranger-plugin-truststore.jks
-# SSL_TRUSTSTORE_PASSWORD=none
-#
-# You do not need use SSL between agent and security admin tool, please leave these sample value as it is.
-#
-SSL_KEYSTORE_FILE_PATH=/etc/hadoop/conf/ranger-plugin-keystore.jks
-SSL_KEYSTORE_PASSWORD=myKeyFilePassword
-SSL_TRUSTSTORE_FILE_PATH=/etc/hadoop/conf/ranger-plugin-truststore.jks
-SSL_TRUSTSTORE_PASSWORD=changeit
-
-#
-# Custom component user
-# CUSTOM_COMPONENT_USER=<custom-user>
-# keep blank if component user is default
-CUSTOM_USER=elasticsearch
-
-
-#
-# Custom component group
-# CUSTOM_COMPONENT_GROUP=<custom-group>
-# keep blank if component group is default
-CUSTOM_GROUP=hadoop
diff --git a/plugin-elasticsearch/src/main/java/org/apache/ranger/authorization/elasticsearch/authorizer/RangerElasticsearchAuditHandler.java b/plugin-elasticsearch/src/main/java/org/apache/ranger/authorization/elasticsearch/authorizer/RangerElasticsearchAuditHandler.java
deleted file mode 100644
index 37ac800ae..000000000
--- a/plugin-elasticsearch/src/main/java/org/apache/ranger/authorization/elasticsearch/authorizer/RangerElasticsearchAuditHandler.java
+++ /dev/null
@@ -1,69 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.apache.ranger.authorization.elasticsearch.authorizer;
-
-import org.apache.hadoop.conf.Configuration;
-import org.apache.ranger.audit.model.AuthzAuditEvent;
-import org.apache.ranger.plugin.audit.RangerMultiResourceAuditHandler;
-import org.apache.ranger.plugin.policyengine.RangerAccessRequest;
-import org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl;
-import org.apache.ranger.plugin.policyengine.RangerAccessResult;
-
-import java.util.Arrays;
-import java.util.List;
-
-public class RangerElasticsearchAuditHandler extends RangerMultiResourceAuditHandler {
-	private static final String PROP_ES_PLUGIN_AUDIT_EXCLUDED_USERS = "ranger.elasticsearch.plugin.audit.excluded.users";
-	private static final String PROP_ES_PLUGIN_AUDIT_INDEX = "xasecure.audit.destination.elasticsearch.index";
-
-	private String indexName = "ranger_audits";
-	private String esUser = "elasticsearch";
-	private List<String> excludeUsers = null;
-	private AuthzAuditEvent auditEvent = null;
-
-	public RangerElasticsearchAuditHandler(Configuration config) {
-		String excludeUserList = config.get(PROP_ES_PLUGIN_AUDIT_EXCLUDED_USERS, esUser);
-		excludeUsers = Arrays.asList(excludeUserList.split(","));
-		indexName = config.get(PROP_ES_PLUGIN_AUDIT_INDEX, indexName);
-	}
-
-	@Override
-	public void processResult(RangerAccessResult result) {
-		// We don't audit "allowed" operation for user "elasticsearch" on index "ranger_audits" to avoid recursive
-		// logging due to updated of ranger_audits index by elasticsearch plugin's audit creation.
-		if (!isAuditingNeeded(result)) {
-			return;
-		}
-		auditEvent = super.getAuthzEvents(result);
-		super.logAuthzAudit(auditEvent);
-	}
-
-	private boolean isAuditingNeeded(final RangerAccessResult result) {
-		boolean ret = true;
-		boolean isAllowed = result.getIsAllowed();
-		RangerAccessRequest request = result.getAccessRequest();
-		RangerAccessResourceImpl resource = (RangerAccessResourceImpl) request.getResource();
-		String resourceName = (String) resource.getValue("index");
-		String requestUser = request.getUser();
-		if (resourceName != null && resourceName.equals(indexName) && excludeUsers.contains(requestUser) && isAllowed) {
-			ret = false;
-		}
-		return ret;
-	}
-}
diff --git a/plugin-elasticsearch/src/main/java/org/apache/ranger/authorization/elasticsearch/authorizer/RangerElasticsearchAuthorizer.java b/plugin-elasticsearch/src/main/java/org/apache/ranger/authorization/elasticsearch/authorizer/RangerElasticsearchAuthorizer.java
deleted file mode 100644
index a09319f63..000000000
--- a/plugin-elasticsearch/src/main/java/org/apache/ranger/authorization/elasticsearch/authorizer/RangerElasticsearchAuthorizer.java
+++ /dev/null
@@ -1,149 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.ranger.authorization.elasticsearch.authorizer;
-
-import java.util.ArrayList;
-import java.util.Date;
-import java.util.List;
-
-import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
-import org.apache.ranger.audit.provider.MiscUtil;
-import org.apache.ranger.plugin.policyengine.RangerAccessRequestImpl;
-import org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl;
-import org.apache.ranger.plugin.policyengine.RangerAccessResult;
-import org.apache.ranger.plugin.service.RangerBasePlugin;
-import org.apache.ranger.services.elasticsearch.client.ElasticsearchResourceMgr;
-import org.apache.ranger.services.elasticsearch.privilege.IndexPrivilegeUtils;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import com.google.common.collect.Sets;
-
-public class RangerElasticsearchAuthorizer implements RangerElasticsearchAccessControl {
-
-	private static final Logger LOG = LoggerFactory.getLogger(RangerElasticsearchAuthorizer.class);
-
-	private static volatile RangerElasticsearchInnerPlugin elasticsearchPlugin = null;
-
-	public RangerElasticsearchAuthorizer() {
-		if (LOG.isDebugEnabled()) {
-			LOG.debug("==> RangerElasticsearchAuthorizer.RangerElasticsearchAuthorizer()");
-		}
-
-		this.init();
-
-		if (LOG.isDebugEnabled()) {
-			LOG.debug("<== RangerElasticsearchAuthorizer.RangerElasticsearchAuthorizer()");
-		}
-	}
-
-	public void init() {
-		if (LOG.isDebugEnabled()) {
-			LOG.debug("==> RangerElasticsearchAuthorizer.init()");
-		}
-
-		RangerElasticsearchInnerPlugin plugin = elasticsearchPlugin;
-
-		if (plugin == null) {
-			synchronized (RangerElasticsearchAuthorizer.class) {
-				plugin = elasticsearchPlugin;
-
-				if (plugin == null) {
-					plugin = new RangerElasticsearchInnerPlugin();
-					plugin.init();
-					elasticsearchPlugin = plugin;
-				}
-			}
-		}
-
-		if (LOG.isDebugEnabled()) {
-			LOG.debug("<== RangerElasticsearchAuthorizer.init()");
-		}
-	}
-
-	@Override
-	public boolean checkPermission(String user, List<String> groups, String index, String action,
-			String clientIPAddress) {
-		if (LOG.isDebugEnabled()) {
-			LOG.debug("==> RangerElasticsearchAuthorizer.checkPermission( user=" + user + ", groups=" + groups
-					+ ", index=" + index + ", action=" + action + ", clientIPAddress=" + clientIPAddress + ")");
-		}
-
-		boolean ret = false;
-
-		if (elasticsearchPlugin != null) {
-			if (null == groups) {
-				groups = new ArrayList <>(MiscUtil.getGroupsForRequestUser(user));
-			}
-			String privilege = IndexPrivilegeUtils.getPrivilegeFromAction(action);
-			RangerElasticsearchAccessRequest request = new RangerElasticsearchAccessRequest(user, groups, index,
-					privilege, clientIPAddress);
-
-			RangerAccessResult result = elasticsearchPlugin.isAccessAllowed(request);
-			if (result != null && result.getIsAllowed()) {
-				ret = true;
-			}
-		}
-
-		if (LOG.isDebugEnabled()) {
-			LOG.debug("<== RangerElasticsearchAuthorizer.checkPermission(): result=" + ret);
-		}
-
-		return ret;
-	}
-}
-
-class RangerElasticsearchInnerPlugin extends RangerBasePlugin {
-	public RangerElasticsearchInnerPlugin() {
-		super("elasticsearch", "elasticsearch");
-	}
-
-	@Override
-	public void init() {
-		super.init();
-
-		RangerElasticsearchAuditHandler auditHandler = new RangerElasticsearchAuditHandler(getConfig());
-
-		super.setResultProcessor(auditHandler);
-	}
-}
-
-class RangerElasticsearchResource extends RangerAccessResourceImpl {
-	public RangerElasticsearchResource(String index) {
-		if (StringUtils.isEmpty(index)) {
-			index = "*";
-		}
-		setValue(ElasticsearchResourceMgr.INDEX, index);
-	}
-}
-
-class RangerElasticsearchAccessRequest extends RangerAccessRequestImpl {
-	public RangerElasticsearchAccessRequest(String user, List<String> groups, String index, String privilege,
-			String clientIPAddress) {
-		super.setUser(user);
-		if (CollectionUtils.isNotEmpty(groups)) {
-			super.setUserGroups(Sets.newHashSet(groups));
-		}
-		super.setResource(new RangerElasticsearchResource(index));
-		super.setAccessType(privilege);
-		super.setAction(privilege);
-		super.setClientIPAddress(clientIPAddress);
-		super.setAccessTime(new Date());
-	}
-}
diff --git a/plugin-elasticsearch/src/main/java/org/apache/ranger/services/elasticsearch/RangerServiceElasticsearch.java b/plugin-elasticsearch/src/main/java/org/apache/ranger/services/elasticsearch/RangerServiceElasticsearch.java
deleted file mode 100644
index a8953e1e7..000000000
--- a/plugin-elasticsearch/src/main/java/org/apache/ranger/services/elasticsearch/RangerServiceElasticsearch.java
+++ /dev/null
@@ -1,120 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.ranger.services.elasticsearch;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import org.apache.commons.lang.StringUtils;
-import org.apache.ranger.plugin.model.RangerPolicy;
-import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItem;
-import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItemAccess;
-import org.slf4j.Logger;
-import org.apache.ranger.plugin.model.RangerService;
-import org.apache.ranger.plugin.model.RangerServiceDef;
-import org.apache.ranger.plugin.service.RangerBaseService;
-import org.apache.ranger.plugin.service.ResourceLookupContext;
-import org.apache.ranger.services.elasticsearch.client.ElasticsearchResourceMgr;
-import org.slf4j.LoggerFactory;
-
-public class RangerServiceElasticsearch extends RangerBaseService {
-
-	private static final Logger LOG = LoggerFactory.getLogger(RangerServiceElasticsearch.class);
-	public static final String ACCESS_TYPE_READ  = "read";
-
-	public RangerServiceElasticsearch() {
-		super();
-	}
-
-	@Override
-	public void init(RangerServiceDef serviceDef, RangerService service) {
-		super.init(serviceDef, service);
-	}
-
-	@Override
-	public List<RangerPolicy> getDefaultRangerPolicies() throws Exception {
-		if (LOG.isDebugEnabled()) {
-			LOG.debug("==> RangerServiceElasticsearch.getDefaultRangerPolicies()");
-		}
-
-		List<RangerPolicy> ret = super.getDefaultRangerPolicies();
-		for (RangerPolicy defaultPolicy : ret) {
-			if (defaultPolicy.getName().contains("all") && StringUtils.isNotBlank(lookUpUser)) {
-				List<RangerPolicyItemAccess> accessListForLookupUser = new ArrayList<RangerPolicyItemAccess>();
-				accessListForLookupUser.add(new RangerPolicyItemAccess(ACCESS_TYPE_READ));
-				RangerPolicyItem policyItemForLookupUser = new RangerPolicyItem();
-				policyItemForLookupUser.setUsers(Collections.singletonList(lookUpUser));
-				policyItemForLookupUser.setAccesses(accessListForLookupUser);
-				policyItemForLookupUser.setDelegateAdmin(false);
-				defaultPolicy.getPolicyItems().add(policyItemForLookupUser);
-			}
-		}
-
-		if (LOG.isDebugEnabled()) {
-			LOG.debug("<== RangerServiceElasticsearch.getDefaultRangerPolicies()");
-		}
-		return ret;
-	}
-
-	@Override
-	public Map<String, Object> validateConfig() throws Exception {
-		Map<String, Object> ret = new HashMap<String, Object>();
-		String serviceName = getServiceName();
-		if (LOG.isDebugEnabled()) {
-			LOG.debug("==> RangerServiceElasticsearch.validateConfig() service: " + serviceName);
-		}
-		if (configs != null) {
-			try {
-				ret = ElasticsearchResourceMgr.validateConfig(serviceName, configs);
-			} catch (Exception e) {
-				LOG.error("<== RangerServiceElasticsearch.validateConfig() error: " + e);
-				throw e;
-			}
-		}
-		if (LOG.isDebugEnabled()) {
-			LOG.debug("<== RangerServiceElasticsearch.validateConfig() result: " + ret);
-		}
-		return ret;
-	}
-
-	@Override
-	public List<String> lookupResource(ResourceLookupContext context) throws Exception {
-
-		List<String> ret = new ArrayList<String>();
-		String serviceName = getServiceName();
-		Map<String, String> configs = getConfigs();
-		if (LOG.isDebugEnabled()) {
-			LOG.debug("==> RangerServiceElasticsearch.lookupResource() context: " + context);
-		}
-		if (context != null) {
-			try {
-				ret = ElasticsearchResourceMgr.getElasticsearchResources(serviceName, configs, context);
-			} catch (Exception e) {
-				LOG.error("<==RangerServiceElasticsearch.lookupResource() error: " + e);
-				throw e;
-			}
-		}
-		if (LOG.isDebugEnabled()) {
-			LOG.debug("<== RangerServiceElasticsearch.lookupResource() result: " + ret);
-		}
-		return ret;
-	}
-}
diff --git a/plugin-elasticsearch/src/main/java/org/apache/ranger/services/elasticsearch/client/ElasticsearchClient.java b/plugin-elasticsearch/src/main/java/org/apache/ranger/services/elasticsearch/client/ElasticsearchClient.java
deleted file mode 100644
index 598dabd6b..000000000
--- a/plugin-elasticsearch/src/main/java/org/apache/ranger/services/elasticsearch/client/ElasticsearchClient.java
+++ /dev/null
@@ -1,278 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.apache.ranger.services.elasticsearch.client;
-
-import java.lang.reflect.Type;
-import java.security.PrivilegedAction;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
-import javax.security.auth.Subject;
-import javax.ws.rs.core.MediaType;
-
-import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.collections.MapUtils;
-import org.apache.commons.lang.ArrayUtils;
-import org.apache.commons.lang.StringUtils;
-import org.apache.http.HttpStatus;
-import org.apache.log4j.Logger;
-import org.apache.ranger.plugin.client.BaseClient;
-import org.apache.ranger.plugin.client.HadoopException;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.reflect.TypeToken;
-import com.sun.jersey.api.client.Client;
-import com.sun.jersey.api.client.ClientResponse;
-
-public class ElasticsearchClient extends BaseClient {
-
-	private static final Logger LOG = Logger.getLogger(ElasticsearchClient.class);
-
-	private static final String ELASTICSEARCH_INDEX_API_ENDPOINT = "/_all";
-
-	private String elasticsearchUrl;
-
-	private String userName;
-
-	public ElasticsearchClient(String serviceName, Map<String, String> configs) {
-
-		super(serviceName, configs, "elasticsearch-client");
-		this.elasticsearchUrl = configs.get("elasticsearch.url");
-		this.userName = configs.get("username");
-
-		if (StringUtils.isEmpty(this.elasticsearchUrl)) {
-			LOG.error("No value found for configuration 'elasticsearch.url'. Elasticsearch resource lookup will fail.");
-		}
-
-		if (StringUtils.isEmpty(this.userName)) {
-			LOG.error("No value found for configuration 'username'. Elasticsearch resource lookup will fail.");
-		}
-
-		if (LOG.isDebugEnabled()) {
-			LOG.debug("Elasticsearch client is build with url: [" + this.elasticsearchUrl + "], user: [" + this.userName
-					+ "].");
-		}
-	}
-
-	public List<String> getIndexList(final String indexMatching, final List<String> existingIndices) {
-		if (LOG.isDebugEnabled()) {
-			LOG.debug("Get elasticsearch index list for indexMatching: " + indexMatching + ", existingIndices: "
-					+ existingIndices);
-		}
-		Subject subj = getLoginSubject();
-		if (subj == null) {
-			return Collections.emptyList();
-		}
-
-		List<String> ret = Subject.doAs(subj, new PrivilegedAction<List<String>>() {
-
-			@Override
-			public List<String> run() {
-
-				String indexApi = null;
-				if (StringUtils.isNotEmpty(indexMatching)) {
-					indexApi = '/' + indexMatching;
-					if (!indexApi.endsWith("*")) {
-						indexApi += "*";
-					}
-				} else {
-					indexApi = ELASTICSEARCH_INDEX_API_ENDPOINT;
-				}
-				ClientResponse response = getClientResponse(elasticsearchUrl, indexApi, userName);
-
-				Map<String, Object> index2detailMap = getElasticsearchResourceResponse(response,
-						new TypeToken<HashMap<String, Object>>() {
-						}.getType());
-				if (MapUtils.isEmpty(index2detailMap)) {
-					return Collections.emptyList();
-				}
-
-				Set<String> indexResponses = index2detailMap.keySet();
-				if (CollectionUtils.isEmpty(indexResponses)) {
-					return Collections.emptyList();
-				}
-
-				return filterResourceFromResponse(indexMatching, existingIndices, new ArrayList<>(indexResponses));
-			}
-		});
-
-		if (LOG.isDebugEnabled()) {
-			LOG.debug("Get elasticsearch index list result: " + ret);
-		}
-		return ret;
-	}
-
-	private static ClientResponse getClientResponse(String elasticsearchUrl, String elasticsearchApi, String userName) {
-		String[] elasticsearchUrls = elasticsearchUrl.trim().split("[,;]");
-		if (ArrayUtils.isEmpty(elasticsearchUrls)) {
-			return null;
-		}
-
-		ClientResponse response = null;
-		Client client = Client.create();
-		for (String currentUrl : elasticsearchUrls) {
-			if (StringUtils.isBlank(currentUrl)) {
-				continue;
-			}
-
-			String url = currentUrl.trim() + elasticsearchApi;
-			try {
-				response = getClientResponse(url, client, userName);
-
-				if (response != null) {
-					if (response.getStatus() == HttpStatus.SC_OK) {
-						break;
-					} else {
-						response.close();
-					}
-				}
-			} catch (Throwable t) {
-				String msgDesc = "Exception while getting elasticsearch response, elasticsearchUrl: " + url;
-				LOG.error(msgDesc, t);
-			}
-		}
-		client.destroy();
-
-		return response;
-	}
-
-	private static ClientResponse getClientResponse(String url, Client client, String userName) {
-		if (LOG.isDebugEnabled()) {
-			LOG.debug("getClientResponse():calling " + url);
-		}
-
-		ClientResponse response = client.resource(url).accept(MediaType.APPLICATION_JSON).
-			header("userName", userName).get(ClientResponse.class);
-
-		if (response != null) {
-			if (LOG.isDebugEnabled()) {
-				LOG.debug("getClientResponse():response.getStatus()= " + response.getStatus());
-			}
-			if (response.getStatus() != HttpStatus.SC_OK) {
-				LOG.warn("getClientResponse():response.getStatus()= " + response.getStatus() + " for URL " + url
-						+ ", failed to get elasticsearch resource list, response= " + response.getEntity(String.class));
-			}
-		}
-		return response;
-	}
-
-	private <T> T getElasticsearchResourceResponse(ClientResponse response, Type type) {
-		T resource = null;
-		try {
-			if (response != null && response.getStatus() == HttpStatus.SC_OK) {
-				String jsonString = response.getEntity(String.class);
-				Gson gson = new GsonBuilder().setPrettyPrinting().create();
-
-				resource = gson.fromJson(jsonString, type);
-			} else {
-				String msgDesc = "Unable to get a valid response for " + "expected mime type : ["
-						+ MediaType.APPLICATION_JSON + "], elasticsearchUrl: " + elasticsearchUrl
-						+ " - got null response.";
-				LOG.error(msgDesc);
-				HadoopException hdpException = new HadoopException(msgDesc);
-				hdpException.generateResponseDataMap(false, msgDesc, msgDesc + DEFAULT_ERROR_MESSAGE, null, null);
-				throw hdpException;
-			}
-		} catch (HadoopException he) {
-			throw he;
-		} catch (Throwable t) {
-			String msgDesc = "Exception while getting elasticsearch resource response, elasticsearchUrl: "
-					+ elasticsearchUrl;
-			HadoopException hdpException = new HadoopException(msgDesc, t);
-
-			LOG.error(msgDesc, t);
-
-			hdpException.generateResponseDataMap(false, BaseClient.getMessage(t), msgDesc + DEFAULT_ERROR_MESSAGE, null,
-					null);
-			throw hdpException;
-
-		} finally {
-			if (response != null) {
-				response.close();
-			}
-		}
-		return resource;
-	}
-
-	private static List<String> filterResourceFromResponse(String resourceMatching, List<String> existingResources,
-			List<String> resourceResponses) {
-		List<String> resources = new ArrayList<String>();
-		for (String resourceResponse : resourceResponses) {
-			if (CollectionUtils.isNotEmpty(existingResources) && existingResources.contains(resourceResponse)) {
-				continue;
-			}
-			if (StringUtils.isEmpty(resourceMatching) || resourceMatching.startsWith("*")
-					|| resourceResponse.toLowerCase().startsWith(resourceMatching.toLowerCase())) {
-				if (LOG.isDebugEnabled()) {
-					LOG.debug("filterResourceFromResponse(): Adding elasticsearch resource " + resourceResponse);
-				}
-				resources.add(resourceResponse);
-			}
-		}
-		return resources;
-	}
-
-	public static Map<String, Object> connectionTest(String serviceName, Map<String, String> configs) {
-		ElasticsearchClient elasticsearchClient = getElasticsearchClient(serviceName, configs);
-		List<String> indexList = elasticsearchClient.getIndexList(null, null);
-
-		boolean connectivityStatus = false;
-		if (CollectionUtils.isNotEmpty(indexList)) {
-			if (LOG.isDebugEnabled()) {
-				LOG.debug("ConnectionTest list size " + indexList.size() + " elasticsearch indices.");
-			}
-			connectivityStatus = true;
-		}
-
-		Map<String, Object> responseData = new HashMap<String, Object>();
-		if (connectivityStatus) {
-			String successMsg = "ConnectionTest Successful.";
-			BaseClient.generateResponseDataMap(connectivityStatus, successMsg, successMsg, null, null, responseData);
-		} else {
-			String failureMsg = "Unable to retrieve any elasticsearch indices using given parameters.";
-			BaseClient.generateResponseDataMap(connectivityStatus, failureMsg, failureMsg + DEFAULT_ERROR_MESSAGE, null,
-					null, responseData);
-		}
-
-		return responseData;
-	}
-
-	public static ElasticsearchClient getElasticsearchClient(String serviceName, Map<String, String> configs) {
-		ElasticsearchClient elasticsearchClient = null;
-		if (LOG.isDebugEnabled()) {
-			LOG.debug("Getting elasticsearchClient for datasource: " + serviceName);
-		}
-		if (MapUtils.isEmpty(configs)) {
-			String msgDesc = "Could not connect elasticsearch as connection configMap is empty.";
-			LOG.error(msgDesc);
-			HadoopException hdpException = new HadoopException(msgDesc);
-			hdpException.generateResponseDataMap(false, msgDesc, msgDesc + DEFAULT_ERROR_MESSAGE, null, null);
-			throw hdpException;
-		} else {
-			elasticsearchClient = new ElasticsearchClient(serviceName, configs);
-		}
-		return elasticsearchClient;
-	}
-}
diff --git a/plugin-elasticsearch/src/main/java/org/apache/ranger/services/elasticsearch/client/ElasticsearchResourceMgr.java b/plugin-elasticsearch/src/main/java/org/apache/ranger/services/elasticsearch/client/ElasticsearchResourceMgr.java
deleted file mode 100644
index d7980aaf1..000000000
--- a/plugin-elasticsearch/src/main/java/org/apache/ranger/services/elasticsearch/client/ElasticsearchResourceMgr.java
+++ /dev/null
@@ -1,102 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.apache.ranger.services.elasticsearch.client;
-
-import java.util.List;
-import java.util.Map;
-
-import org.apache.commons.collections.MapUtils;
-import org.apache.commons.lang.StringUtils;
-import org.apache.log4j.Logger;
-import org.apache.ranger.plugin.service.ResourceLookupContext;
-
-public class ElasticsearchResourceMgr {
-
-	public static final String INDEX = "index";
-
-	private static final Logger LOG = Logger.getLogger(ElasticsearchResourceMgr.class);
-
-	public static Map<String, Object> validateConfig(String serviceName, Map<String, String> configs) throws Exception {
-		Map<String, Object> ret = null;
-
-		if (LOG.isDebugEnabled()) {
-			LOG.debug("==> ElasticsearchResourceMgr.validateConfig() serviceName: " + serviceName + ", configs: "
-					+ configs);
-		}
-
-		try {
-			ret = ElasticsearchClient.connectionTest(serviceName, configs);
-		} catch (Exception e) {
-			LOG.error("<== ElasticsearchResourceMgr.validateConfig() error: " + e);
-			throw e;
-		}
-
-		if (LOG.isDebugEnabled()) {
-			LOG.debug("<== ElasticsearchResourceMgr.validateConfig() result: " + ret);
-		}
-		return ret;
-	}
-
-	public static List<String> getElasticsearchResources(String serviceName, Map<String, String> configs,
-			ResourceLookupContext context) {
-		String userInput = context.getUserInput();
-		String resource = context.getResourceName();
-		Map<String, List<String>> resourceMap = context.getResources();
-		if (LOG.isDebugEnabled()) {
-			LOG.debug("==> ElasticsearchResourceMgr.getElasticsearchResources()  userInput: " + userInput
-					+ ", resource: " + resource + ", resourceMap: " + resourceMap);
-		}
-
-		if (MapUtils.isEmpty(configs)) {
-			LOG.error("Connection config is empty!");
-			return null;
-		}
-
-		if (StringUtils.isEmpty(userInput)) {
-			LOG.warn("User input is empty, set default value : *");
-			userInput = "*";
-		}
-
-		final ElasticsearchClient elasticsearchClient = ElasticsearchClient.getElasticsearchClient(serviceName, configs);
-		if (elasticsearchClient == null) {
-			LOG.error("Failed to getElasticsearchResources!");
-			return null;
-		}
-
-		List<String> resultList = null;
-
-		if (StringUtils.isNotEmpty(resource)) {
-			switch (resource) {
-			case INDEX:
-				List<String> existingConnectors = resourceMap.get(INDEX);
-				resultList = elasticsearchClient.getIndexList(userInput, existingConnectors);
-				break;
-			default:
-				break;
-			}
-		}
-
-		if (LOG.isDebugEnabled()) {
-			LOG.debug("<== ElasticsearchResourceMgr.getElasticsearchResources() result: " + resultList);
-		}
-		return resultList;
-	}
-
-}
diff --git a/plugin-elasticsearch/src/main/java/org/apache/ranger/services/elasticsearch/privilege/IndexPrivilege.java b/plugin-elasticsearch/src/main/java/org/apache/ranger/services/elasticsearch/privilege/IndexPrivilege.java
deleted file mode 100644
index 4691a5119..000000000
--- a/plugin-elasticsearch/src/main/java/org/apache/ranger/services/elasticsearch/privilege/IndexPrivilege.java
+++ /dev/null
@@ -1,55 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.ranger.services.elasticsearch.privilege;
-
-import java.util.List;
-
-public class IndexPrivilege {
-
-	private String privilege;
-
-	private List<String> actions;
-
-	public IndexPrivilege(String privilege, List<String> actions) {
-		super();
-		this.privilege = privilege;
-		this.actions = actions;
-	}
-
-	public String getPrivilege() {
-		return privilege;
-	}
-
-	public void setPrivilege(String privilege) {
-		this.privilege = privilege;
-	}
-
-	public List<String> getActions() {
-		return actions;
-	}
-
-	public void setActions(List<String> actions) {
-		this.actions = actions;
-	}
-
-	@Override
-	public String toString() {
-		return "IndexPrivilege [privilege=" + privilege + ", actions=" + actions + "]";
-	}
-
-}
\ No newline at end of file
diff --git a/plugin-elasticsearch/src/main/java/org/apache/ranger/services/elasticsearch/privilege/IndexPrivilegeUtils.java b/plugin-elasticsearch/src/main/java/org/apache/ranger/services/elasticsearch/privilege/IndexPrivilegeUtils.java
deleted file mode 100644
index 16e666a61..000000000
--- a/plugin-elasticsearch/src/main/java/org/apache/ranger/services/elasticsearch/privilege/IndexPrivilegeUtils.java
+++ /dev/null
@@ -1,102 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.ranger.services.elasticsearch.privilege;
-
-import java.util.Arrays;
-import java.util.LinkedList;
-import java.util.List;
-
-import org.apache.commons.lang.StringUtils;
-
-public class IndexPrivilegeUtils {
-	// These privileges have priority, should be matched in order
-	private static final List<IndexPrivilege> privileges = new LinkedList<>();
-
-	// External Privileges for users
-	public static final String ALL = "all";
-	public static final String MONITOR = "monitor";
-	public static final String MANAGE = "manage";
-	public static final String VIEW_INDEX_METADATA = "view_index_metadata";
-	public static final String READ = "read";
-	public static final String READ_CROSS_CLUSTER = "read_cross_cluster";
-	public static final String INDEX = "index";
-	public static final String CREATE = "create";
-	public static final String DELETE = "delete";
-	public static final String WRITE = "write";
-	public static final String DELETE_INDEX = "delete_index";
-	public static final String CREATE_INDEX = "create_index";
-
-	// Internal Privileges for Ranger authentication
-	public static final String INDICES_PUT = "indices_put";
-	public static final String INDICES_SEARCH_SHARDS = "indices_search_shards";
-	public static final String INDICES_BULK = "indices_bulk";
-	public static final String INDICES_INDEX = "indices_index";
-
-	static {
-		// First Priority
-		privileges.add(new IndexPrivilege(VIEW_INDEX_METADATA,
-				Arrays.asList("indices:admin/aliases/get", "indices:admin/aliases/exists", "indices:admin/get",
-						"indices:admin/exists", "indices:admin/mappings/fields/get", "indices:admin/mappings/get",
-						"indices:admin/types/exists", "indices:admin/validate/query", "indices:monitor/settings/get")));
-		privileges.add(new IndexPrivilege(READ, Arrays.asList("indices:data/read/")));
-		privileges.add(
-				new IndexPrivilege(READ_CROSS_CLUSTER, Arrays.asList("internal:transport/proxy/indices:data/read/")));
-		privileges.add(new IndexPrivilege(INDEX, Arrays.asList("indices:data/write/update")));
-
-		privileges.add(new IndexPrivilege(DELETE, Arrays.asList("indices:data/write/delete")));
-		privileges.add(new IndexPrivilege(DELETE_INDEX, Arrays.asList("indices:admin/delete")));
-		privileges.add(new IndexPrivilege(CREATE_INDEX, Arrays.asList("indices:admin/create")));
-
-		privileges.add(new IndexPrivilege(INDICES_PUT, Arrays.asList("indices:admin/mapping/put")));
-		privileges.add(new IndexPrivilege(INDICES_SEARCH_SHARDS, Arrays.asList("indices:admin/shards/search_shards")));
-		privileges.add(new IndexPrivilege(INDICES_BULK, Arrays.asList("indices:data/write/bulk")));
-		privileges.add(new IndexPrivilege(INDICES_INDEX, Arrays.asList("indices:data/write/index")));
-
-		// Second Priority
-		privileges.add(new IndexPrivilege(MONITOR, Arrays.asList("indices:monitor/")));
-		privileges.add(new IndexPrivilege(MANAGE, Arrays.asList("indices:admin/")));
-		privileges.add(new IndexPrivilege(WRITE, Arrays.asList("indices:data/write/")));
-
-		// Last Priority
-		privileges.add(
-				new IndexPrivilege(ALL, Arrays.asList("indices:", "internal:transport/proxy/indices:", "cluster:")));
-
-	}
-
-	/**
-	 * If action is empty or not matched, set default privilege "all".
-	 * @param action
-	 * @return privilege
-	 */
-	public static String getPrivilegeFromAction(String action) {
-		if (StringUtils.isEmpty(action)) {
-			return ALL;
-		}
-
-		for (IndexPrivilege privilege : privileges) {
-			// Get the privilege of matched action rule in order
-			for (String actionRule : privilege.getActions()) {
-				if (action.startsWith(actionRule)) {
-					return privilege.getPrivilege();
-				}
-			}
-		}
-
-		return ALL;
-	}
-}
diff --git a/pom.xml b/pom.xml
index 593e4e581..7063081b8 100644
--- a/pom.xml
+++ b/pom.xml
@@ -273,7 +273,6 @@
                 <module>plugin-sqoop</module>
                 <module>ranger-sqoop-plugin-shim</module>
                 <module>ranger-kylin-plugin-shim</module>
-                <module>plugin-elasticsearch</module>
                 <module>ranger-elasticsearch-plugin-shim</module>
                 <!--
                    'distro' should be the last module. If a module gets inserted after
@@ -415,20 +414,6 @@
                 <module>ranger-kylin-plugin-shim</module>
             </modules>
         </profile>
-        <profile>
-            <id>ranger-elasticsearch-plugin</id>
-            <modules>
-                <module>agents-audit</module>
-                <module>agents-common</module>
-                <module>agents-cred</module>
-                <module>agents-installer</module>
-                <module>credentialbuilder</module>
-                <module>ranger-plugin-classloader</module>
-                <module>ranger-util</module>
-                <module>plugin-elasticsearch</module>
-                <module>ranger-elasticsearch-plugin-shim</module>
-            </modules>
-        </profile>
         <profile>
             <id>linux</id>
             <activation>
@@ -479,7 +464,6 @@
                 <module>ranger-sqoop-plugin-shim</module>
                 <module>ranger-kylin-plugin-shim</module>
                 <module>ranger-presto-plugin-shim</module>
-                <module>plugin-elasticsearch</module>
                 <module>ranger-elasticsearch-plugin-shim</module>
                 <!--
                    'distro' should be the last module. If a module gets inserted after
@@ -552,7 +536,6 @@
                 <module>plugin-sqoop</module>
                 <module>ranger-sqoop-plugin-shim</module>
                 <module>ranger-kylin-plugin-shim</module>
-                <module>plugin-elasticsearch</module>
                 <module>ranger-elasticsearch-plugin-shim</module>
             </modules>
             <build>
