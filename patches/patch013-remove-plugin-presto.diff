diff --git a/plugin-presto/.gitignore b/plugin-presto/.gitignore
deleted file mode 100644
index b83d22266..000000000
--- a/plugin-presto/.gitignore
+++ /dev/null
@@ -1 +0,0 @@
-/target/
diff --git a/plugin-presto/conf/ranger-policymgr-ssl-changes.cfg b/plugin-presto/conf/ranger-policymgr-ssl-changes.cfg
deleted file mode 100644
index ae347e845..000000000
--- a/plugin-presto/conf/ranger-policymgr-ssl-changes.cfg
+++ /dev/null
@@ -1,21 +0,0 @@
-# Licensed to the Apache Software Foundation (ASF) under one or more
-# contributor license agreements.  See the NOTICE file distributed with
-# this work for additional information regarding copyright ownership.
-# The ASF licenses this file to You under the Apache License, Version 2.0
-# (the "License"); you may not use this file except in compliance with
-# the License.  You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# SSL Params
-#
-xasecure.policymgr.clientssl.keystore					 %SSL_KEYSTORE_FILE_PATH%						mod create-if-not-exists
-xasecure.policymgr.clientssl.keystore.credential.file	 jceks://file%CREDENTIAL_PROVIDER_FILE%			mod create-if-not-exists
-xasecure.policymgr.clientssl.truststore				     %SSL_TRUSTSTORE_FILE_PATH%						mod create-if-not-exists
-xasecure.policymgr.clientssl.truststore.credential.file  jceks://file%CREDENTIAL_PROVIDER_FILE%         mod create-if-not-exists
diff --git a/plugin-presto/conf/ranger-policymgr-ssl.xml b/plugin-presto/conf/ranger-policymgr-ssl.xml
deleted file mode 100644
index 5ac7cf14c..000000000
--- a/plugin-presto/conf/ranger-policymgr-ssl.xml
+++ /dev/null
@@ -1,49 +0,0 @@
-<?xml version="1.0"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
--->
-<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
-<configuration xmlns:xi="http://www.w3.org/2001/XInclude">
-    <!--  The following properties are used for 2-way SSL client server validation -->
-    <property>
-        <name>xasecure.policymgr.clientssl.keystore</name>
-        <value>prestoservice-clientcert.jks</value>
-        <description>
-            Java Keystore files
-        </description>
-    </property>
-    <property>
-        <name>xasecure.policymgr.clientssl.truststore</name>
-        <value>cacerts-xasecure.jks</value>
-        <description>
-            java truststore file
-        </description>
-    </property>
-    <property>
-        <name>xasecure.policymgr.clientssl.keystore.credential.file</name>
-        <value>jceks://file/tmp/keystore-prestoservice-ssl.jceks</value>
-        <description>
-            java  keystore credential file
-        </description>
-    </property>
-    <property>
-        <name>xasecure.policymgr.clientssl.truststore.credential.file</name>
-        <value>jceks://file/tmp/truststore-prestoservice-ssl.jceks</value>
-        <description>
-            java  truststore credential file
-        </description>
-    </property>
-</configuration>
diff --git a/plugin-presto/conf/ranger-presto-audit-changes.cfg b/plugin-presto/conf/ranger-presto-audit-changes.cfg
deleted file mode 100644
index dfd27f37c..000000000
--- a/plugin-presto/conf/ranger-presto-audit-changes.cfg
+++ /dev/null
@@ -1,68 +0,0 @@
-# Licensed to the Apache Software Foundation (ASF) under one or more
-# contributor license agreements.  See the NOTICE file distributed with
-# this work for additional information regarding copyright ownership.
-# The ASF licenses this file to You under the Apache License, Version 2.0
-# (the "License"); you may not use this file except in compliance with
-# the License.  You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-xasecure.audit.hdfs.is.enabled                                     %XAAUDIT.HDFS.IS_ENABLED%                               mod create-if-not-exists
-xasecure.audit.hdfs.config.destination.directory                   %XAAUDIT.HDFS.DESTINATION_DIRECTORY%                    mod create-if-not-exists
-xasecure.audit.hdfs.config.destination.file                        %XAAUDIT.HDFS.DESTINTATION_FILE%                        mod create-if-not-exists
-xasecure.audit.hdfs.config.destination.flush.interval.seconds      %XAAUDIT.HDFS.DESTINTATION_FLUSH_INTERVAL_SECONDS%      mod create-if-not-exists
-xasecure.audit.hdfs.config.destination.rollover.interval.seconds   %XAAUDIT.HDFS.DESTINTATION_ROLLOVER_INTERVAL_SECONDS%   mod create-if-not-exists
-xasecure.audit.hdfs.config.destination.open.retry.interval.seconds %XAAUDIT.HDFS.DESTINTATION_OPEN_RETRY_INTERVAL_SECONDS% mod create-if-not-exists
-xasecure.audit.hdfs.config.local.buffer.directory                  %XAAUDIT.HDFS.LOCAL_BUFFER_DIRECTORY%                   mod create-if-not-exists
-xasecure.audit.hdfs.config.local.buffer.file                       %XAAUDIT.HDFS.LOCAL_BUFFER_FILE%                        mod create-if-not-exists
-xasecure.audit.hdfs.config.local.buffer.flush.interval.seconds     %XAAUDIT.HDFS.LOCAL_BUFFER_FLUSH_INTERVAL_SECONDS%      mod create-if-not-exists
-xasecure.audit.hdfs.config.local.buffer.rollover.interval.seconds  %XAAUDIT.HDFS.LOCAL_BUFFER_ROLLOVER_INTERVAL_SECONDS%   mod create-if-not-exists
-xasecure.audit.hdfs.config.local.archive.directory                 %XAAUDIT.HDFS.LOCAL_ARCHIVE_DIRECTORY%                  mod create-if-not-exists
-xasecure.audit.hdfs.config.local.archive.max.file.count            %XAAUDIT.HDFS.LOCAL_ARCHIVE_MAX_FILE_COUNT%             mod create-if-not-exists
-
-xasecure.audit.solr.is.enabled                                    %XAAUDIT.SOLR.IS_ENABLED%                               mod create-if-not-exists
-xasecure.audit.solr.solr_url                                      %XAAUDIT.SOLR.SOLR_URL%                                 mod create-if-not-exists
-
-#V3 configuration
-xasecure.audit.provider.summary.enabled				  %XAAUDIT.SUMMARY.ENABLE%				mod create-if-not-exists
-
-xasecure.audit.destination.solr                                    %XAAUDIT.SOLR.ENABLE%                               mod create-if-not-exists
-xasecure.audit.destination.solr.urls                               %XAAUDIT.SOLR.URL%                                 mod create-if-not-exists
-xasecure.audit.destination.solr.user %XAAUDIT.SOLR.USER% mod create-if-not-exists
-xasecure.audit.destination.solr.password %XAAUDIT.SOLR.PASSWORD% mod create-if-not-exists
-xasecure.audit.destination.solr.zookeepers                         %XAAUDIT.SOLR.ZOOKEEPER%                           mod create-if-not-exists
-xasecure.audit.destination.solr.batch.filespool.dir                %XAAUDIT.SOLR.FILE_SPOOL_DIR%                      mod create-if-not-exists
-
-xasecure.audit.destination.elasticsearch                                    %XAAUDIT.ELASTICSEARCH.ENABLE%                              mod create-if-not-exists
-xasecure.audit.destination.elasticsearch.urls                               %XAAUDIT.ELASTICSEARCH.URL%                                 mod create-if-not-exists
-xasecure.audit.destination.elasticsearch.user 							   %XAAUDIT.ELASTICSEARCH.USER% 								  mod create-if-not-exists
-xasecure.audit.destination.elasticsearch.password 						   %XAAUDIT.ELASTICSEARCH.PASSWORD% 							  mod create-if-not-exists
-xasecure.audit.destination.elasticsearch.index 						   %XAAUDIT.ELASTICSEARCH.INDEX% 							  mod create-if-not-exists
-xasecure.audit.destination.elasticsearch.port 						   %XAAUDIT.ELASTICSEARCH.PORT% 							  mod create-if-not-exists
-xasecure.audit.destination.elasticsearch.protocol 						   %XAAUDIT.ELASTICSEARCH.PROTOCOL% 							  mod create-if-not-exists
-
-xasecure.audit.destination.hdfs					   %XAAUDIT.HDFS.ENABLE%                      mod create-if-not-exists
-xasecure.audit.destination.hdfs.batch.filespool.dir                %XAAUDIT.HDFS.FILE_SPOOL_DIR%                      mod create-if-not-exists
-xasecure.audit.destination.hdfs.dir                		   %XAAUDIT.HDFS.HDFS_DIR%                      mod create-if-not-exists
-
-AZURE.ACCOUNTNAME                                                                                                 %XAAUDIT.HDFS.AZURE_ACCOUNTNAME%            var
-xasecure.audit.destination.hdfs.config.fs.azure.shellkeyprovider.script                                           %XAAUDIT.HDFS.AZURE_SHELL_KEY_PROVIDER%     mod         create-if-not-exists
-xasecure.audit.destination.hdfs.config.fs.azure.account.key.%AZURE.ACCOUNTNAME%.blob.core.windows.net             %XAAUDIT.HDFS.AZURE_ACCOUNTKEY%             mod         create-if-not-exists
-xasecure.audit.destination.hdfs.config.fs.azure.account.keyprovider.%AZURE.ACCOUNTNAME%.blob.core.windows.net     %XAAUDIT.HDFS.AZURE_ACCOUNTKEY_PROVIDER%    mod         create-if-not-exists
-
-#xasecure.audit.destination.file					   %XAAUDIT.FILE.ENABLE%                      mod create-if-not-exists
-#xasecure.audit.destination.file.dir                		   %XAAUDIT.FILE.DIR%                      mod create-if-not-exists
-
-#log4j configuration
-xasecure.audit.log4j.is.enabled                %XAAUDIT.LOG4J.ENABLE%                      mod create-if-not-exists
-xasecure.audit.log4j.is.async                %XAAUDIT.LOG4J.IS_ASYNC%                      mod create-if-not-exists
-xasecure.audit.log4j.async.max.queue.size                %XAAUDIT.LOG4J.ASYNC.MAX.QUEUE.SIZE%                      mod create-if-not-exists
-xasecure.audit.log4j.async.max.flush.interval.ms                %XAAUDIT.LOG4J.ASYNC.MAX.FLUSH.INTERVAL.MS%                      mod create-if-not-exists
-xasecure.audit.destination.log4j                %XAAUDIT.LOG4J.DESTINATION.LOG4J%                      mod create-if-not-exists
-xasecure.audit.destination.log4j.logger                %XAAUDIT.LOG4J.DESTINATION.LOG4J.LOGGER%                      mod create-if-not-exists
diff --git a/plugin-presto/conf/ranger-presto-audit.xml b/plugin-presto/conf/ranger-presto-audit.xml
deleted file mode 100644
index d335974f2..000000000
--- a/plugin-presto/conf/ranger-presto-audit.xml
+++ /dev/null
@@ -1,216 +0,0 @@
-<?xml version="1.0"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
--->
-<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
-<configuration xmlns:xi="http://www.w3.org/2001/XInclude">
-    <property>
-        <name>xasecure.audit.is.enabled</name>
-        <value>true</value>
-    </property>
-
-    <!-- HDFS audit provider configuration -->
-    <property>
-        <name>xasecure.audit.hdfs.is.enabled</name>
-        <value>false</value>
-    </property>
-
-    <property>
-        <name>xasecure.audit.hdfs.is.async</name>
-        <value>true</value>
-    </property>
-
-    <property>
-        <name>xasecure.audit.hdfs.async.max.queue.size</name>
-        <value>1048576</value>
-    </property>
-
-    <property>
-        <name>xasecure.audit.hdfs.async.max.flush.interval.ms</name>
-        <value>30000</value>
-    </property>
-
-    <property>
-        <name>xasecure.audit.hdfs.config.encoding</name>
-        <value></value>
-    </property>
-
-    <property>
-        <name>xasecure.audit.hdfs.config.destination.directory</name>
-        <value>hdfs://NAMENODE_HOST:8020/ranger/audit/%app-type%/%time:yyyyMMdd%</value>
-    </property>
-
-    <property>
-        <name>xasecure.audit.hdfs.config.destination.file</name>
-        <value>%hostname%-audit.log</value>
-    </property>
-
-    <property>
-        <name>xasecure.audit.hdfs.config.destination.flush.interval.seconds</name>
-        <value>900</value>
-    </property>
-
-    <property>
-        <name>xasecure.audit.hdfs.config.destination.rollover.interval.seconds</name>
-        <value>86400</value>
-    </property>
-
-    <property>
-        <name>xasecure.audit.hdfs.config.destination.open.retry.interval.seconds</name>
-        <value>60</value>
-    </property>
-
-    <property>
-        <name>xasecure.audit.hdfs.config.local.buffer.directory</name>
-        <value>/var/log/presto/audit</value>
-    </property>
-
-    <property>
-        <name>xasecure.audit.hdfs.config.local.buffer.file</name>
-        <value>%time:yyyyMMdd-HHmm.ss%.log</value>
-    </property>
-
-    <property>
-        <name>xasecure.audit.hdfs.config.local.buffer.file.buffer.size.bytes</name>
-        <value>8192</value>
-    </property>
-
-    <property>
-        <name>xasecure.audit.hdfs.config.local.buffer.flush.interval.seconds</name>
-        <value>60</value>
-    </property>
-
-    <property>
-        <name>xasecure.audit.hdfs.config.local.buffer.rollover.interval.seconds</name>
-        <value>600</value>
-    </property>
-
-    <property>
-        <name>xasecure.audit.hdfs.config.local.archive.directory</name>
-        <value>/var/log/presto/audit/archive</value>
-    </property>
-
-    <property>
-        <name>xasecure.audit.hdfs.config.local.archive.max.file.count</name>
-        <value>10</value>
-    </property>
-
-    <!-- Audit to HDFS on Azure Datastore (WASB) requires v3 style settings.  Comment the above and uncomment only the
-    following to audit to Azure Blob Datastore via hdfs' WASB schema.
-
-    NOTE: If you specify one audit destination in v3 style then other destinations, if any, must also be specified in v3 style
-    ====
-
-    <property>
-        <name>xasecure.audit.destination.hdfs</name>
-        <value>enabled</value>
-    </property>
-
-    <property>
-        <name>xasecure.audit.destination.hdfs.dir</name>
-        <value>wasb://ranger-audit1@youraccount.blob.core.windows.net</value>
-    </property>
-
-    the following 3 correspond to the properties with similar name in core-site.xml, i.e.
-    - fs.azure.account.key.youraccount.blob.core.windows.net => xasecure.audit.destination.hdfs.config.fs.azure.account.key.youraccount.blob.core.windows.net and
-    - fs.azure.account.keyprovider.youraccount.blob.core.windows.net => xasecure.audit.destination.hdfs.config.fs.azure.account.keyprovider.youraccount.blob.core.windows.net,
-    - fs.azure.shellkeyprovider.script => xasecure.audit.destination.hdfs.config.fs.azure.shellkeyprovider.script,
-
-    <property>
-        <name>xasecure.audit.destination.hdfs.config.fs.azure.account.key.youraccount.blob.core.windows.net</name>
-        <value>YOUR ENCRYPTED ACCESS KEY</value>
-    </property>
-
-    <property>
-        <name>xasecure.audit.destination.hdfs.config.fs.azure.account.keyprovider.youraccount.blob.core.windows.net</name>
-        <value>org.apache.hadoop.fs.azure.ShellDecryptionKeyProvider</value>
-    </property>
-
-    <property>
-        <name>xasecure.audit.destination.hdfs.config.fs.azure.shellkeyprovider.script</name>
-        <value>/usr/lib/python2.7/dist-packages/hdinsight_common/decrypt.sh</value>
-    </property>
-    -->
-
-    <!-- Log4j audit provider configuration -->
-    <property>
-        <name>xasecure.audit.log4j.is.enabled</name>
-        <value>false</value>
-    </property>
-
-    <property>
-        <name>xasecure.audit.log4j.is.async</name>
-        <value>false</value>
-    </property>
-
-    <property>
-        <name>xasecure.audit.log4j.async.max.queue.size</name>
-        <value>10240</value>
-    </property>
-
-    <property>
-        <name>xasecure.audit.log4j.async.max.flush.interval.ms</name>
-        <value>30000</value>
-    </property>
-
-
-    <!-- presto audit provider configuration -->
-    <property>
-        <name>xasecure.audit.presto.is.enabled</name>
-        <value>false</value>
-    </property>
-
-    <property>
-        <name>xasecure.audit.presto.async.max.queue.size</name>
-        <value>1</value>
-    </property>
-
-    <property>
-        <name>xasecure.audit.presto.async.max.flush.interval.ms</name>
-        <value>1000</value>
-    </property>
-
-    <property>
-        <name>xasecure.audit.presto.broker_list</name>
-        <value>localhost:9092</value>
-    </property>
-
-    <property>
-        <name>xasecure.audit.presto.topic_name</name>
-        <value>ranger_audits</value>
-    </property>
-
-    <!-- Ranger audit provider configuration -->
-    <property>
-        <name>xasecure.audit.solr.is.enabled</name>
-        <value>false</value>
-    </property>
-
-    <property>
-        <name>xasecure.audit.solr.async.max.queue.size</name>
-        <value>1</value>
-    </property>
-
-    <property>
-        <name>xasecure.audit.solr.async.max.flush.interval.ms</name>
-        <value>1000</value>
-    </property>
-
-    <property>
-        <name>xasecure.audit.solr.solr_url</name>
-        <value>http://localhost:6083/solr/ranger_audits</value>
-    </property>
-</configuration>
diff --git a/plugin-presto/conf/ranger-presto-security-changes.cfg b/plugin-presto/conf/ranger-presto-security-changes.cfg
deleted file mode 100644
index 5a89cfa2d..000000000
--- a/plugin-presto/conf/ranger-presto-security-changes.cfg
+++ /dev/null
@@ -1,28 +0,0 @@
-# Licensed to the Apache Software Foundation (ASF) under one or more
-# contributor license agreements.  See the NOTICE file distributed with
-# this work for additional information regarding copyright ownership.
-# The ASF licenses this file to You under the Apache License, Version 2.0
-# (the "License"); you may not use this file except in compliance with
-# the License.  You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# Change the original policy parameter to work with policy manager based.
-#
-#
-ranger.plugin.presto.service.name %REPOSITORY_NAME% mod create-if-not-exists
-
-ranger.plugin.presto.policy.source.impl org.apache.ranger.admin.client.RangerAdminRESTClient mod create-if-not-exists
-
-ranger.plugin.presto.policy.rest.url                %POLICY_MGR_URL%                          mod create-if-not-exists
-ranger.plugin.presto.policy.rest.ssl.config.file    %COMPONENT_INSTALL_DIR_NAME%/etc/ranger-policymgr-ssl.xml mod create-if-not-exists
-ranger.plugin.presto.policy.pollIntervalMs          30000                                     mod create-if-not-exists
-ranger.plugin.presto.policy.cache.dir               %POLICY_CACHE_FILE_PATH%                  mod create-if-not-exists
-ranger.plugin.presto.policy.rest.client.connection.timeoutMs 	  120000					    mod create-if-not-exists
-ranger.plugin.presto.policy.rest.client.read.timeoutMs	   	  30000					        mod create-if-not-exists
\ No newline at end of file
diff --git a/plugin-presto/conf/ranger-presto-security.xml b/plugin-presto/conf/ranger-presto-security.xml
deleted file mode 100644
index 9feae81a6..000000000
--- a/plugin-presto/conf/ranger-presto-security.xml
+++ /dev/null
@@ -1,74 +0,0 @@
-<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
--->
-<configuration>
-  <property>
-    <name>ranger.plugin.presto.service.name</name>
-    <value>prestoservice</value>
-    <description>
-      Name of the Ranger service containing policies for this Presto instance
-    </description>
-  </property>
-
-  <property>
-    <name>ranger.plugin.presto.policy.source.impl</name>
-    <value>org.apache.ranger.admin.client.RangerAdminRESTClient</value>
-    <description>
-      Class to retrieve policies from the source
-    </description>
-  </property>
-
-  <property>
-    <name>ranger.plugin.presto.policy.rest.url</name>
-    <value>http://localhost:6080</value>
-    <description>
-      URL to Ranger Admin
-    </description>
-  </property>
-
-  <property>
-    <name>ranger.plugin.presto.policy.rest.ssl.config.file</name>
-    <value>/etc/hadoop/conf/ranger-policymgr-ssl.xml</value>
-    <description>
-      Path to the file containing SSL details to contact Ranger Admin
-    </description>
-  </property>
-
-  <property>
-    <name>ranger.plugin.presto.policy.pollIntervalMs</name>
-    <value>30000</value>
-    <description>
-      How often to poll for changes in policies?
-    </description>
-  </property>
-
-  <property>
-    <name>ranger.plugin.presto.policy.rest.client.connection.timeoutMs</name>
-    <value>30000</value>
-    <description>
-      S3 Plugin RangerRestClient Connection Timeout in Milli Seconds
-    </description>
-  </property>
-
-  <property>
-    <name>ranger.plugin.presto.policy.rest.client.read.timeoutMs</name>
-    <value>30000</value>
-    <description>
-      S3 Plugin RangerRestClient read Timeout in Milli Seconds
-    </description>
-  </property>
-</configuration>
diff --git a/plugin-presto/pom.xml b/plugin-presto/pom.xml
deleted file mode 100644
index 60d7f829a..000000000
--- a/plugin-presto/pom.xml
+++ /dev/null
@@ -1,81 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
--->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-    <modelVersion>4.0.0</modelVersion>
-    <artifactId>ranger-presto-plugin</artifactId>
-    <name>Presto Security Plugin</name>
-    <description>Presto Security Plugin</description>
-    <packaging>jar</packaging>
-    <properties>
-        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-    </properties>
-    <parent>
-        <groupId>org.apache.ranger</groupId>
-        <artifactId>ranger</artifactId>
-        <version>2.2.0</version>
-        <relativePath>..</relativePath>
-    </parent>
-    <dependencies>
-        <dependency>
-            <groupId>io.prestosql</groupId>
-            <artifactId>presto-spi</artifactId>
-            <version>${presto.version}</version>
-        </dependency>
-        <dependency>
-            <groupId>io.prestosql</groupId>
-            <artifactId>presto-jdbc</artifactId>
-            <version>${presto.version}</version>
-        </dependency>
-        <dependency>
-            <groupId>org.apache.httpcomponents</groupId>
-            <artifactId>httpcore</artifactId>
-            <version>${httpcomponents.httpcore.version}</version>
-        </dependency>
-        <dependency>
-            <groupId>org.apache.zookeeper</groupId>
-            <artifactId>zookeeper</artifactId>
-            <version>${zookeeper.version}</version>
-        </dependency>
-        <dependency>
-            <groupId>org.apache.ranger</groupId>
-            <artifactId>ranger-plugins-common</artifactId>
-            <version>${project.version}</version>
-        </dependency>
-        <dependency>
-            <groupId>org.apache.ranger</groupId>
-            <artifactId>ranger-plugins-audit</artifactId>
-            <version>${project.version}</version>
-        </dependency>
-        <dependency>
-            <groupId>junit</groupId>
-            <artifactId>junit</artifactId>
-        </dependency>
-    </dependencies>
-    <build>
-        <testResources>
-            <testResource>
-                <directory>src/test/resources</directory>
-                <includes>
-                    <include>**/*</include>
-                </includes>
-                <filtering>true</filtering>
-            </testResource>
-        </testResources>
-    </build>
-</project>
diff --git a/plugin-presto/scripts/install.properties b/plugin-presto/scripts/install.properties
deleted file mode 100644
index 956533571..000000000
--- a/plugin-presto/scripts/install.properties
+++ /dev/null
@@ -1,164 +0,0 @@
-# Licensed to the Apache Software Foundation (ASF) under one or more
-# contributor license agreements.  See the NOTICE file distributed with
-# this work for additional information regarding copyright ownership.
-# The ASF licenses this file to You under the Apache License, Version 2.0
-# (the "License"); you may not use this file except in compliance with
-# the License.  You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-#
-# Location of Policy Manager URL
-#
-# Example:
-# POLICY_MGR_URL=http://policymanager.xasecure.net:6080
-#
-POLICY_MGR_URL=
-
-#
-# This is the repository name created within policy manager
-#
-# Example:
-# REPOSITORY_NAME=prestodev
-#
-REPOSITORY_NAME=
-
-#
-# Name of the directory where the component's lib and conf directory exist.
-# This location should be relative to the parent of the directory containing
-# the plugin installation files.
-#
-COMPONENT_INSTALL_DIR_NAME=../presto
-
-# Enable audit logs to Solr
-#Example
-#XAAUDIT.SOLR.ENABLE=true
-#XAAUDIT.SOLR.URL=http://localhost:6083/solr/ranger_audits
-#XAAUDIT.SOLR.ZOOKEEPER=
-#XAAUDIT.SOLR.FILE_SPOOL_DIR=/var/log/presto/audit/solr/spool
-
-XAAUDIT.SOLR.ENABLE=false
-XAAUDIT.SOLR.URL=NONE
-XAAUDIT.SOLR.USER=NONE
-XAAUDIT.SOLR.PASSWORD=NONE
-XAAUDIT.SOLR.ZOOKEEPER=NONE
-XAAUDIT.SOLR.FILE_SPOOL_DIR=/var/log/presto/audit/solr/spool
-
-# Enable audit logs to ElasticSearch
-#Example
-#XAAUDIT.ELASTICSEARCH.ENABLE=true
-#XAAUDIT.ELASTICSEARCH.URL=localhost
-#XAAUDIT.ELASTICSEARCH.INDEX=audit
-
-XAAUDIT.ELASTICSEARCH.ENABLE=false
-XAAUDIT.ELASTICSEARCH.URL=NONE
-XAAUDIT.ELASTICSEARCH.USER=NONE
-XAAUDIT.ELASTICSEARCH.PASSWORD=NONE
-XAAUDIT.ELASTICSEARCH.INDEX=NONE
-XAAUDIT.ELASTICSEARCH.PORT=NONE
-XAAUDIT.ELASTICSEARCH.PROTOCOL=NONE
-
-# Enable audit logs to HDFS
-#Example
-#XAAUDIT.HDFS.ENABLE=true
-#XAAUDIT.HDFS.HDFS_DIR=hdfs://node-1.example.com:8020/ranger/audit
-#  If using Azure Blob Storage
-#XAAUDIT.HDFS.HDFS_DIR=wasb[s]://<containername>@<accountname>.blob.core.windows.net/<path>
-#XAAUDIT.HDFS.HDFS_DIR=wasb://ranger_audit_container@my-azure-account.blob.core.windows.net/ranger/audit
-#XAAUDIT.HDFS.FILE_SPOOL_DIR=/var/log/presto/audit/hdfs/spool
-
-XAAUDIT.HDFS.ENABLE=false
-XAAUDIT.HDFS.HDFS_DIR=hdfs://__REPLACE__NAME_NODE_HOST:8020/ranger/audit
-XAAUDIT.HDFS.FILE_SPOOL_DIR=/var/log/presto/audit/hdfs/spool
-
-# Following additional propertis are needed When auditing to Azure Blob Storage via HDFS
-# Get these values from your /etc/hadoop/conf/core-site.xml
-#XAAUDIT.HDFS.HDFS_DIR=wasb[s]://<containername>@<accountname>.blob.core.windows.net/<path>
-XAAUDIT.HDFS.AZURE_ACCOUNTNAME=__REPLACE_AZURE_ACCOUNT_NAME
-XAAUDIT.HDFS.AZURE_ACCOUNTKEY=__REPLACE_AZURE_ACCOUNT_KEY
-XAAUDIT.HDFS.AZURE_SHELL_KEY_PROVIDER=__REPLACE_AZURE_SHELL_KEY_PROVIDER
-XAAUDIT.HDFS.AZURE_ACCOUNTKEY_PROVIDER=__REPLACE_AZURE_ACCOUNT_KEY_PROVIDER
-
-#Log4j Audit Provider
-XAAUDIT.LOG4J.ENABLE=false
-XAAUDIT.LOG4J.IS_ASYNC=false
-XAAUDIT.LOG4J.ASYNC.MAX.QUEUE.SIZE=10240
-XAAUDIT.LOG4J.ASYNC.MAX.FLUSH.INTERVAL.MS=30000
-XAAUDIT.LOG4J.DESTINATION.LOG4J=true
-XAAUDIT.LOG4J.DESTINATION.LOG4J.LOGGER=xaaudit
-
-# End of V3 properties
-
-
-#
-#  Audit to HDFS Configuration
-#
-# If XAAUDIT.HDFS.IS_ENABLED is set to true, please replace tokens
-# that start with __REPLACE__ with appropriate values
-#  XAAUDIT.HDFS.IS_ENABLED=true
-#  XAAUDIT.HDFS.DESTINATION_DIRECTORY=hdfs://__REPLACE__NAME_NODE_HOST:8020/ranger/audit/%app-type%/%time:yyyyMMdd%
-#  XAAUDIT.HDFS.LOCAL_BUFFER_DIRECTORY=__REPLACE__LOG_DIR/presto/audit
-#  XAAUDIT.HDFS.LOCAL_ARCHIVE_DIRECTORY=__REPLACE__LOG_DIR/presto/audit/archive
-#
-# Example:
-#  XAAUDIT.HDFS.IS_ENABLED=true
-#  XAAUDIT.HDFS.DESTINATION_DIRECTORY=hdfs://namenode.example.com:8020/ranger/audit/%app-type%/%time:yyyyMMdd%
-#  XAAUDIT.HDFS.LOCAL_BUFFER_DIRECTORY=/var/log/presto/audit
-#  XAAUDIT.HDFS.LOCAL_ARCHIVE_DIRECTORY=/var/log/presto/audit/archive
-#
-XAAUDIT.HDFS.IS_ENABLED=false
-XAAUDIT.HDFS.DESTINATION_DIRECTORY=hdfs://__REPLACE__NAME_NODE_HOST:8020/ranger/audit/%app-type%/%time:yyyyMMdd%
-XAAUDIT.HDFS.LOCAL_BUFFER_DIRECTORY=__REPLACE__LOG_DIR/presto/audit
-XAAUDIT.HDFS.LOCAL_ARCHIVE_DIRECTORY=__REPLACE__LOG_DIR/presto/audit/archive
-
-XAAUDIT.HDFS.DESTINTATION_FILE=%hostname%-audit.log
-XAAUDIT.HDFS.DESTINTATION_FLUSH_INTERVAL_SECONDS=900
-XAAUDIT.HDFS.DESTINTATION_ROLLOVER_INTERVAL_SECONDS=86400
-XAAUDIT.HDFS.DESTINTATION_OPEN_RETRY_INTERVAL_SECONDS=60
-XAAUDIT.HDFS.LOCAL_BUFFER_FILE=%time:yyyyMMdd-HHmm.ss%.log
-XAAUDIT.HDFS.LOCAL_BUFFER_FLUSH_INTERVAL_SECONDS=60
-XAAUDIT.HDFS.LOCAL_BUFFER_ROLLOVER_INTERVAL_SECONDS=600
-XAAUDIT.HDFS.LOCAL_ARCHIVE_MAX_FILE_COUNT=10
-
-#Solr Audit Provider
-XAAUDIT.SOLR.IS_ENABLED=false
-XAAUDIT.SOLR.MAX_QUEUE_SIZE=1
-XAAUDIT.SOLR.MAX_FLUSH_INTERVAL_MS=1000
-XAAUDIT.SOLR.SOLR_URL=http://localhost:6083/solr/ranger_audits
-
-# End of V2 properties
-
-#
-# SSL Client Certificate Information
-#
-# Example:
-# SSL_KEYSTORE_FILE_PATH=/etc/hadoop/conf/ranger-plugin-keystore.jks
-# SSL_KEYSTORE_PASSWORD=none
-# SSL_TRUSTSTORE_FILE_PATH=/etc/hadoop/conf/ranger-plugin-truststore.jks
-# SSL_TRUSTSTORE_PASSWORD=none
-#
-# You do not need use SSL between agent and security admin tool, please leave these sample value as it is.
-#
-SSL_KEYSTORE_FILE_PATH=/etc/hadoop/conf/ranger-plugin-keystore.jks
-SSL_KEYSTORE_PASSWORD=myKeyFilePassword
-SSL_TRUSTSTORE_FILE_PATH=/etc/hadoop/conf/ranger-plugin-truststore.jks
-SSL_TRUSTSTORE_PASSWORD=changeit
-
-#
-# Custom component user
-# CUSTOM_COMPONENT_USER=<custom-user>
-# keep blank if component user is default
-CUSTOM_USER=presto
-
-
-#
-# Custom component group
-# CUSTOM_COMPONENT_GROUP=<custom-group>
-# keep blank if component group is default
-CUSTOM_GROUP=hadoop
diff --git a/plugin-presto/src/main/java/org/apache/ranger/authorization/presto/authorizer/RangerSystemAccessControl.java b/plugin-presto/src/main/java/org/apache/ranger/authorization/presto/authorizer/RangerSystemAccessControl.java
deleted file mode 100644
index f9f3e4fb5..000000000
--- a/plugin-presto/src/main/java/org/apache/ranger/authorization/presto/authorizer/RangerSystemAccessControl.java
+++ /dev/null
@@ -1,846 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.apache.ranger.authorization.presto.authorizer;
-
-import io.prestosql.spi.connector.CatalogSchemaName;
-import io.prestosql.spi.connector.CatalogSchemaRoutineName;
-import io.prestosql.spi.connector.CatalogSchemaTableName;
-import io.prestosql.spi.connector.ColumnMetadata;
-import io.prestosql.spi.connector.SchemaTableName;
-import io.prestosql.spi.security.AccessDeniedException;
-import io.prestosql.spi.security.PrestoPrincipal;
-import io.prestosql.spi.security.Privilege;
-import io.prestosql.spi.security.SystemAccessControl;
-import io.prestosql.spi.security.SystemSecurityContext;
-import io.prestosql.spi.security.ViewExpression;
-import io.prestosql.spi.type.Type;
-import org.apache.commons.lang.StringUtils;
-import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.security.UserGroupInformation;
-import org.apache.ranger.plugin.audit.RangerDefaultAuditHandler;
-import org.apache.ranger.plugin.model.RangerPolicy;
-import org.apache.ranger.plugin.model.RangerServiceDef;
-import org.apache.ranger.plugin.policyengine.RangerAccessRequestImpl;
-import org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl;
-import org.apache.ranger.plugin.policyengine.RangerAccessResult;
-import org.apache.ranger.plugin.service.RangerBasePlugin;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.io.IOException;
-import java.net.URL;
-import java.security.Principal;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Date;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Optional;
-import java.util.Set;
-
-import static java.util.Locale.ENGLISH;
-
-public class RangerSystemAccessControl
-  implements SystemAccessControl {
-  private static Logger LOG = LoggerFactory.getLogger(RangerSystemAccessControl.class);
-
-  final public static String RANGER_CONFIG_KEYTAB = "ranger.keytab";
-  final public static String RANGER_CONFIG_PRINCIPAL = "ranger.principal";
-  final public static String RANGER_CONFIG_USE_UGI = "ranger.use_ugi";
-  final public static String RANGER_CONFIG_HADOOP_CONFIG = "ranger.hadoop_config";
-  final public static String RANGER_PRESTO_DEFAULT_HADOOP_CONF = "presto-ranger-site.xml";
-  final public static String RANGER_PRESTO_SERVICETYPE = "presto";
-  final public static String RANGER_PRESTO_APPID = "presto";
-
-  final private RangerBasePlugin rangerPlugin;
-
-  private boolean useUgi = false;
-
-  public RangerSystemAccessControl(Map<String, String> config) {
-    super();
-
-    Configuration hadoopConf = new Configuration();
-    if (config.get(RANGER_CONFIG_HADOOP_CONFIG) != null) {
-      URL url =  hadoopConf.getResource(config.get(RANGER_CONFIG_HADOOP_CONFIG));
-      if (url == null) {
-        LOG.warn("Hadoop config " + config.get(RANGER_CONFIG_HADOOP_CONFIG) + " not found");
-      } else {
-        hadoopConf.addResource(url);
-      }
-    } else {
-      URL url = hadoopConf.getResource(RANGER_PRESTO_DEFAULT_HADOOP_CONF);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Trying to load Hadoop config from " + url + " (can be null)");
-      }
-      if (url != null) {
-        hadoopConf.addResource(url);
-      }
-    }
-    UserGroupInformation.setConfiguration(hadoopConf);
-
-    if (config.get(RANGER_CONFIG_KEYTAB) != null && config.get(RANGER_CONFIG_PRINCIPAL) != null) {
-      String keytab = config.get(RANGER_CONFIG_KEYTAB);
-      String principal = config.get(RANGER_CONFIG_PRINCIPAL);
-
-      LOG.info("Performing kerberos login with principal " + principal + " and keytab " + keytab);
-
-      try {
-        UserGroupInformation.loginUserFromKeytab(principal, keytab);
-      } catch (IOException ioe) {
-        LOG.error("Kerberos login failed", ioe);
-        throw new RuntimeException(ioe);
-      }
-    }
-
-    if (config.getOrDefault(RANGER_CONFIG_USE_UGI, "false").equalsIgnoreCase("true")) {
-      useUgi = true;
-    }
-
-    rangerPlugin = new RangerBasePlugin(RANGER_PRESTO_SERVICETYPE, RANGER_PRESTO_APPID);
-    rangerPlugin.init();
-    rangerPlugin.setResultProcessor(new RangerDefaultAuditHandler());
-  }
-
-
-  /** FILTERING AND DATA MASKING **/
-
-  private RangerAccessResult getDataMaskResult(RangerPrestoAccessRequest request) {
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("==> getDataMaskResult(request=" + request + ")");
-    }
-
-    RangerAccessResult ret = rangerPlugin.evalDataMaskPolicies(request, null);
-
-    if(LOG.isDebugEnabled()) {
-      LOG.debug("<== getDataMaskResult(request=" + request + "): ret=" + ret);
-    }
-
-    return ret;
-  }
-
-  private RangerAccessResult getRowFilterResult(RangerPrestoAccessRequest request) {
-    if(LOG.isDebugEnabled()) {
-      LOG.debug("==> getRowFilterResult(request=" + request + ")");
-    }
-
-    RangerAccessResult ret = rangerPlugin.evalRowFilterPolicies(request, null);
-
-    if(LOG.isDebugEnabled()) {
-      LOG.debug("<== getRowFilterResult(request=" + request + "): ret=" + ret);
-    }
-
-    return ret;
-  }
-
-  private boolean isDataMaskEnabled(RangerAccessResult result) {
-    return result != null && result.isMaskEnabled();
-  }
-
-  private boolean isRowFilterEnabled(RangerAccessResult result) {
-    return result != null && result.isRowFilterEnabled();
-  }
-
-  @Override
-  public Optional<ViewExpression> getRowFilter(SystemSecurityContext context, CatalogSchemaTableName tableName) {
-    RangerPrestoAccessRequest request = createAccessRequest(createResource(tableName), context, PrestoAccessType.SELECT);
-    RangerAccessResult result = getRowFilterResult(request);
-
-    ViewExpression viewExpression = null;
-    if (isRowFilterEnabled(result)) {
-      String filter = result.getFilterExpr();
-      viewExpression = new ViewExpression(
-        context.getIdentity().getUser(),
-        Optional.of(tableName.getCatalogName()),
-        Optional.of(tableName.getSchemaTableName().getSchemaName()),
-        filter
-      );
-    }
-    return Optional.ofNullable(viewExpression);
-  }
-
-  @Override
-  public Optional<ViewExpression> getColumnMask(SystemSecurityContext context, CatalogSchemaTableName tableName, String columnName, Type type) {
-    RangerPrestoAccessRequest request = createAccessRequest(
-      createResource(tableName.getCatalogName(), tableName.getSchemaTableName().getSchemaName(),
-        tableName.getSchemaTableName().getTableName(), Optional.of(columnName)),
-      context, PrestoAccessType.SELECT);
-    RangerAccessResult result = getDataMaskResult(request);
-
-    ViewExpression viewExpression = null;
-    if (isDataMaskEnabled(result)) {
-      String                maskType    = result.getMaskType();
-      RangerServiceDef.RangerDataMaskTypeDef maskTypeDef = result.getMaskTypeDef();
-      String transformer	= null;
-
-      if (maskTypeDef != null) {
-        transformer = maskTypeDef.getTransformer();
-      }
-
-      if(StringUtils.equalsIgnoreCase(maskType, RangerPolicy.MASK_TYPE_NULL)) {
-        transformer = "NULL";
-      } else if(StringUtils.equalsIgnoreCase(maskType, RangerPolicy.MASK_TYPE_CUSTOM)) {
-        String maskedValue = result.getMaskedValue();
-
-        if(maskedValue == null) {
-          transformer = "NULL";
-        } else {
-          transformer = maskedValue;
-        }
-      }
-
-      if(StringUtils.isNotEmpty(transformer)) {
-        transformer = transformer.replace("{col}", columnName).replace("{type}", type.getDisplayName());
-      }
-
-      viewExpression = new ViewExpression(
-        context.getIdentity().getUser(),
-        Optional.of(tableName.getCatalogName()),
-        Optional.of(tableName.getSchemaTableName().getSchemaName()),
-        transformer
-      );
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("getColumnMask: user: %s, catalog: %s, schema: %s, transformer: %s");
-      }
-
-    }
-
-    return Optional.ofNullable(viewExpression);
-  }
-
-  @Override
-  public Set<String> filterCatalogs(SystemSecurityContext context, Set<String> catalogs) {
-    LOG.debug("==> RangerSystemAccessControl.filterCatalogs("+ catalogs + ")");
-    Set<String> filteredCatalogs = new HashSet<>(catalogs.size());
-    for (String catalog: catalogs) {
-      if (hasPermission(createResource(catalog), context, PrestoAccessType.SELECT)) {
-        filteredCatalogs.add(catalog);
-      }
-    }
-    return filteredCatalogs;
-  }
-
-  @Override
-  public Set<String> filterSchemas(SystemSecurityContext context, String catalogName, Set<String> schemaNames) {
-    LOG.debug("==> RangerSystemAccessControl.filterSchemas(" + catalogName + ")");
-    Set<String> filteredSchemaNames = new HashSet<>(schemaNames.size());
-    for (String schemaName: schemaNames) {
-      if (hasPermission(createResource(catalogName, schemaName), context, PrestoAccessType.SELECT)) {
-        filteredSchemaNames.add(schemaName);
-      }
-    }
-    return filteredSchemaNames;
-  }
-
-  @Override
-  public Set<SchemaTableName> filterTables(SystemSecurityContext context, String catalogName, Set<SchemaTableName> tableNames) {
-    LOG.debug("==> RangerSystemAccessControl.filterTables(" + catalogName + ")");
-    Set<SchemaTableName> filteredTableNames = new HashSet<>(tableNames.size());
-    for (SchemaTableName tableName : tableNames) {
-      RangerPrestoResource res = createResource(catalogName, tableName.getSchemaName(), tableName.getTableName());
-      if (hasPermission(res, context, PrestoAccessType.SELECT)) {
-        filteredTableNames.add(tableName);
-      }
-    }
-    return filteredTableNames;
-  }
-
-  /** PERMISSION CHECKS ORDERED BY SYSTEM, CATALOG, SCHEMA, TABLE, VIEW, COLUMN, QUERY, FUNCTIONS, PROCEDURES **/
-
-  /** SYSTEM **/
-
-  @Override
-  public void checkCanSetSystemSessionProperty(SystemSecurityContext context, String propertyName) {
-    if (!hasPermission(createSystemPropertyResource(propertyName), context, PrestoAccessType.ALTER)) {
-      LOG.debug("RangerSystemAccessControl.checkCanSetSystemSessionProperty denied");
-      AccessDeniedException.denySetSystemSessionProperty(propertyName);
-    }
-  }
-
-  @Override
-  public void checkCanImpersonateUser(SystemSecurityContext context, String userName) {
-    if (!hasPermission(createUserResource(userName), context, PrestoAccessType.IMPERSONATE)) {
-      LOG.debug("RangerSystemAccessControl.checkCanImpersonateUser(" + userName + ") denied");
-      AccessDeniedException.denyImpersonateUser(context.getIdentity().getUser(), userName);
-    }
-  }
-
-  @Override
-  public void checkCanSetUser(Optional<Principal> principal, String userName) {
-    // pass as it is deprecated
-  }
-
-  /** CATALOG **/
-  @Override
-  public void checkCanSetCatalogSessionProperty(SystemSecurityContext context, String catalogName, String propertyName) {
-    if (!hasPermission(createCatalogSessionResource(catalogName, propertyName), context, PrestoAccessType.ALTER)) {
-      LOG.debug("RangerSystemAccessControl.checkCanSetCatalogSessionProperty(" + catalogName + ") denied");
-      AccessDeniedException.denySetCatalogSessionProperty(catalogName, propertyName);
-    }
-  }
-
-  @Override
-  public void checkCanShowRoles(SystemSecurityContext context, String catalogName) {
-    if (!hasPermission(createResource(catalogName), context, PrestoAccessType.SHOW)) {
-      LOG.debug("RangerSystemAccessControl.checkCanShowRoles(" + catalogName + ") denied");
-      AccessDeniedException.denyShowRoles(catalogName);
-    }
-  }
-
-
-  @Override
-  public void checkCanAccessCatalog(SystemSecurityContext context, String catalogName) {
-    if (!hasPermission(createResource(catalogName), context, PrestoAccessType.USE)) {
-      LOG.debug("RangerSystemAccessControl.checkCanAccessCatalog(" + catalogName + ") denied");
-      AccessDeniedException.denyCatalogAccess(catalogName);
-    }
-  }
-
-  @Override
-  public void checkCanShowSchemas(SystemSecurityContext context, String catalogName) {
-    if (!hasPermission(createResource(catalogName), context, PrestoAccessType.SHOW)) {
-      LOG.debug("RangerSystemAccessControl.checkCanShowSchemas(" + catalogName + ") denied");
-      AccessDeniedException.denyShowSchemas(catalogName);
-    }
-  }
-
-  /** SCHEMA **/
-
-  @Override
-  public void checkCanSetSchemaAuthorization(SystemSecurityContext context, CatalogSchemaName schema, PrestoPrincipal principal) {
-    if (!hasPermission(createResource(schema.getCatalogName(), schema.getSchemaName()), context, PrestoAccessType.GRANT)) {
-      LOG.debug("RangerSystemAccessControl.checkCanSetSchemaAuthorization(" + schema.getSchemaName() + ") denied");
-      AccessDeniedException.denySetSchemaAuthorization(schema.getSchemaName(), principal);
-    }
-  }
-
-  @Override
-  public void checkCanShowCreateSchema(SystemSecurityContext context, CatalogSchemaName schema) {
-    if (!hasPermission(createResource(schema.getCatalogName(), schema.getSchemaName()), context, PrestoAccessType.SHOW)) {
-      LOG.debug("RangerSystemAccessControl.checkCanShowCreateSchema(" + schema.getSchemaName() + ") denied");
-      AccessDeniedException.denyShowCreateSchema(schema.getSchemaName());
-    }
-  }
-
-  /**
-   * Create schema is evaluated on the level of the Catalog. This means that it is assumed you have permission
-   * to create a schema when you have create rights on the catalog level
-   */
-  @Override
-  public void checkCanCreateSchema(SystemSecurityContext context, CatalogSchemaName schema) {
-    if (!hasPermission(createResource(schema.getCatalogName()), context, PrestoAccessType.CREATE)) {
-      LOG.debug("RangerSystemAccessControl.checkCanCreateSchema(" + schema.getSchemaName() + ") denied");
-      AccessDeniedException.denyCreateSchema(schema.getSchemaName());
-    }
-  }
-
-  /**
-   * This is evaluated against the schema name as ownership information is not available
-   */
-  @Override
-  public void checkCanDropSchema(SystemSecurityContext context, CatalogSchemaName schema) {
-    if (!hasPermission(createResource(schema.getCatalogName(), schema.getSchemaName()), context, PrestoAccessType.DROP)) {
-      LOG.debug("RangerSystemAccessControl.checkCanDropSchema(" + schema.getSchemaName() + ") denied");
-      AccessDeniedException.denyDropSchema(schema.getSchemaName());
-    }
-  }
-
-  /**
-   * This is evaluated against the schema name as ownership information is not available
-   */
-  @Override
-  public void checkCanRenameSchema(SystemSecurityContext context, CatalogSchemaName schema, String newSchemaName) {
-    RangerPrestoResource res = createResource(schema.getCatalogName(), schema.getSchemaName());
-    if (!hasPermission(res, context, PrestoAccessType.ALTER)) {
-      LOG.debug("RangerSystemAccessControl.checkCanRenameSchema(" + schema.getSchemaName() + ") denied");
-      AccessDeniedException.denyRenameSchema(schema.getSchemaName(), newSchemaName);
-    }
-  }
-
-  /** TABLE **/
-
-  @Override
-  public void checkCanShowTables(SystemSecurityContext context, CatalogSchemaName schema) {
-    if (!hasPermission(createResource(schema), context, PrestoAccessType.SHOW)) {
-      LOG.debug("RangerSystemAccessControl.checkCanShowTables(" + schema.toString() + ") denied");
-      AccessDeniedException.denyShowTables(schema.toString());
-    }
-  }
-
-
-  @Override
-  public void checkCanShowCreateTable(SystemSecurityContext context, CatalogSchemaTableName table) {
-    if (!hasPermission(createResource(table), context, PrestoAccessType.SHOW)) {
-      LOG.debug("RangerSystemAccessControl.checkCanShowTables(" + table.toString() + ") denied");
-      AccessDeniedException.denyShowCreateTable(table.toString());
-    }
-  }
-
-  /**
-   * Create table is verified on schema level
-   */
-  @Override
-  public void checkCanCreateTable(SystemSecurityContext context, CatalogSchemaTableName table) {
-    if (!hasPermission(createResource(table.getCatalogName(), table.getSchemaTableName().getSchemaName()), context, PrestoAccessType.CREATE)) {
-      LOG.debug("RangerSystemAccessControl.checkCanCreateTable(" + table.getSchemaTableName().getTableName() + ") denied");
-      AccessDeniedException.denyCreateTable(table.getSchemaTableName().getTableName());
-    }
-  }
-
-  /**
-   * This is evaluated against the table name as ownership information is not available
-   */
-  @Override
-  public void checkCanDropTable(SystemSecurityContext context, CatalogSchemaTableName table) {
-    if (!hasPermission(createResource(table), context, PrestoAccessType.DROP)) {
-      LOG.debug("RangerSystemAccessControl.checkCanDropTable(" + table.getSchemaTableName().getTableName() + ") denied");
-      AccessDeniedException.denyDropTable(table.getSchemaTableName().getTableName());
-    }
-  }
-
-  /**
-   * This is evaluated against the table name as ownership information is not available
-   */
-  @Override
-  public void checkCanRenameTable(SystemSecurityContext context, CatalogSchemaTableName table, CatalogSchemaTableName newTable) {
-    RangerPrestoResource res = createResource(table);
-    if (!hasPermission(res, context, PrestoAccessType.ALTER)) {
-      LOG.debug("RangerSystemAccessControl.checkCanRenameTable(" + table.getSchemaTableName().getTableName() + ") denied");
-      AccessDeniedException.denyRenameTable(table.getSchemaTableName().getTableName(), newTable.getSchemaTableName().getTableName());
-    }
-  }
-
-  @Override
-  public void checkCanInsertIntoTable(SystemSecurityContext context, CatalogSchemaTableName table) {
-    RangerPrestoResource res = createResource(table);
-    if (!hasPermission(res, context, PrestoAccessType.INSERT)) {
-      LOG.debug("RangerSystemAccessControl.checkCanInsertIntoTable(" + table.getSchemaTableName().getTableName() + ") denied");
-      AccessDeniedException.denyInsertTable(table.getSchemaTableName().getTableName());
-    }
-  }
-
-  @Override
-  public void checkCanDeleteFromTable(SystemSecurityContext context, CatalogSchemaTableName table) {
-    if (!hasPermission(createResource(table), context, PrestoAccessType.DELETE)) {
-      LOG.debug("RangerSystemAccessControl.checkCanDeleteFromTable(" + table.getSchemaTableName().getTableName() + ") denied");
-      AccessDeniedException.denyDeleteTable(table.getSchemaTableName().getTableName());
-    }
-  }
-
-  @Override
-  public void checkCanGrantTablePrivilege(SystemSecurityContext context, Privilege privilege, CatalogSchemaTableName table, PrestoPrincipal grantee, boolean withGrantOption) {
-    if (!hasPermission(createResource(table), context, PrestoAccessType.GRANT)) {
-      LOG.debug("RangerSystemAccessControl.checkCanGrantTablePrivilege(" + table + ") denied");
-      AccessDeniedException.denyGrantTablePrivilege(privilege.toString(), table.toString());
-    }
-  }
-
-  @Override
-  public void checkCanRevokeTablePrivilege(SystemSecurityContext context, Privilege privilege, CatalogSchemaTableName table, PrestoPrincipal revokee, boolean grantOptionFor) {
-    if (!hasPermission(createResource(table), context, PrestoAccessType.REVOKE)) {
-      LOG.debug("RangerSystemAccessControl.checkCanRevokeTablePrivilege(" + table + ") denied");
-      AccessDeniedException.denyRevokeTablePrivilege(privilege.toString(), table.toString());
-    }
-  }
-
-  @Override
-  public void checkCanSetTableComment(SystemSecurityContext context, CatalogSchemaTableName table) {
-    if (!hasPermission(createResource(table), context, PrestoAccessType.ALTER)) {
-      LOG.debug("RangerSystemAccessControl.checkCanSetTableComment(" + table.toString() + ") denied");
-      AccessDeniedException.denyCommentTable(table.toString());
-    }
-  }
-
-  /**
-   * Create view is verified on schema level
-   */
-  @Override
-  public void checkCanCreateView(SystemSecurityContext context, CatalogSchemaTableName view) {
-    if (!hasPermission(createResource(view.getCatalogName(), view.getSchemaTableName().getSchemaName()), context, PrestoAccessType.CREATE)) {
-      LOG.debug("RangerSystemAccessControl.checkCanCreateView(" + view.getSchemaTableName().getTableName() + ") denied");
-      AccessDeniedException.denyCreateView(view.getSchemaTableName().getTableName());
-    }
-  }
-
-  /**
-   * This is evaluated against the table name as ownership information is not available
-   */
-  @Override
-  public void checkCanDropView(SystemSecurityContext context, CatalogSchemaTableName view) {
-    if (!hasPermission(createResource(view), context, PrestoAccessType.DROP)) {
-      LOG.debug("RangerSystemAccessControl.checkCanDropView(" + view.getSchemaTableName().getTableName() + ") denied");
-      AccessDeniedException.denyDropView(view.getSchemaTableName().getTableName());
-    }
-  }
-
-  /**
-   * This check equals the check for checkCanCreateView
-   */
-  @Override
-  public void checkCanCreateViewWithSelectFromColumns(SystemSecurityContext context, CatalogSchemaTableName table, Set<String> columns) {
-    try {
-      checkCanCreateView(context, table);
-    } catch (AccessDeniedException ade) {
-      LOG.debug("RangerSystemAccessControl.checkCanCreateViewWithSelectFromColumns(" + table.getSchemaTableName().getTableName() + ") denied");
-      AccessDeniedException.denyCreateViewWithSelect(table.getSchemaTableName().getTableName(), context.getIdentity());
-    }
-  }
-
-  /**
-   * This is evaluated against the table name as ownership information is not available
-   */
-  @Override
-  public void checkCanRenameView(SystemSecurityContext context, CatalogSchemaTableName view, CatalogSchemaTableName newView) {
-    if (!hasPermission(createResource(view), context, PrestoAccessType.ALTER)) {
-      LOG.debug("RangerSystemAccessControl.checkCanRenameView(" + view.toString() + ") denied");
-      AccessDeniedException.denyRenameView(view.toString(), newView.toString());
-    }
-  }
-
-  /** COLUMN **/
-
-  /**
-   * This is evaluated on table level
-   */
-  @Override
-  public void checkCanAddColumn(SystemSecurityContext context, CatalogSchemaTableName table) {
-    RangerPrestoResource res = createResource(table);
-    if (!hasPermission(res, context, PrestoAccessType.ALTER)) {
-      AccessDeniedException.denyAddColumn(table.getSchemaTableName().getTableName());
-    }
-  }
-
-  /**
-   * This is evaluated on table level
-   */
-  @Override
-  public void checkCanDropColumn(SystemSecurityContext context, CatalogSchemaTableName table) {
-    RangerPrestoResource res = createResource(table);
-    if (!hasPermission(res, context, PrestoAccessType.DROP)) {
-      LOG.debug("RangerSystemAccessControl.checkCanDropColumn(" + table.getSchemaTableName().getTableName() + ") denied");
-      AccessDeniedException.denyDropColumn(table.getSchemaTableName().getTableName());
-    }
-  }
-
-  /**
-   * This is evaluated on table level
-   */
-  @Override
-  public void checkCanRenameColumn(SystemSecurityContext context, CatalogSchemaTableName table) {
-    RangerPrestoResource res = createResource(table);
-    if (!hasPermission(res, context, PrestoAccessType.ALTER)) {
-      LOG.debug("RangerSystemAccessControl.checkCanRenameColumn(" + table.getSchemaTableName().getTableName() + ") denied");
-      AccessDeniedException.denyRenameColumn(table.getSchemaTableName().getTableName());
-    }
-  }
-
-  /**
-   * This is evaluated on table level
-   */
-  @Override
-  public void checkCanShowColumns(SystemSecurityContext context, CatalogSchemaTableName table) {
-    if (!hasPermission(createResource(table), context, PrestoAccessType.SHOW)) {
-      LOG.debug("RangerSystemAccessControl.checkCanShowTables(" + table.toString() + ") denied");
-      AccessDeniedException.denyShowColumns(table.toString());
-    }
-  }
-
-  @Override
-  public void checkCanSelectFromColumns(SystemSecurityContext context, CatalogSchemaTableName table, Set<String> columns) {
-    for (RangerPrestoResource res : createResource(table, columns)) {
-      if (!hasPermission(res, context, PrestoAccessType.SELECT)) {
-        LOG.debug("RangerSystemAccessControl.checkCanSelectFromColumns(" + table.getSchemaTableName().getTableName() + ") denied");
-        AccessDeniedException.denySelectColumns(table.getSchemaTableName().getTableName(), columns);
-      }
-    }
-  }
-
-  /**
-   * This is a NOOP, no filtering is applied
-   */
-  @Override
-  public List<ColumnMetadata> filterColumns(SystemSecurityContext context, CatalogSchemaTableName table, List<ColumnMetadata> columns) {
-    return columns;
-  }
-
-  /** QUERY **/
-
-  /**
-   * This is a NOOP. Everyone can execute a query
-   * @param context
-   */
-  @Override
-  public void checkCanExecuteQuery(SystemSecurityContext context) {
-  }
-
-  @Override
-  public void checkCanViewQueryOwnedBy(SystemSecurityContext context, String queryOwner) {
-    if (!hasPermission(createUserResource(queryOwner), context, PrestoAccessType.IMPERSONATE)) {
-      LOG.debug("RangerSystemAccessControl.checkCanViewQueryOwnedBy(" + queryOwner + ") denied");
-      AccessDeniedException.denyImpersonateUser(context.getIdentity().getUser(), queryOwner);
-    }
-  }
-
-  /**
-   * This is a NOOP, no filtering is applied
-   */
-  @Override
-  public Set<String> filterViewQueryOwnedBy(SystemSecurityContext context, Set<String> queryOwners) {
-    return queryOwners;
-  }
-
-  @Override
-  public void checkCanKillQueryOwnedBy(SystemSecurityContext context, String queryOwner) {
-    if (!hasPermission(createUserResource(queryOwner), context, PrestoAccessType.IMPERSONATE)) {
-      LOG.debug("RangerSystemAccessControl.checkCanKillQueryOwnedBy(" + queryOwner + ") denied");
-      AccessDeniedException.denyImpersonateUser(context.getIdentity().getUser(), queryOwner);
-    }
-  }
-
-  /** FUNCTIONS **/
-  @Override
-  public void checkCanGrantExecuteFunctionPrivilege(SystemSecurityContext context, String function, PrestoPrincipal grantee, boolean grantOption) {
-    if (!hasPermission(createFunctionResource(function), context, PrestoAccessType.GRANT)) {
-      LOG.debug("RangerSystemAccessControl.checkCanGrantExecuteFunctionPrivilege(" + function + ") denied");
-      AccessDeniedException.denyGrantExecuteFunctionPrivilege(function, context.getIdentity(), grantee.getName());
-    }
-  }
-
-  @Override
-  public void checkCanExecuteFunction(SystemSecurityContext context, String function) {
-    if (!hasPermission(createFunctionResource(function), context, PrestoAccessType.EXECUTE)) {
-      LOG.debug("RangerSystemAccessControl.checkCanExecuteFunction(" + function + ") denied");
-      AccessDeniedException.denyExecuteFunction(function);
-    }
-  }
-
-  /** PROCEDURES **/
-  @Override
-  public void checkCanExecuteProcedure(SystemSecurityContext context, CatalogSchemaRoutineName procedure) {
-    if (!hasPermission(createProcedureResource(procedure), context, PrestoAccessType.EXECUTE)) {
-      LOG.debug("RangerSystemAccessControl.checkCanExecuteFunction(" + procedure.getSchemaRoutineName().getRoutineName() + ") denied");
-      AccessDeniedException.denyExecuteProcedure(procedure.getSchemaRoutineName().getRoutineName());
-    }
-  }
-
-  /** HELPER FUNCTIONS **/
-
-  private RangerPrestoAccessRequest createAccessRequest(RangerPrestoResource resource, SystemSecurityContext context, PrestoAccessType accessType) {
-	String userName = null;
-	Set<String> userGroups = null;
-
-    if (useUgi) {
-      UserGroupInformation ugi = UserGroupInformation.createRemoteUser(context.getIdentity().getUser());
-
-      userName = ugi.getShortUserName();
-      String[] groups = ugi != null ? ugi.getGroupNames() : null;
-
-      if (groups != null && groups.length > 0) {
-        userGroups = new HashSet<>(Arrays.asList(groups));
-      }
-    } else {
-      userName = context.getIdentity().getUser();
-      userGroups = context.getIdentity().getGroups();
-    }
-
-    RangerPrestoAccessRequest request = new RangerPrestoAccessRequest(
-      resource,
-      userName,
-      userGroups,
-      accessType
-    );
-
-    return request;
-  }
-
-  private boolean hasPermission(RangerPrestoResource resource, SystemSecurityContext context, PrestoAccessType accessType) {
-    boolean ret = false;
-
-    RangerPrestoAccessRequest request = createAccessRequest(resource, context, accessType);
-
-    RangerAccessResult result = rangerPlugin.isAccessAllowed(request);
-    if (result != null && result.getIsAllowed()) {
-      ret = true;
-    }
-
-    return ret;
-  }
-
-  private static RangerPrestoResource createUserResource(String userName) {
-    RangerPrestoResource res = new RangerPrestoResource();
-    res.setValue(RangerPrestoResource.KEY_USER, userName);
-
-    return res;
-  }
-
-  private static RangerPrestoResource createFunctionResource(String function) {
-    RangerPrestoResource res = new RangerPrestoResource();
-    res.setValue(RangerPrestoResource.KEY_FUNCTION, function);
-
-    return res;
-  }
-
-  private static RangerPrestoResource createProcedureResource(CatalogSchemaRoutineName procedure) {
-    RangerPrestoResource res = new RangerPrestoResource();
-    res.setValue(RangerPrestoResource.KEY_CATALOG, procedure.getCatalogName());
-    res.setValue(RangerPrestoResource.KEY_SCHEMA, procedure.getSchemaRoutineName().getSchemaName());
-    res.setValue(RangerPrestoResource.KEY_PROCEDURE, procedure.getSchemaRoutineName().getRoutineName());
-
-    return res;
-  }
-
-  private static RangerPrestoResource createCatalogSessionResource(String catalogName, String propertyName) {
-    RangerPrestoResource res = new RangerPrestoResource();
-    res.setValue(RangerPrestoResource.KEY_CATALOG, catalogName);
-    res.setValue(RangerPrestoResource.KEY_SESSION_PROPERTY, propertyName);
-
-    return res;
-  }
-
-  private static RangerPrestoResource createSystemPropertyResource(String property) {
-    RangerPrestoResource res = new RangerPrestoResource();
-    res.setValue(RangerPrestoResource.KEY_SYSTEM_PROPERTY, property);
-
-    return res;
-  }
-
-  private static RangerPrestoResource createResource(CatalogSchemaName catalogSchemaName) {
-    return createResource(catalogSchemaName.getCatalogName(), catalogSchemaName.getSchemaName());
-  }
-
-  private static RangerPrestoResource createResource(CatalogSchemaTableName catalogSchemaTableName) {
-    return createResource(catalogSchemaTableName.getCatalogName(),
-      catalogSchemaTableName.getSchemaTableName().getSchemaName(),
-      catalogSchemaTableName.getSchemaTableName().getTableName());
-  }
-
-  private static RangerPrestoResource createResource(String catalogName) {
-    return new RangerPrestoResource(catalogName, Optional.empty(), Optional.empty());
-  }
-
-  private static RangerPrestoResource createResource(String catalogName, String schemaName) {
-    return new RangerPrestoResource(catalogName, Optional.of(schemaName), Optional.empty());
-  }
-
-  private static RangerPrestoResource createResource(String catalogName, String schemaName, final String tableName) {
-    return new RangerPrestoResource(catalogName, Optional.of(schemaName), Optional.of(tableName));
-  }
-
-  private static RangerPrestoResource createResource(String catalogName, String schemaName, final String tableName, final Optional<String> column) {
-    return new RangerPrestoResource(catalogName, Optional.of(schemaName), Optional.of(tableName), column);
-  }
-
-  private static List<RangerPrestoResource> createResource(CatalogSchemaTableName table, Set<String> columns) {
-    List<RangerPrestoResource> colRequests = new ArrayList<>();
-
-    if (columns.size() > 0) {
-      for (String column : columns) {
-        RangerPrestoResource rangerPrestoResource = createResource(table.getCatalogName(),
-          table.getSchemaTableName().getSchemaName(),
-          table.getSchemaTableName().getTableName(), Optional.of(column));
-        colRequests.add(rangerPrestoResource);
-      }
-    } else {
-      colRequests.add(createResource(table.getCatalogName(),
-        table.getSchemaTableName().getSchemaName(),
-        table.getSchemaTableName().getTableName(), Optional.empty()));
-    }
-    return colRequests;
-  }
-}
-
-class RangerPrestoResource
-  extends RangerAccessResourceImpl {
-
-
-  public static final String KEY_CATALOG = "catalog";
-  public static final String KEY_SCHEMA = "schema";
-  public static final String KEY_TABLE = "table";
-  public static final String KEY_COLUMN = "column";
-  public static final String KEY_USER = "prestouser";
-  public static final String KEY_FUNCTION = "function";
-  public static final String KEY_PROCEDURE = "procedure";
-  public static final String KEY_SYSTEM_PROPERTY = "systemproperty";
-  public static final String KEY_SESSION_PROPERTY = "sessionproperty";
-
-  public RangerPrestoResource() {
-  }
-
-  public RangerPrestoResource(String catalogName, Optional<String> schema, Optional<String> table) {
-    setValue(KEY_CATALOG, catalogName);
-    if (schema.isPresent()) {
-      setValue(KEY_SCHEMA, schema.get());
-    }
-    if (table.isPresent()) {
-      setValue(KEY_TABLE, table.get());
-    }
-  }
-
-  public RangerPrestoResource(String catalogName, Optional<String> schema, Optional<String> table, Optional<String> column) {
-    setValue(KEY_CATALOG, catalogName);
-    if (schema.isPresent()) {
-      setValue(KEY_SCHEMA, schema.get());
-    }
-    if (table.isPresent()) {
-      setValue(KEY_TABLE, table.get());
-    }
-    if (column.isPresent()) {
-      setValue(KEY_COLUMN, column.get());
-    }
-  }
-
-  public String getCatalogName() {
-    return (String) getValue(KEY_CATALOG);
-  }
-
-  public String getTable() {
-    return (String) getValue(KEY_TABLE);
-  }
-
-  public String getCatalog() {
-    return (String) getValue(KEY_CATALOG);
-  }
-
-  public String getSchema() {
-    return (String) getValue(KEY_SCHEMA);
-  }
-
-  public Optional<SchemaTableName> getSchemaTable() {
-    final String schema = getSchema();
-    if (StringUtils.isNotEmpty(schema)) {
-      return Optional.of(new SchemaTableName(schema, Optional.ofNullable(getTable()).orElse("*")));
-    }
-    return Optional.empty();
-  }
-}
-
-class RangerPrestoAccessRequest
-  extends RangerAccessRequestImpl {
-  public RangerPrestoAccessRequest(RangerPrestoResource resource,
-                                   String user,
-                                   Set<String> userGroups,
-                                   PrestoAccessType prestoAccessType) {
-    super(resource, prestoAccessType.name().toLowerCase(ENGLISH), user, userGroups, null);
-    setAccessTime(new Date());
-  }
-}
-
-enum PrestoAccessType {
-  CREATE, DROP, SELECT, INSERT, DELETE, USE, ALTER, ALL, GRANT, REVOKE, SHOW, IMPERSONATE, EXECUTE;
-}
\ No newline at end of file
diff --git a/plugin-presto/src/main/java/org/apache/ranger/services/presto/RangerServicePresto.java b/plugin-presto/src/main/java/org/apache/ranger/services/presto/RangerServicePresto.java
deleted file mode 100644
index d95876a7d..000000000
--- a/plugin-presto/src/main/java/org/apache/ranger/services/presto/RangerServicePresto.java
+++ /dev/null
@@ -1,125 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.apache.ranger.services.presto;
-
-import org.apache.commons.lang.StringUtils;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.apache.ranger.plugin.client.HadoopConfigHolder;
-import org.apache.ranger.plugin.client.HadoopException;
-import org.apache.ranger.plugin.model.RangerPolicy;
-import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItem;
-import org.apache.ranger.plugin.model.RangerPolicy.RangerPolicyItemAccess;
-import org.apache.ranger.plugin.service.RangerBaseService;
-import org.apache.ranger.plugin.service.ResourceLookupContext;
-import org.apache.ranger.services.presto.client.PrestoResourceManager;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-public class RangerServicePresto extends RangerBaseService {
-  private static final Log LOG = LogFactory.getLog(RangerServicePresto.class);
-
-  public static final String ACCESS_TYPE_SELECT  = "select";
-
-  @Override
-  public List<RangerPolicy> getDefaultRangerPolicies() throws Exception {
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("==> RangerServicePresto.getDefaultRangerPolicies()");
-    }
-
-    List<RangerPolicy> ret = super.getDefaultRangerPolicies();
-    for (RangerPolicy defaultPolicy : ret) {
-      if (defaultPolicy.getName().contains("all") && StringUtils.isNotBlank(lookUpUser)) {
-        List<RangerPolicyItemAccess> accessListForLookupUser = new ArrayList<RangerPolicyItemAccess>();
-        accessListForLookupUser.add(new RangerPolicyItemAccess(ACCESS_TYPE_SELECT));
-        RangerPolicyItem policyItemForLookupUser = new RangerPolicyItem();
-        policyItemForLookupUser.setUsers(Collections.singletonList(lookUpUser));
-        policyItemForLookupUser.setAccesses(accessListForLookupUser);
-        policyItemForLookupUser.setDelegateAdmin(false);
-        defaultPolicy.getPolicyItems().add(policyItemForLookupUser);
-      }
-    }
-
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("<== RangerServicePresto.getDefaultRangerPolicies()");
-    }
-    return ret;
-  }
-
-  @Override
-  public Map<String, Object> validateConfig() throws Exception {
-    Map<String, Object> ret = new HashMap<String, Object>();
-    String serviceName = getServiceName();
-
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("RangerServicePresto.validateConfig(): Service: " +
-        serviceName);
-    }
-
-    if (configs != null) {
-      try {
-        if (!configs.containsKey(HadoopConfigHolder.RANGER_LOGIN_PASSWORD)) {
-          configs.put(HadoopConfigHolder.RANGER_LOGIN_PASSWORD, null);
-        }
-        ret = PrestoResourceManager.connectionTest(serviceName, configs);
-      } catch (HadoopException he) {
-        LOG.error("<== RangerServicePresto.validateConfig Error:" + he);
-        throw he;
-      }
-    }
-
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("RangerServicePresto.validateConfig(): Response: " +
-        ret);
-    }
-    return ret;
-  }
-
-  @Override
-  public List<String> lookupResource(ResourceLookupContext context) throws Exception {
-
-    List<String> ret 		   = new ArrayList<String>();
-    String 	serviceName  	   = getServiceName();
-    String	serviceType		   = getServiceType();
-    Map<String,String> configs = getConfigs();
-    if(LOG.isDebugEnabled()) {
-      LOG.debug("==> RangerServiceHive.lookupResource Context: (" + context + ")");
-    }
-    if (context != null) {
-      try {
-        if (!configs.containsKey(HadoopConfigHolder.RANGER_LOGIN_PASSWORD)) {
-          configs.put(HadoopConfigHolder.RANGER_LOGIN_PASSWORD, null);
-        }
-        ret  = PrestoResourceManager.getPrestoResources(serviceName, serviceType, configs,context);
-      } catch (Exception e) {
-        LOG.error( "<==RangerServicePresto.lookupResource Error : " + e);
-        throw e;
-      }
-    }
-    if(LOG.isDebugEnabled()) {
-      LOG.debug("<== RangerServicePresto.lookupResource Response: (" + ret + ")");
-    }
-    return ret;
-  }
-
-}
diff --git a/plugin-presto/src/main/java/org/apache/ranger/services/presto/client/PrestoClient.java b/plugin-presto/src/main/java/org/apache/ranger/services/presto/client/PrestoClient.java
deleted file mode 100644
index 7b55b77bd..000000000
--- a/plugin-presto/src/main/java/org/apache/ranger/services/presto/client/PrestoClient.java
+++ /dev/null
@@ -1,558 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.apache.ranger.services.presto.client;
-
-import org.apache.commons.io.FilenameUtils;
-import org.apache.commons.lang.StringEscapeUtils;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.apache.ranger.plugin.client.BaseClient;
-import org.apache.ranger.plugin.client.HadoopConfigHolder;
-import org.apache.ranger.plugin.client.HadoopException;
-
-import javax.security.auth.Subject;
-import java.io.Closeable;
-import java.security.PrivilegedAction;
-import java.sql.Connection;
-import java.sql.Driver;
-import java.sql.DriverManager;
-import java.sql.ResultSet;
-import java.sql.SQLException;
-import java.sql.SQLTimeoutException;
-import java.sql.Statement;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Properties;
-
-public class PrestoClient extends BaseClient implements Closeable {
-  public static final String PRESTO_USER_NAME_PROP = "user";
-  public static final String PRESTO_PASSWORD_PROP = "password";
-
-  private static final Log LOG = LogFactory.getLog(PrestoClient.class);
-
-  private static final String ERR_MSG = "You can still save the repository and start creating "
-    + "policies, but you would not be able to use autocomplete for "
-    + "resource names. Check ranger_admin.log for more info.";
-
-  private Connection con;
-
-  public PrestoClient(String serviceName) throws Exception {
-    super(serviceName, null);
-    init();
-  }
-
-  public PrestoClient(String serviceName, Map<String, String> properties) throws Exception {
-    super(serviceName, properties);
-    init();
-  }
-
-  private void init() throws Exception {
-    Subject.doAs(getLoginSubject(), new PrivilegedAction<Void>() {
-      public Void run() {
-        initConnection();
-        return null;
-      }
-    });
-  }
-
-  private void initConnection() {
-    Properties prop = getConfigHolder().getRangerSection();
-    String driverClassName = prop.getProperty("jdbc.driverClassName");
-    String url = prop.getProperty("jdbc.url");
-
-    Properties prestoProperties = new Properties();
-    prestoProperties.put(PRESTO_USER_NAME_PROP, prop.getProperty(HadoopConfigHolder.RANGER_LOGIN_USER_NAME_PROP));
-    if (prop.getProperty(HadoopConfigHolder.RANGER_LOGIN_PASSWORD) != null) {
-      prestoProperties.put(PRESTO_PASSWORD_PROP, prop.getProperty(HadoopConfigHolder.RANGER_LOGIN_PASSWORD));
-    }
-
-    if (driverClassName != null) {
-      try {
-        Driver driver = (Driver) Class.forName(driverClassName).newInstance();
-        DriverManager.registerDriver(driver);
-      } catch (SQLException e) {
-        String msgDesc = "initConnection: Caught SQLException while registering"
-          + " the Presto driver.";
-        HadoopException hdpException = new HadoopException(msgDesc, e);
-        hdpException.generateResponseDataMap(false, getMessage(e),
-          msgDesc + ERR_MSG, null, null);
-        throw hdpException;
-      } catch (IllegalAccessException ilae) {
-        String msgDesc = "initConnection: Class or its nullary constructor might not accessible.";
-        HadoopException hdpException = new HadoopException(msgDesc, ilae);
-        hdpException.generateResponseDataMap(false, getMessage(ilae),
-          msgDesc + ERR_MSG, null, null);
-        throw hdpException;
-      } catch (InstantiationException ie) {
-        String msgDesc = "initConnection: Class may not have its nullary constructor or "
-          + "may be the instantiation fails for some other reason.";
-        HadoopException hdpException = new HadoopException(msgDesc, ie);
-        hdpException.generateResponseDataMap(false, getMessage(ie),
-          msgDesc + ERR_MSG, null, null);
-        throw hdpException;
-      } catch (ExceptionInInitializerError eie) {
-        String msgDesc = "initConnection: Got ExceptionInInitializerError, "
-          + "The initialization provoked by this method fails.";
-        HadoopException hdpException = new HadoopException(msgDesc,
-          eie);
-        hdpException.generateResponseDataMap(false, getMessage(eie),
-          msgDesc + ERR_MSG, null, null);
-        throw hdpException;
-      } catch (SecurityException se) {
-        String msgDesc = "initConnection: unable to initiate connection to Presto instance,"
-          + " The caller's class loader is not the same as or an ancestor "
-          + "of the class loader for the current class and invocation of "
-          + "s.checkPackageAccess() denies access to the package of this class.";
-        HadoopException hdpException = new HadoopException(msgDesc, se);
-        hdpException.generateResponseDataMap(false, getMessage(se),
-          msgDesc + ERR_MSG, null, null);
-        throw hdpException;
-      } catch (Throwable t) {
-        String msgDesc = "initConnection: Unable to connect to Presto instance, "
-          + "please provide valid value of field : {jdbc.driverClassName}.";
-        HadoopException hdpException = new HadoopException(msgDesc, t);
-        hdpException.generateResponseDataMap(false, getMessage(t),
-          msgDesc + ERR_MSG, null, null);
-        throw hdpException;
-      }
-    }
-
-    try {
-      con = DriverManager.getConnection(url, prestoProperties);
-    } catch (SQLException e) {
-      String msgDesc = "Unable to connect to Presto instance.";
-      HadoopException hdpException = new HadoopException(msgDesc, e);
-      hdpException.generateResponseDataMap(false, getMessage(e),
-        msgDesc + ERR_MSG, null, null);
-      throw hdpException;
-    } catch (SecurityException se) {
-      String msgDesc = "Unable to connect to Presto instance.";
-      HadoopException hdpException = new HadoopException(msgDesc, se);
-      hdpException.generateResponseDataMap(false, getMessage(se),
-        msgDesc + ERR_MSG, null, null);
-      throw hdpException;
-    } catch (Throwable t) {
-      String msgDesc = "initConnection: Unable to connect to Presto instance, ";
-      HadoopException hdpException = new HadoopException(msgDesc, t);
-      hdpException.generateResponseDataMap(false, getMessage(t),
-        msgDesc + ERR_MSG, null, null);
-      throw hdpException;
-    }
-
-  }
-
-  private List<String> getCatalogs(String needle, List<String> catalogs) throws HadoopException {
-    List<String> ret = new ArrayList<>();
-    if (con != null) {
-      Statement stat = null;
-      ResultSet rs = null;
-      String sql = "SHOW CATALOGS";
-
-      try {
-        if (needle != null && !needle.isEmpty() && !needle.equals("*")) {
-          // Cannot use a prepared statement for this as presto does not support that
-          sql += " LIKE '" + StringEscapeUtils.escapeSql(needle) + "%'";
-        }
-        stat = con.createStatement();
-        rs = stat.executeQuery(sql);
-        while (rs.next()) {
-          String catalogName = rs.getString(1);
-          if (catalogs != null && catalogs.contains(catalogName)) {
-            continue;
-          }
-          ret.add(catalogName);
-        }
-      } catch (SQLTimeoutException sqlt) {
-        String msgDesc = "Time Out, Unable to execute SQL [" + sql
-          + "].";
-        HadoopException hdpException = new HadoopException(msgDesc,
-          sqlt);
-        hdpException.generateResponseDataMap(false, getMessage(sqlt),
-          msgDesc + ERR_MSG, null, null);
-      } catch (SQLException se) {
-        String msg = "Unable to execute SQL [" + sql + "]. ";
-        HadoopException he = new HadoopException(msg, se);
-        he.generateResponseDataMap(false, getMessage(se), msg + ERR_MSG,
-          null, null);
-        throw he;
-      } finally {
-        close(rs);
-        close(stat);
-      }
-    }
-    return ret;
-  }
-
-  public List<String> getCatalogList(String needle, final List<String> catalogs) throws HadoopException {
-    final String ndl = needle;
-    final List<String> catList = catalogs;
-
-    List<String> dbs = Subject.doAs(getLoginSubject(), new PrivilegedAction<List<String>>() {
-      @Override
-      public List<String> run() {
-        List<String> ret = null;
-        try {
-          ret = getCatalogs(ndl, catList);
-        } catch (HadoopException he) {
-          LOG.error("<== PrestoClient getCatalogList() :Unable to get the Database List", he);
-          throw he;
-        }
-        return ret;
-      }
-    });
-
-    return dbs;
-  }
-
-  private List<String> getSchemas(String needle, List<String> catalogs, List<String> schemas) throws HadoopException {
-    List<String> ret = new ArrayList<>();
-    if (con != null) {
-      Statement stat = null;
-      ResultSet rs = null;
-      String sql = null;
-
-      try {
-        if (catalogs != null && !catalogs.isEmpty()) {
-          for (String catalog : catalogs) {
-            sql = "SHOW SCHEMAS FROM \"" + StringEscapeUtils.escapeSql(catalog) + "\"";
-
-            try {
-              if (needle != null && !needle.isEmpty() && !needle.equals("*")) {
-                sql += " LIKE '" + StringEscapeUtils.escapeSql(needle) + "%'";
-              }
-              stat = con.createStatement();
-              rs = stat.executeQuery(sql);
-              while (rs.next()) {
-                String schema = rs.getString(1);
-                if (schemas != null && schemas.contains(schema)) {
-                  continue;
-                }
-                ret.add(schema);
-              }
-            } finally {
-              close(rs);
-              close(stat);
-              rs = null;
-              stat = null;
-            }
-          }
-        }
-      } catch (SQLTimeoutException sqlt) {
-        String msgDesc = "Time Out, Unable to execute SQL [" + sql
-          + "].";
-        HadoopException hdpException = new HadoopException(msgDesc,
-          sqlt);
-        hdpException.generateResponseDataMap(false, getMessage(sqlt),
-          msgDesc + ERR_MSG, null, null);
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("<== PrestoClient.getSchemas() Error : ", sqlt);
-        }
-        throw hdpException;
-      } catch (SQLException sqle) {
-        String msgDesc = "Unable to execute SQL [" + sql + "].";
-        HadoopException hdpException = new HadoopException(msgDesc,
-          sqle);
-        hdpException.generateResponseDataMap(false, getMessage(sqle),
-          msgDesc + ERR_MSG, null, null);
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("<== PrestoClient.getSchemas() Error : ", sqle);
-        }
-        throw hdpException;
-      }
-    }
-
-    return ret;
-  }
-
-  public List<String> getSchemaList(String needle, List<String> catalogs, List<String> schemas) throws HadoopException {
-    final String ndl = needle;
-    final List<String> cats = catalogs;
-    final List<String> shms = schemas;
-
-    List<String> schemaList = Subject.doAs(getLoginSubject(), new PrivilegedAction<List<String>>() {
-      @Override
-      public List<String> run() {
-        List<String> ret = null;
-        try {
-          ret = getSchemas(ndl, cats, shms);
-        } catch (HadoopException he) {
-          LOG.error("<== PrestoClient getSchemaList() :Unable to get the Schema List", he);
-        }
-        return ret;
-      }
-    });
-
-    return schemaList;
-  }
-
-  private List<String> getTables(String needle, List<String> catalogs, List<String> schemas, List<String> tables) throws HadoopException {
-    List<String> ret = new ArrayList<>();
-    if (con != null) {
-      Statement stat = null;
-      ResultSet rs = null;
-      String sql = null;
-
-      if (catalogs != null && !catalogs.isEmpty()
-        && schemas != null && !schemas.isEmpty()) {
-        try {
-          for (String catalog : catalogs) {
-            for (String schema : schemas) {
-              sql = "SHOW tables FROM \"" + StringEscapeUtils.escapeSql(catalog) + "\".\"" + StringEscapeUtils.escapeSql(schema) + "\"";
-              try {
-                if (needle != null && !needle.isEmpty() && !needle.equals("*")) {
-                  sql += " LIKE '" + StringEscapeUtils.escapeSql(needle) + "%'";
-                }
-                stat = con.createStatement();
-                rs = stat.executeQuery(sql);
-                while (rs.next()) {
-                  String table = rs.getString(1);
-                  if (tables != null && tables.contains(table)) {
-                    continue;
-                  }
-                  ret.add(table);
-                }
-              } finally {
-                close(rs);
-                close(stat);
-                rs = null;
-                stat = null;
-              }
-            }
-          }
-        } catch (SQLTimeoutException sqlt) {
-          String msgDesc = "Time Out, Unable to execute SQL [" + sql
-            + "].";
-          HadoopException hdpException = new HadoopException(msgDesc,
-            sqlt);
-          hdpException.generateResponseDataMap(false, getMessage(sqlt),
-            msgDesc + ERR_MSG, null, null);
-          if (LOG.isDebugEnabled()) {
-            LOG.debug("<== PrestoClient.getTables() Error : ", sqlt);
-          }
-          throw hdpException;
-        } catch (SQLException sqle) {
-          String msgDesc = "Unable to execute SQL [" + sql + "].";
-          HadoopException hdpException = new HadoopException(msgDesc,
-            sqle);
-          hdpException.generateResponseDataMap(false, getMessage(sqle),
-            msgDesc + ERR_MSG, null, null);
-          if (LOG.isDebugEnabled()) {
-            LOG.debug("<== PrestoClient.getTables() Error : ", sqle);
-          }
-          throw hdpException;
-        }
-      }
-    }
-    return ret;
-  }
-
-  public List<String> getTableList(String needle, List<String> catalogs, List<String> schemas, List<String> tables) throws HadoopException {
-    final String ndl = needle;
-    final List<String> cats = catalogs;
-    final List<String> shms = schemas;
-    final List<String> tbls = tables;
-
-    List<String> tableList = Subject.doAs(getLoginSubject(), new PrivilegedAction<List<String>>() {
-      @Override
-      public List<String> run() {
-        List<String> ret = null;
-        try {
-          ret = getTables(ndl, cats, shms, tbls);
-        } catch (HadoopException he) {
-          LOG.error("<== PrestoClient getTableList() :Unable to get the Column List", he);
-          throw he;
-        }
-        return ret;
-      }
-    });
-
-    return tableList;
-  }
-
-  private List<String> getColumns(String needle, List<String> catalogs, List<String> schemas, List<String> tables, List<String> columns) throws HadoopException {
-    List<String> ret = new ArrayList<>();
-    if (con != null) {
-      String regex = null;
-      ResultSet rs = null;
-      String sql = null;
-      Statement stat = null;
-
-      if (needle != null && !needle.isEmpty()) {
-        regex = needle;
-      }
-
-      if (catalogs != null && !catalogs.isEmpty()
-        && schemas != null && !schemas.isEmpty()
-        && tables != null && !tables.isEmpty()) {
-        try {
-          for (String catalog : catalogs) {
-            for (String schema : schemas) {
-              for (String table : tables) {
-                sql = "SHOW COLUMNS FROM \"" + StringEscapeUtils.escapeSql(catalog) + "\"." +
-                  "\"" + StringEscapeUtils.escapeSql(schema) + "\"." +
-                  "\"" + StringEscapeUtils.escapeSql(table) + "\"";
-
-                try {
-                  stat = con.createStatement();
-                  rs = stat.executeQuery(sql);
-                  while (rs.next()) {
-                    String column = rs.getString(1);
-                    if (columns != null && columns.contains(column)) {
-                      continue;
-                    }
-                    if (regex == null) {
-                      ret.add(column);
-                    } else if (FilenameUtils.wildcardMatch(column, regex)) {
-                      ret.add(column);
-                    }
-                  }
-                } finally {
-                  close(rs);
-                  close(stat);
-                  stat = null;
-                  rs = null;
-                }
-              }
-            }
-          }
-        } catch (SQLTimeoutException sqlt) {
-          String msgDesc = "Time Out, Unable to execute SQL [" + sql
-            + "].";
-          HadoopException hdpException = new HadoopException(msgDesc,
-            sqlt);
-          hdpException.generateResponseDataMap(false, getMessage(sqlt),
-            msgDesc + ERR_MSG, null, null);
-          if (LOG.isDebugEnabled()) {
-            LOG.debug("<== PrestoClient.getColumns() Error : ", sqlt);
-          }
-          throw hdpException;
-        } catch (SQLException sqle) {
-          String msgDesc = "Unable to execute SQL [" + sql + "].";
-          HadoopException hdpException = new HadoopException(msgDesc,
-            sqle);
-          hdpException.generateResponseDataMap(false, getMessage(sqle),
-            msgDesc + ERR_MSG, null, null);
-          if (LOG.isDebugEnabled()) {
-            LOG.debug("<== PrestoClient.getColumns() Error : ", sqle);
-          }
-          throw hdpException;
-        }
-      }
-    }
-    return ret;
-  }
-
-  public List<String> getColumnList(String needle, List<String> catalogs, List<String> schemas, List<String> tables, List<String> columns) throws HadoopException {
-    final String ndl = needle;
-    final List<String> cats = catalogs;
-    final List<String> shms = schemas;
-    final List<String> tbls = tables;
-    final List<String> cols = columns;
-
-    List<String> columnList = Subject.doAs(getLoginSubject(), new PrivilegedAction<List<String>>() {
-      @Override
-      public List<String> run() {
-        List<String> ret = null;
-        try {
-          ret = getColumns(ndl, cats, shms, tbls, cols);
-        } catch (HadoopException he) {
-          LOG.error("<== PrestoClient getColumnList() :Unable to get the Column List", he);
-          throw he;
-        }
-        return ret;
-      }
-    });
-    return columnList;
-  }
-
-  public static Map<String, Object> connectionTest(String serviceName,
-                                                   Map<String, String> connectionProperties)
-    throws Exception {
-    PrestoClient client = null;
-    Map<String, Object> resp = new HashMap<String, Object>();
-
-    boolean status = false;
-
-    List<String> testResult = null;
-
-    try {
-      client = new PrestoClient(serviceName, connectionProperties);
-      if (client != null) {
-        testResult = client.getCatalogList("*", null);
-        if (testResult != null && testResult.size() != 0) {
-          status = true;
-        }
-      }
-
-      if (status) {
-        String msg = "Connection test succesful";
-        generateResponseDataMap(status, msg, msg, null, null, resp);
-      }
-    } catch (Exception e) {
-      throw e;
-    } finally {
-      if (client != null) {
-        client.close();
-      }
-    }
-
-    return resp;
-  }
-
-  public void close() {
-    Subject.doAs(getLoginSubject(), new PrivilegedAction<Void>() {
-      public Void run() {
-        close(con);
-        return null;
-      }
-    });
-  }
-
-  private void close(Connection con) {
-    try {
-      if (con != null) {
-        con.close();
-      }
-    } catch (SQLException e) {
-      LOG.error("Unable to close Presto SQL connection", e);
-    }
-  }
-
-  public void close(Statement stat) {
-    try {
-      if (stat != null) {
-        stat.close();
-      }
-    } catch (SQLException e) {
-      LOG.error("Unable to close SQL statement", e);
-    }
-  }
-
-  public void close(ResultSet rs) {
-    try {
-      if (rs != null) {
-        rs.close();
-      }
-    } catch (SQLException e) {
-      LOG.error("Unable to close ResultSet", e);
-    }
-  }
-}
diff --git a/plugin-presto/src/main/java/org/apache/ranger/services/presto/client/PrestoConnectionManager.java b/plugin-presto/src/main/java/org/apache/ranger/services/presto/client/PrestoConnectionManager.java
deleted file mode 100644
index 4a642ea51..000000000
--- a/plugin-presto/src/main/java/org/apache/ranger/services/presto/client/PrestoConnectionManager.java
+++ /dev/null
@@ -1,93 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.apache.ranger.services.presto.client;
-
-import org.apache.log4j.Logger;
-import org.apache.ranger.plugin.util.TimedEventUtil;
-
-import java.util.Map;
-import java.util.concurrent.Callable;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ConcurrentMap;
-import java.util.concurrent.TimeUnit;
-
-public class PrestoConnectionManager {
-  private static final Logger LOG = Logger.getLogger(PrestoConnectionManager.class);
-
-  protected ConcurrentMap<String, PrestoClient> prestoConnectionCache;
-  protected ConcurrentMap<String, Boolean> repoConnectStatusMap;
-
-  public PrestoConnectionManager() {
-    prestoConnectionCache = new ConcurrentHashMap<>();
-    repoConnectStatusMap = new ConcurrentHashMap<>();
-  }
-
-  public PrestoClient getPrestoConnection(final String serviceName, final String serviceType, final Map<String, String> configs) {
-    PrestoClient prestoClient = null;
-
-    if (serviceType != null) {
-      prestoClient = prestoConnectionCache.get(serviceName);
-      if (prestoClient == null) {
-        if (configs != null) {
-          final Callable<PrestoClient> connectPresto = new Callable<PrestoClient>() {
-            @Override
-            public PrestoClient call() throws Exception {
-              return new PrestoClient(serviceName, configs);
-            }
-          };
-          try {
-            prestoClient = TimedEventUtil.timedTask(connectPresto, 5, TimeUnit.SECONDS);
-          } catch (Exception e) {
-            LOG.error("Error connecting to Presto repository: " +
-            serviceName + " using config: " + configs, e);
-          }
-
-          PrestoClient oldClient = null;
-          if (prestoClient != null) {
-            oldClient = prestoConnectionCache.putIfAbsent(serviceName, prestoClient);
-          } else {
-            oldClient = prestoConnectionCache.get(serviceName);
-          }
-
-          if (oldClient != null) {
-            if (prestoClient != null) {
-              prestoClient.close();
-            }
-            prestoClient = oldClient;
-          }
-          repoConnectStatusMap.put(serviceName, true);
-        } else {
-          LOG.error("Connection Config not defined for asset :"
-            + serviceName, new Throwable());
-        }
-      } else {
-        try {
-          prestoClient.getCatalogList("*", null);
-        } catch (Exception e) {
-          prestoConnectionCache.remove(serviceName);
-          prestoClient.close();
-          prestoClient = getPrestoConnection(serviceName, serviceType, configs);
-        }
-      }
-    } else {
-      LOG.error("Asset not found with name " + serviceName, new Throwable());
-    }
-    return prestoClient;
-  }
-}
diff --git a/plugin-presto/src/main/java/org/apache/ranger/services/presto/client/PrestoResourceManager.java b/plugin-presto/src/main/java/org/apache/ranger/services/presto/client/PrestoResourceManager.java
deleted file mode 100644
index 008bf0fa6..000000000
--- a/plugin-presto/src/main/java/org/apache/ranger/services/presto/client/PrestoResourceManager.java
+++ /dev/null
@@ -1,178 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.apache.ranger.services.presto.client;
-
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.apache.ranger.plugin.service.ResourceLookupContext;
-import org.apache.ranger.plugin.util.TimedEventUtil;
-
-import java.util.List;
-import java.util.Map;
-import java.util.concurrent.Callable;
-import java.util.concurrent.TimeUnit;
-
-public class PrestoResourceManager {
-  private static final Log LOG = LogFactory.getLog(PrestoResourceManager.class);
-
-  private static final String  CATALOG 	  = "catalog";
-  private static final String  SCHEMA     = "schema";
-  private static final String  TABLE	 	  = "table";
-  private static final String  COLUMN	 	  = "column";
-
-
-  public static Map<String, Object> connectionTest(String serviceName, Map<String, String> configs) throws Exception {
-    Map<String, Object> ret = null;
-
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("==> PrestoResourceMgr.connectionTest ServiceName: " + serviceName + "Configs" + configs);
-    }
-
-    try {
-      ret = PrestoClient.connectionTest(serviceName, configs);
-    } catch (Exception e) {
-      LOG.error("<== PrestoResourceManager.connectionTest Error: " + e);
-      throw e;
-    }
-
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("<== PrestoResourceManager.connectionTest Result : " + ret);
-    }
-
-    return ret;
-  }
-
-  public static List<String> getPrestoResources(String serviceName, String serviceType, Map<String, String> configs, ResourceLookupContext context) throws Exception {
-
-    String userInput = context.getUserInput();
-    String resource = context.getResourceName();
-    Map<String, List<String>> resourceMap = context.getResources();
-    List<String> resultList = null;
-    List<String> catalogList = null;
-    List<String> schemaList = null;
-    List<String> tableList = null;
-    List<String> columnList = null;
-    String catalogName = null;
-    String schemaName = null;
-    String tableName = null;
-    String columnName = null;
-
-
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("<== PrestoResourceMgr.getPrestoResources()  UserInput: \"" + userInput + "\" resource : " + resource + " resourceMap: " + resourceMap);
-    }
-
-    if (userInput != null && resource != null) {
-      if (resourceMap != null && !resourceMap.isEmpty()) {
-        catalogList = resourceMap.get(CATALOG);
-        schemaList = resourceMap.get(SCHEMA);
-        tableList = resourceMap.get(TABLE);
-        columnList = resourceMap.get(COLUMN);
-      }
-      switch (resource.trim().toLowerCase()) {
-        case CATALOG:
-          catalogName = userInput;
-          break;
-        case SCHEMA:
-          schemaName = userInput;
-        case TABLE:
-          tableName = userInput;
-          break;
-        case COLUMN:
-          columnName = userInput;
-          break;
-        default:
-          break;
-      }
-    }
-
-    if (serviceName != null && userInput != null) {
-      try {
-
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("==> PrestoResourceMgr.getPrestoResources() UserInput: " + userInput + " configs: " + configs + " catalogList: " + catalogList + " tableList: "
-            + tableList + " columnList: " + columnList);
-        }
-
-        final PrestoClient prestoClient = new PrestoConnectionManager().getPrestoConnection(serviceName, serviceType, configs);
-
-        Callable<List<String>> callableObj = null;
-
-        final String finalCatalogName;
-        final String finalSchemaName;
-        final String finalTableName;
-        final String finalColumnName;
-
-        final List<String> finalCatalogList = catalogList;
-        final List<String> finalSchemaList = schemaList;
-        final List<String> finalTableList = tableList;
-        final List<String> finalColumnList = columnList;
-
-        if (prestoClient != null) {
-          if (catalogName != null && !catalogName.isEmpty()) {
-            finalCatalogName = catalogName;
-            callableObj = new Callable<List<String>>() {
-              @Override
-              public List<String> call() throws Exception {
-                return prestoClient.getCatalogList(finalCatalogName, finalCatalogList);
-              }
-            };
-          } else if (schemaName != null && !schemaName.isEmpty()) {
-            finalSchemaName = schemaName;
-            callableObj = new Callable<List<String>>() {
-              @Override
-              public List<String> call() throws Exception {
-                return prestoClient.getSchemaList(finalSchemaName, finalCatalogList, finalSchemaList);
-              }
-            };
-          } else if (tableName != null && !tableName.isEmpty()) {
-            finalTableName = tableName;
-            callableObj = new Callable<List<String>>() {
-              @Override
-              public List<String> call() throws Exception {
-                return prestoClient.getTableList(finalTableName, finalCatalogList, finalSchemaList, finalTableList);
-              }
-            };
-          } else if (columnName != null && !columnName.isEmpty()) {
-            // Column names are matched by the wildcardmatcher
-            columnName += "*";
-            finalColumnName = columnName;
-            callableObj = new Callable<List<String>>() {
-              @Override
-              public List<String> call() throws Exception {
-                return prestoClient.getColumnList(finalColumnName, finalCatalogList, finalSchemaList, finalTableList, finalColumnList);
-              }
-            };
-          }
-          if (callableObj != null) {
-            synchronized (prestoClient) {
-              resultList = TimedEventUtil.timedTask(callableObj, 5, TimeUnit.SECONDS);
-            }
-          } else {
-            LOG.error("Could not initiate a PrestoClient timedTask");
-          }
-        }
-      } catch (Exception e) {
-        LOG.error("Unable to get Presto resource", e);
-        throw e;
-      }
-    }
-    return resultList;
-  }
-}
diff --git a/plugin-presto/src/test/java/org/apache/ranger/authorization/presto/authorizer/RangerAdminClientImpl.java b/plugin-presto/src/test/java/org/apache/ranger/authorization/presto/authorizer/RangerAdminClientImpl.java
deleted file mode 100644
index bcfaef05e..000000000
--- a/plugin-presto/src/test/java/org/apache/ranger/authorization/presto/authorizer/RangerAdminClientImpl.java
+++ /dev/null
@@ -1,43 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.ranger.authorization.presto.authorizer;
-
-import org.apache.ranger.admin.client.AbstractRangerAdminClient;
-import org.apache.ranger.plugin.util.ServicePolicies;
-
-import java.io.File;
-import java.nio.file.FileSystems;
-import java.nio.file.Files;
-
-public class RangerAdminClientImpl extends AbstractRangerAdminClient {
-  private final static String cacheFilename = "presto-policies.json";
-
-  public ServicePolicies getServicePoliciesIfUpdated(long lastKnownVersion, long lastActivationTimeInMillis) throws Exception {
-
-    String basedir = System.getProperty("basedir");
-    if (basedir == null) {
-      basedir = new File(".").getCanonicalPath();
-    }
-
-    java.nio.file.Path cachePath = FileSystems.getDefault().getPath(basedir, "/src/test/resources/" + cacheFilename);
-    byte[] cacheBytes = Files.readAllBytes(cachePath);
-
-    return gson.fromJson(new String(cacheBytes), ServicePolicies.class);
-  }
-
-}
\ No newline at end of file
diff --git a/plugin-presto/src/test/java/org/apache/ranger/authorization/presto/authorizer/RangerSystemAccessControlTest.java b/plugin-presto/src/test/java/org/apache/ranger/authorization/presto/authorizer/RangerSystemAccessControlTest.java
deleted file mode 100644
index ed8c837d5..000000000
--- a/plugin-presto/src/test/java/org/apache/ranger/authorization/presto/authorizer/RangerSystemAccessControlTest.java
+++ /dev/null
@@ -1,195 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.ranger.authorization.presto.authorizer;
-
-import com.google.common.collect.ImmutableSet;
-import io.prestosql.spi.connector.CatalogSchemaName;
-import io.prestosql.spi.connector.CatalogSchemaRoutineName;
-import io.prestosql.spi.connector.CatalogSchemaTableName;
-import io.prestosql.spi.connector.SchemaTableName;
-import io.prestosql.spi.security.AccessDeniedException;
-import io.prestosql.spi.security.Identity;
-import io.prestosql.spi.security.PrestoPrincipal;
-import io.prestosql.spi.security.SystemSecurityContext;
-
-import static io.prestosql.spi.security.PrincipalType.USER;
-import static io.prestosql.spi.security.Privilege.SELECT;
-import static org.junit.Assert.*;
-
-import io.prestosql.spi.security.ViewExpression;
-import io.prestosql.spi.type.VarcharType;
-import org.junit.BeforeClass;
-import org.junit.Test;
-
-import javax.security.auth.kerberos.KerberosPrincipal;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Optional;
-import java.util.Set;
-
-public class RangerSystemAccessControlTest {
-  static RangerSystemAccessControl accessControlManager = null;
-
-  private static final Identity alice = Identity.ofUser("alice");
-  private static final Identity admin = Identity.ofUser("admin");
-  //private static final Identity aliceWithGroups = Identity.from(alice).withGroups(new HashSet(Arrays.asList("users", "friends"))).build();
-  //private static final Identity kerberosValidAlice = Identity.from(alice).withPrincipal(new KerberosPrincipal("alice/example.com@EXAMPLE.COM")).build();
-  //private static final Identity kerberosValidNonAsciiUser = Identity.forUser("\u0194\u0194\u0194").withPrincipal(new KerberosPrincipal("\u0194\u0194\u0194/example.com@EXAMPLE.COM")).build();
-  private static final Identity kerberosInvalidAlice = Identity.from(alice).withPrincipal(new KerberosPrincipal("mallory/example.com@EXAMPLE.COM")).build();
-  private static final Identity bob = Identity.ofUser("bob");
-  //private static final Identity nonAsciiUser = Identity.ofUser("\u0194\u0194\u0194");
-
-  private static final Set<String> allCatalogs = ImmutableSet.of("open-to-all", "all-allowed", "alice-catalog");
-  private static final Set<String> queryOwners = ImmutableSet.of("bob", "alice", "frank");
-  private static final String aliceCatalog = "alice-catalog";
-  private static final CatalogSchemaName aliceSchema = new CatalogSchemaName("alice-catalog", "schema");
-  private static final CatalogSchemaTableName aliceTable = new CatalogSchemaTableName("alice-catalog", "schema","table");
-  private static final CatalogSchemaTableName aliceView = new CatalogSchemaTableName("alice-catalog", "schema","view");
-
-  private static final CatalogSchemaRoutineName aliceProcedure = new CatalogSchemaRoutineName("alice-catalog", "schema", "procedure");
-  private static final String functionName = new String("function");
-
-  @BeforeClass
-  public static void setUpBeforeClass() throws Exception {
-    Map<String, String> config = new HashMap<>();
-    accessControlManager = new RangerSystemAccessControl(config);
-  }
-
-  @Test
-  @SuppressWarnings("PMD")
-  public void testCanSetUserOperations() {
-    try {
-      accessControlManager.checkCanImpersonateUser(context(alice), bob.getUser());
-      throw new AssertionError("expected AccessDeniedExeption");
-    }
-    catch (AccessDeniedException expected) {
-    }
-
-    accessControlManager.checkCanImpersonateUser(context(admin), bob.getUser());
-
-    try {
-      accessControlManager.checkCanImpersonateUser(context(kerberosInvalidAlice), bob.getUser());
-      throw new AssertionError("expected AccessDeniedExeption");
-    }
-    catch (AccessDeniedException expected) {
-    }
-
-  }
-
-  @Test
-  public void testCatalogOperations()
-  {
-    assertEquals(accessControlManager.filterCatalogs(context(alice), allCatalogs), allCatalogs);
-    Set<String> bobCatalogs = ImmutableSet.of("open-to-all", "all-allowed");
-    assertEquals(accessControlManager.filterCatalogs(context(bob), allCatalogs), bobCatalogs);
-    //Set<String> nonAsciiUserCatalogs = ImmutableSet.of("open-to-all", "all-allowed", "\u0200\u0200\u0200");
-    //assertEquals(accessControlManager.filterCatalogs(context(nonAsciiUser), allCatalogs), nonAsciiUserCatalogs);
-  }
-
-  @Test
-  @SuppressWarnings("PMD")
-  public void testSchemaOperations()
-  {
-
-    Set<String> aliceSchemas = ImmutableSet.of("schema");
-    assertEquals(accessControlManager.filterSchemas(context(alice), aliceCatalog, aliceSchemas), aliceSchemas);
-    assertEquals(accessControlManager.filterSchemas(context(bob), "alice-catalog", aliceSchemas), ImmutableSet.of());
-
-    accessControlManager.checkCanCreateSchema(context(alice), aliceSchema);
-    accessControlManager.checkCanDropSchema(context(alice), aliceSchema);
-    accessControlManager.checkCanRenameSchema(context(alice), aliceSchema, "new-schema");
-    accessControlManager.checkCanShowSchemas(context(alice), aliceCatalog);
-
-    try {
-      accessControlManager.checkCanCreateSchema(context(bob), aliceSchema);
-    } catch (AccessDeniedException expected) {
-    }
-
-    accessControlManager.checkCanSetSchemaAuthorization(context(alice), aliceSchema, new PrestoPrincipal(USER, "principal"));
-    accessControlManager.checkCanShowCreateSchema(context(alice), aliceSchema);
-  }
-
-  @Test
-  @SuppressWarnings("PMD")
-  public void testTableOperations()
-  {
-    Set<SchemaTableName> aliceTables = ImmutableSet.of(new SchemaTableName("schema", "table"));
-    assertEquals(accessControlManager.filterTables(context(alice), aliceCatalog, aliceTables), aliceTables);
-    assertEquals(accessControlManager.filterTables(context(bob), "alice-catalog", aliceTables), ImmutableSet.of());
-
-    accessControlManager.checkCanCreateTable(context(alice), aliceTable);
-    accessControlManager.checkCanDropTable(context(alice), aliceTable);
-    accessControlManager.checkCanSelectFromColumns(context(alice), aliceTable, ImmutableSet.of());
-    accessControlManager.checkCanInsertIntoTable(context(alice), aliceTable);
-    accessControlManager.checkCanDeleteFromTable(context(alice), aliceTable);
-    accessControlManager.checkCanRenameColumn(context(alice), aliceTable);
-
-
-    try {
-      accessControlManager.checkCanCreateTable(context(bob), aliceTable);
-    } catch (AccessDeniedException expected) {
-    }
-  }
-
-  @Test
-  @SuppressWarnings("PMD")
-  public void testViewOperations()
-  {
-    accessControlManager.checkCanCreateView(context(alice), aliceView);
-    accessControlManager.checkCanDropView(context(alice), aliceView);
-    accessControlManager.checkCanSelectFromColumns(context(alice), aliceView, ImmutableSet.of());
-    accessControlManager.checkCanCreateViewWithSelectFromColumns(context(alice), aliceTable, ImmutableSet.of());
-    accessControlManager.checkCanCreateViewWithSelectFromColumns(context(alice), aliceView, ImmutableSet.of());
-    accessControlManager.checkCanSetCatalogSessionProperty(context(alice), aliceCatalog, "property");
-    accessControlManager.checkCanGrantTablePrivilege(context(alice), SELECT, aliceTable, new PrestoPrincipal(USER, "grantee"), true);
-    accessControlManager.checkCanRevokeTablePrivilege(context(alice), SELECT, aliceTable, new PrestoPrincipal(USER, "revokee"), true);
-
-    try {
-      accessControlManager.checkCanCreateView(context(bob), aliceView);
-    } catch (AccessDeniedException expected) {
-    }
-  }
-
-  @Test
-  @SuppressWarnings("PMD")
-  public void testMisc()
-  {
-    assertEquals(accessControlManager.filterViewQueryOwnedBy(context(alice), queryOwners), queryOwners);
-
-    // check {type} / {col} replacement
-    final VarcharType varcharType = VarcharType.createVarcharType(20);
-
-    Optional<ViewExpression> ret = accessControlManager.getColumnMask(context(alice), aliceTable, "cast_me", varcharType);
-    assertNotNull(ret.get());
-    assertEquals(ret.get().getExpression(), "cast cast_me as varchar(20)");
-
-    ret = accessControlManager.getColumnMask(context(alice), aliceTable,"do-not-cast-me", varcharType);
-    assertFalse(ret.isPresent());
-
-    ret = accessControlManager.getRowFilter(context(alice), aliceTable);
-    assertFalse(ret.isPresent());
-
-    accessControlManager.checkCanExecuteFunction(context(alice), functionName);
-    accessControlManager.checkCanGrantExecuteFunctionPrivilege(context(alice), functionName, new PrestoPrincipal(USER, "grantee"), true);
-    accessControlManager.checkCanExecuteProcedure(context(alice), aliceProcedure);
-  }
-
-  private SystemSecurityContext context(Identity id) {
-    return new SystemSecurityContext(id, Optional.empty());
-  }
-}
\ No newline at end of file
diff --git a/plugin-presto/src/test/resources/log4j.properties b/plugin-presto/src/test/resources/log4j.properties
deleted file mode 100644
index fd5ca2a5e..000000000
--- a/plugin-presto/src/test/resources/log4j.properties
+++ /dev/null
@@ -1,26 +0,0 @@
-#
-# Licensed to the Apache Software Foundation (ASF) under one
-# or more contributor license agreements.  See the NOTICE file
-# distributed with this work for additional information
-# regarding copyright ownership.  The ASF licenses this file
-# to you under the Apache License, Version 2.0 (the
-# "License"); you may not use this file except in compliance
-# with the License.  You may obtain a copy of the License at
-#
-#      http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-
-# Root logger option
-log4j.rootLogger=INFO, stdout
-
-# Direct log messages to stdout
-log4j.appender.stdout=org.apache.log4j.ConsoleAppender
-log4j.appender.stdout.Target=System.out
-log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
-log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{10}:%L - %m%n
diff --git a/plugin-presto/src/test/resources/presto-policies.json b/plugin-presto/src/test/resources/presto-policies.json
deleted file mode 100644
index 6dbaabb1c..000000000
--- a/plugin-presto/src/test/resources/presto-policies.json
+++ /dev/null
@@ -1,1214 +0,0 @@
-{
-  "serviceName": "cl1_presto",
-  "serviceId": 16,
-  "policyUpdateTime": "20180304-09:49:38.000-+0000",
-  "policies": [
-    {
-      "service": "cl1_presto",
-      "name": "checkCanImpersonateUser",
-      "policyType": 0,
-      "policyPriority": 0,
-      "description": "",
-      "isAuditEnabled": true,
-      "resources": {
-        "prestouser": {
-          "values": [
-            "bob"
-          ],
-          "isExcludes": false,
-          "isRecursive": false
-        }
-      },
-      "policyItems": [
-        {
-          "accesses": [
-            {
-              "type": "impersonate",
-              "isAllowed": true
-            }
-          ],
-          "users": [
-            "admin"
-          ],
-          "groups": [],
-          "roles": [],
-          "conditions": [],
-          "delegateAdmin": false
-        }
-      ],
-      "denyPolicyItems": [],
-      "allowExceptions": [],
-      "denyExceptions": [],
-      "dataMaskPolicyItems": [],
-      "rowFilterPolicyItems": [],
-      "serviceType": "presto",
-      "options": {},
-      "validitySchedules": [],
-      "policyLabels": [],
-      "zoneName": "",
-      "isDenyAllElse": false,
-      "id": 51,
-      "guid": "7ab96b62-6fd3-4193-bf49-af462c25784d",
-      "isEnabled": true,
-      "version": 1
-    },
-    {
-      "service": "cl1_presto",
-      "name": "checkFunction",
-      "policyType": 0,
-      "policyPriority": 0,
-      "description": "",
-      "isAuditEnabled": true,
-      "resources": {
-        "function": {
-          "values": [
-            "function"
-          ],
-          "isExcludes": false,
-          "isRecursive": false
-        }
-      },
-      "policyItems": [
-        {
-          "accesses": [
-            {
-              "type": "execute",
-              "isAllowed": true
-            },
-            {
-              "type": "grant",
-              "isAllowed": true
-            }
-          ],
-          "users": [
-            "alice"
-          ],
-          "groups": [],
-          "roles": [],
-          "conditions": [],
-          "delegateAdmin": false
-        }
-      ],
-      "denyPolicyItems": [],
-      "allowExceptions": [],
-      "denyExceptions": [],
-      "dataMaskPolicyItems": [],
-      "rowFilterPolicyItems": [],
-      "serviceType": "presto",
-      "options": {},
-      "validitySchedules": [],
-      "policyLabels": [],
-      "zoneName": "",
-      "isDenyAllElse": false,
-      "id": 51,
-      "guid": "7ab96b62-6fd3-4193-bf49-af462c25784d",
-      "isEnabled": true,
-      "version": 1
-    },
-    {
-      "service": "cl1_presto",
-      "name": "alice-schema",
-      "policyType": 0,
-      "policyPriority": 0,
-      "description": "",
-      "isAuditEnabled": true,
-      "resources": {
-        "schema": {
-          "values": [
-            "schema"
-          ],
-          "isExcludes": false,
-          "isRecursive": false
-        },
-        "catalog": {
-          "values": [
-            "alice-catalog"
-          ],
-          "isExcludes": false,
-          "isRecursive": false
-        }
-      },
-      "policyItems": [
-        {
-          "accesses": [
-            {
-              "type": "select",
-              "isAllowed": true
-            },
-            {
-              "type": "insert",
-              "isAllowed": true
-            },
-            {
-              "type": "create",
-              "isAllowed": true
-            },
-            {
-              "type": "drop",
-              "isAllowed": true
-            },
-            {
-              "type": "alter",
-              "isAllowed": true
-            },
-            {
-              "type": "show",
-              "isAllowed": true
-            },
-            {
-              "type": "grant",
-              "isAllowed": true
-            }
-          ],
-          "users": [
-            "alice"
-          ],
-          "groups": [],
-          "roles": [],
-          "conditions": [],
-          "delegateAdmin": false
-        }
-      ],
-      "denyPolicyItems": [],
-      "allowExceptions": [],
-      "denyExceptions": [],
-      "dataMaskPolicyItems": [],
-      "rowFilterPolicyItems": [],
-      "serviceType": "presto",
-      "options": {},
-      "validitySchedules": [],
-      "policyLabels": [],
-      "zoneName": "",
-      "isDenyAllElse": false,
-      "id": 52,
-      "guid": "11b10138-34c3-4e11-8beb-56a10334a375",
-      "isEnabled": true,
-      "version": 1
-    },
-    {
-      "service": "cl1_presto",
-      "name": "alice-catalog",
-      "policyType": 0,
-      "policyPriority": 0,
-      "description": "",
-      "isAuditEnabled": true,
-      "resources": {
-        "catalog": {
-          "values": [
-            "alice-catalog"
-          ],
-          "isExcludes": false,
-          "isRecursive": false
-        }
-      },
-      "policyItems": [
-        {
-          "accesses": [
-            {
-              "type": "select",
-              "isAllowed": true
-            },
-            {
-              "type": "insert",
-              "isAllowed": true
-            },
-            {
-              "type": "create",
-              "isAllowed": true
-            },
-            {
-              "type": "drop",
-              "isAllowed": true
-            },
-            {
-              "type": "use",
-              "isAllowed": true
-            },
-            {
-              "type": "alter",
-              "isAllowed": true
-            },
-            {
-              "type": "show",
-              "isAllowed": true
-            }
-          ],
-          "users": [
-            "alice"
-          ],
-          "groups": [],
-          "roles": [],
-          "conditions": [],
-          "delegateAdmin": false
-        }
-      ],
-      "denyPolicyItems": [],
-      "allowExceptions": [],
-      "denyExceptions": [],
-      "dataMaskPolicyItems": [],
-      "rowFilterPolicyItems": [],
-      "serviceType": "presto",
-      "options": {},
-      "validitySchedules": [],
-      "policyLabels": [],
-      "zoneName": "",
-      "isDenyAllElse": false,
-      "id": 53,
-      "guid": "60207d91-7fd7-424e-8e6f-88d803297b6a",
-      "isEnabled": true,
-      "version": 2
-    },
-    {
-      "service": "cl1_presto",
-      "name": "alice-table",
-      "policyType": 0,
-      "policyPriority": 0,
-      "description": "",
-      "isAuditEnabled": true,
-      "resources": {
-        "schema": {
-          "values": [
-            "schema"
-          ],
-          "isExcludes": false,
-          "isRecursive": false
-        },
-        "catalog": {
-          "values": [
-            "alice-catalog"
-          ],
-          "isExcludes": false,
-          "isRecursive": false
-        },
-        "table": {
-          "values": [
-            "table",
-            "alice"
-          ],
-          "isExcludes": false,
-          "isRecursive": false
-        }
-      },
-      "policyItems": [
-        {
-          "accesses": [
-            {
-              "type": "select",
-              "isAllowed": true
-            },
-            {
-              "type": "insert",
-              "isAllowed": true
-            },
-            {
-              "type": "drop",
-              "isAllowed": true
-            },
-            {
-              "type": "delete",
-              "isAllowed": true
-            },
-            {
-              "type": "alter",
-              "isAllowed": true
-            },
-            {
-              "type": "grant",
-              "isAllowed": true
-            },
-            {
-              "type": "revoke",
-              "isAllowed": true
-            }
-          ],
-          "users": [
-            "alice"
-          ],
-          "groups": [],
-          "roles": [],
-          "conditions": [],
-          "delegateAdmin": false
-        }
-      ],
-      "denyPolicyItems": [],
-      "allowExceptions": [],
-      "denyExceptions": [],
-      "dataMaskPolicyItems": [],
-      "rowFilterPolicyItems": [],
-      "serviceType": "presto",
-      "options": {},
-      "validitySchedules": [],
-      "policyLabels": [],
-      "zoneName": "",
-      "isDenyAllElse": false,
-      "id": 55,
-      "guid": "b47e1c19-a05f-41f8-94ef-f86c14076ad9",
-      "isEnabled": true,
-      "version": 2
-    },
-    {
-      "service": "cl1_presto",
-      "name": "alice-procedure",
-      "policyType": 0,
-      "policyPriority": 0,
-      "description": "",
-      "isAuditEnabled": true,
-      "resources": {
-        "schema": {
-          "values": [
-            "schema"
-          ],
-          "isExcludes": false,
-          "isRecursive": false
-        },
-        "catalog": {
-          "values": [
-            "alice-catalog"
-          ],
-          "isExcludes": false,
-          "isRecursive": false
-        },
-        "procedure": {
-          "values": [
-            "procedure"
-          ],
-          "isExcludes": false,
-          "isRecursive": false
-        }
-      },
-      "policyItems": [
-        {
-          "accesses": [
-            {
-              "type": "execute",
-              "isAllowed": true
-            }
-          ],
-          "users": [
-            "alice"
-          ],
-          "groups": [],
-          "roles": [],
-          "conditions": [],
-          "delegateAdmin": false
-        }
-      ],
-      "denyPolicyItems": [],
-      "allowExceptions": [],
-      "denyExceptions": [],
-      "dataMaskPolicyItems": [],
-      "rowFilterPolicyItems": [],
-      "serviceType": "presto",
-      "options": {},
-      "validitySchedules": [],
-      "policyLabels": [],
-      "zoneName": "",
-      "isDenyAllElse": false,
-      "id": 55,
-      "guid": "b47e1c19-a05f-41f8-94ef-f86c14076ad9",
-      "isEnabled": true,
-      "version": 2
-    },
-    {
-      "service": "cl1_presto",
-      "name": "alice-view",
-      "policyType": 0,
-      "policyPriority": 0,
-      "description": "",
-      "isAuditEnabled": true,
-      "resources": {
-        "schema": {
-          "values": [
-            "schema"
-          ],
-          "isExcludes": false,
-          "isRecursive": false
-        },
-        "catalog": {
-          "values": [
-            "alice-catalog"
-          ],
-          "isExcludes": false,
-          "isRecursive": false
-        },
-        "table": {
-          "values": [
-            "view"
-          ],
-          "isExcludes": false,
-          "isRecursive": false
-        }
-      },
-      "policyItems": [
-        {
-          "accesses": [
-            {
-              "type": "select",
-              "isAllowed": true
-            },
-            {
-              "type": "drop",
-              "isAllowed": true
-            }
-          ],
-          "users": [
-            "alice"
-          ],
-          "groups": [],
-          "roles": [],
-          "conditions": [],
-          "delegateAdmin": false
-        }
-      ],
-      "denyPolicyItems": [],
-      "allowExceptions": [],
-      "denyExceptions": [],
-      "dataMaskPolicyItems": [],
-      "rowFilterPolicyItems": [],
-      "serviceType": "presto",
-      "options": {},
-      "validitySchedules": [],
-      "policyLabels": [],
-      "zoneName": "",
-      "isDenyAllElse": false,
-      "id": 56,
-      "guid": "91335d40-0bcf-4515-89ed-74531df970c7",
-      "isEnabled": true,
-      "version": 1
-    },
-    {
-      "service": "cl1_presto",
-      "name": "alice-session-property",
-      "policyType": 0,
-      "policyPriority": 0,
-      "description": "",
-      "isAuditEnabled": true,
-      "resources": {
-        "sessionproperty": {
-          "values": [
-            "property"
-          ],
-          "isExcludes": false,
-          "isRecursive": false
-        },
-        "catalog": {
-          "values": [
-            "alice-catalog"
-          ],
-          "isExcludes": false,
-          "isRecursive": false
-        }
-      },
-      "policyItems": [
-        {
-          "accesses": [
-            {
-              "type": "show",
-              "isAllowed": true
-            },
-            {
-              "type": "alter",
-              "isAllowed": true
-            }
-          ],
-          "users": [
-            "alice"
-          ],
-          "groups": [],
-          "roles": [],
-          "conditions": [],
-          "delegateAdmin": false
-        }
-      ],
-      "denyPolicyItems": [],
-      "allowExceptions": [],
-      "denyExceptions": [],
-      "dataMaskPolicyItems": [],
-      "rowFilterPolicyItems": [],
-      "serviceType": "presto",
-      "options": {},
-      "validitySchedules": [],
-      "policyLabels": [],
-      "zoneName": "",
-      "isDenyAllElse": false,
-      "id": 57,
-      "guid": "b5a30229-89b2-456a-83d4-7d64e8b8b6bf",
-      "isEnabled": true,
-      "version": 1
-    },
-    {
-      "service": "cl1_presto",
-      "name": "open-to-all",
-      "policyType": 0,
-      "policyPriority": 0,
-      "description": "",
-      "isAuditEnabled": true,
-      "resources": {
-        "catalog": {
-          "values": [
-            "open-to-all",
-            "all-allowed"
-          ],
-          "isExcludes": false,
-          "isRecursive": false
-        }
-      },
-      "policyItems": [
-        {
-          "accesses": [
-            {
-              "type": "select",
-              "isAllowed": true
-            }
-          ],
-          "users": [
-            "{USER}"
-          ],
-          "groups": [],
-          "roles": [],
-          "conditions": [],
-          "delegateAdmin": false
-        }
-      ],
-      "denyPolicyItems": [],
-      "allowExceptions": [],
-      "denyExceptions": [],
-      "dataMaskPolicyItems": [],
-      "rowFilterPolicyItems": [],
-      "serviceType": "presto",
-      "options": {},
-      "validitySchedules": [],
-      "policyLabels": [],
-      "zoneName": "",
-      "isDenyAllElse": false,
-      "id": 67,
-      "guid": "370d3e54-0428-4fcb-b0b5-ad1f5dfdd7db",
-      "isEnabled": true,
-      "version": 1
-    },
-    {
-      "service": "cl1_presto",
-      "name": "test-mask",
-      "policyType": 1,
-      "policyPriority": 0,
-      "description": "",
-      "isAuditEnabled": true,
-      "resources": {
-        "schema": {
-          "values": [
-            "schema"
-          ],
-          "isExcludes": false,
-          "isRecursive": false
-        },
-        "catalog": {
-          "values": [
-            "alice-catalog"
-          ],
-          "isExcludes": false,
-          "isRecursive": false
-        },
-        "column": {
-          "values": [
-            "only_first_4"
-          ],
-          "isExcludes": false,
-          "isRecursive": false
-        },
-        "table": {
-          "values": [
-            "table"
-          ],
-          "isExcludes": false,
-          "isRecursive": false
-        }
-      },
-      "policyItems": [],
-      "denyPolicyItems": [],
-      "allowExceptions": [],
-      "denyExceptions": [],
-      "dataMaskPolicyItems": [
-        {
-          "dataMaskInfo": {
-            "dataMaskType": "MASK_SHOW_FIRST_4"
-          },
-          "accesses": [
-            {
-              "type": "select",
-              "isAllowed": true
-            }
-          ],
-          "users": [
-            "{USER}"
-          ],
-          "groups": [],
-          "roles": [],
-          "conditions": [],
-          "delegateAdmin": false
-        }
-      ],
-      "rowFilterPolicyItems": [],
-      "serviceType": "presto",
-      "options": {},
-      "validitySchedules": [],
-      "policyLabels": [],
-      "zoneName": "",
-      "isDenyAllElse": false,
-      "id": 68,
-      "guid": "6ec12d33-4d5d-46f0-9a05-b31d78281b02",
-      "isEnabled": true,
-      "version": 1
-    },
-    {
-      "service": "cl1_presto",
-      "name": "test-mask-cast",
-      "policyType": 1,
-      "policyPriority": 0,
-      "description": "",
-      "isAuditEnabled": true,
-      "resources": {
-        "schema": {
-          "values": [
-            "schema"
-          ],
-          "isExcludes": false,
-          "isRecursive": false
-        },
-        "catalog": {
-          "values": [
-            "alice-catalog"
-          ],
-          "isExcludes": false,
-          "isRecursive": false
-        },
-        "column": {
-          "values": [
-            "cast_me"
-          ],
-          "isExcludes": false,
-          "isRecursive": false
-        },
-        "table": {
-          "values": [
-            "table"
-          ],
-          "isExcludes": false,
-          "isRecursive": false
-        }
-      },
-      "policyItems": [],
-      "denyPolicyItems": [],
-      "allowExceptions": [],
-      "denyExceptions": [],
-      "dataMaskPolicyItems": [
-        {
-          "dataMaskInfo": {
-            "dataMaskType": "CUSTOM",
-            "valueExpr": "cast {col} as {type}"
-          },
-          "accesses": [
-            {
-              "type": "select",
-              "isAllowed": true
-            }
-          ],
-          "users": [
-            "{USER}"
-          ],
-          "groups": [],
-          "roles": [],
-          "conditions": [],
-          "delegateAdmin": false
-        }
-      ],
-      "rowFilterPolicyItems": [],
-      "serviceType": "presto",
-      "options": {},
-      "validitySchedules": [],
-      "policyLabels": [],
-      "zoneName": "",
-      "isDenyAllElse": false,
-      "id": 69,
-      "guid": "50e855fb-8dc2-42cd-99d3-16e8df8de774",
-      "isEnabled": true,
-      "version": 1
-    }
-  ],
-  "startIndex": 0,
-  "pageSize": 0,
-  "totalCount": 0,
-  "resultSize": 0,
-  "queryTimeMS": 1585212824007,
-  "serviceDef": {
-    "id": 17,
-    "name": "presto",
-    "displayName": "presto",
-    "implClass": "org.apache.ranger.services.presto.RangerServicePresto",
-    "label": "Presto",
-    "description": "Presto",
-    "guid": "379a9fe5-1b6e-4091-a584-4890e245e6c1",
-    "resources": [
-      {
-        "itemId": 1,
-        "name": "catalog",
-        "type": "string",
-        "level": 10,
-        "parent": "",
-        "mandatory": true,
-        "isValidLeaf": true,
-        "lookupSupported": true,
-        "recursiveSupported": false,
-        "excludesSupported": true,
-        "matcher": "org.apache.ranger.plugin.resourcematcher.RangerDefaultResourceMatcher",
-        "matcherOptions": {
-          "wildCard": true,
-          "ignoreCase": true
-        },
-        "validationRegEx": "",
-        "validationMessage": "",
-        "uiHint": "",
-        "label": "Presto Catalog",
-        "description": "Presto Catalog"
-      },
-      {
-        "itemId": 2,
-        "name": "schema",
-        "type": "string",
-        "level": 20,
-        "parent": "catalog",
-        "mandatory": true,
-        "isValidLeaf": true,
-        "lookupSupported": true,
-        "recursiveSupported": false,
-        "excludesSupported": true,
-        "matcher": "org.apache.ranger.plugin.resourcematcher.RangerDefaultResourceMatcher",
-        "matcherOptions": {
-          "wildCard": true,
-          "ignoreCase": true
-        },
-        "validationRegEx": "",
-        "validationMessage": "",
-        "uiHint": "",
-        "label": "Presto Schema",
-        "description": "Presto Schema"
-      },
-      {
-        "itemId": 3,
-        "name": "table",
-        "type": "string",
-        "level": 30,
-        "parent": "schema",
-        "mandatory": true,
-        "isValidLeaf": true,
-        "lookupSupported": true,
-        "recursiveSupported": false,
-        "excludesSupported": true,
-        "matcher": "org.apache.ranger.plugin.resourcematcher.RangerDefaultResourceMatcher",
-        "matcherOptions": {
-          "wildCard": true,
-          "ignoreCase": true
-        },
-        "validationRegEx": "",
-        "validationMessage": "",
-        "uiHint": "",
-        "label": "Presto Table",
-        "description": "Presto Table"
-      },
-      {
-        "itemId": 4,
-        "name": "column",
-        "type": "string",
-        "level": 40,
-        "parent": "table",
-        "mandatory": true,
-        "lookupSupported": true,
-        "recursiveSupported": false,
-        "excludesSupported": true,
-        "matcher": "org.apache.ranger.plugin.resourcematcher.RangerDefaultResourceMatcher",
-        "matcherOptions": {
-          "wildCard": true,
-          "ignoreCase": true
-        },
-        "validationRegEx": "",
-        "validationMessage": "",
-        "uiHint": "",
-        "label": "Presto Column",
-        "description": "Presto Column"
-      },
-      {
-        "itemId": 5,
-        "name": "prestouser",
-        "type": "string",
-        "level": 10,
-        "parent": "",
-        "mandatory": true,
-        "lookupSupported": false,
-        "recursiveSupported": false,
-        "excludesSupported": false,
-        "matcher": "org.apache.ranger.plugin.resourcematcher.RangerDefaultResourceMatcher",
-        "matcherOptions": {
-          "wildCard": true,
-          "ignoreCase": true
-        },
-        "validationRegEx": "",
-        "validationMessage": "",
-        "uiHint": "",
-        "label": "Presto User",
-        "description": "Presto User",
-        "accessTypeRestrictions": ["impersonate"]
-      },
-      {
-        "itemId": 6,
-        "name": "systemproperty",
-        "type": "string",
-        "level": 10,
-        "parent": "",
-        "mandatory": true,
-        "lookupSupported": false,
-        "recursiveSupported": false,
-        "excludesSupported": false,
-        "matcher": "org.apache.ranger.plugin.resourcematcher.RangerDefaultResourceMatcher",
-        "matcherOptions": {
-          "wildCard": true,
-          "ignoreCase": true
-        },
-        "validationRegEx": "",
-        "validationMessage": "",
-        "uiHint": "",
-        "label": "System Property",
-        "description": "Presto System Property",
-        "accessTypeRestrictions": ["alter"]
-      },
-      {
-        "itemId": 7,
-        "name": "sessionproperty",
-        "type": "string",
-        "level": 20,
-        "parent": "catalog",
-        "mandatory": true,
-        "lookupSupported": false,
-        "recursiveSupported": false,
-        "excludesSupported": false,
-        "matcher": "org.apache.ranger.plugin.resourcematcher.RangerDefaultResourceMatcher",
-        "matcherOptions": {
-          "wildCard": true,
-          "ignoreCase": true
-        },
-        "validationRegEx": "",
-        "validationMessage": "",
-        "uiHint": "",
-        "label": "Catalog Session Property",
-        "description": "Presto Catalog Session Property",
-        "accessTypeRestrictions": ["alter"]
-      },
-      {
-        "itemId": 8,
-        "name": "function",
-        "type": "string",
-        "level": 10,
-        "parent": "",
-        "mandatory": true,
-        "lookupSupported": false,
-        "recursiveSupported": false,
-        "excludesSupported": false,
-        "matcher": "org.apache.ranger.plugin.resourcematcher.RangerDefaultResourceMatcher",
-        "matcherOptions": {
-          "wildCard": true,
-          "ignoreCase": true
-        },
-        "validationRegEx": "",
-        "validationMessage": "",
-        "uiHint": "",
-        "label": "Presto Function",
-        "description": "Presto Function",
-        "accessTypeRestrictions": ["execute", "grant"]
-      },
-      {
-        "itemId": 9,
-        "name": "procedure",
-        "type": "string",
-        "level": 30,
-        "parent": "schema",
-        "mandatory": true,
-        "lookupSupported": false,
-        "recursiveSupported": false,
-        "excludesSupported": false,
-        "matcher": "org.apache.ranger.plugin.resourcematcher.RangerDefaultResourceMatcher",
-        "matcherOptions": {
-          "wildCard": true,
-          "ignoreCase": true
-        },
-        "validationRegEx": "",
-        "validationMessage": "",
-        "uiHint": "",
-        "label": "Schema Procedure",
-        "description": "Schema Procedure",
-        "accessTypeRestrictions": ["execute", "grant"]
-      }
-    ],
-    "accessTypes": [
-      {
-        "itemId": 1,
-        "name": "select",
-        "label": "Select"
-      },
-      {
-        "itemId": 2,
-        "name": "insert",
-        "label": "Insert"
-      },
-      {
-        "itemId": 3,
-        "name": "create",
-        "label": "Create"
-      },
-      {
-        "itemId": 4,
-        "name": "drop",
-        "label": "Drop"
-      },
-      {
-        "itemId": 5,
-        "name": "delete",
-        "label": "Delete"
-      },
-      {
-        "itemId": 6,
-        "name": "use",
-        "label": "Use"
-      },
-      {
-        "itemId": 7,
-        "name": "alter",
-        "label": "Alter"
-      },
-      {
-        "itemId": 8,
-        "name": "grant",
-        "label": "Grant"
-      },
-      {
-        "itemId": 9,
-        "name": "revoke",
-        "label": "Revoke"
-      },
-      {
-        "itemId": 10,
-        "name": "show",
-        "label": "Show"
-      },
-      {
-        "itemId": 11,
-        "name": "impersonate",
-        "label": "Impersonate"
-      },
-      {
-        "itemId": 12,
-        "name": "execute",
-        "label": "execute"
-      },
-      {
-        "itemId": 13,
-        "name": "all",
-        "label": "All",
-        "impliedGrants": [
-          "select",
-          "insert",
-          "create",
-          "delete",
-          "drop",
-          "use",
-          "alter",
-          "grant",
-          "revoke",
-          "show",
-          "impersonate",
-          "execute"
-        ]
-      }
-    ],
-    "configs": [
-      {
-        "itemId": 1,
-        "name": "username",
-        "type": "string",
-        "mandatory": true,
-        "validationRegEx": "",
-        "validationMessage": "",
-        "uiHint": "",
-        "label": "Username"
-      },
-      {
-        "itemId": 2,
-        "name": "password",
-        "type": "password",
-        "mandatory": false,
-        "validationRegEx": "",
-        "validationMessage": "",
-        "uiHint": "",
-        "label": "Password"
-      },
-      {
-        "itemId": 3,
-        "name": "jdbc.driverClassName",
-        "type": "string",
-        "mandatory": true,
-        "validationRegEx": "",
-        "validationMessage": "",
-        "uiHint": "",
-        "defaultValue": "io.prestosql.jdbc.PrestoDriver"
-      },
-      {
-        "itemId": 4,
-        "name": "jdbc.url",
-        "type": "string",
-        "mandatory": true,
-        "defaultValue": "",
-        "validationRegEx": "",
-        "validationMessage": "",
-        "uiHint": ""
-      }
-    ],
-    "enums": [
-    ],
-    "contextEnrichers": [
-    ],
-    "policyConditions":
-    [
-    ],
-    "dataMaskDef": {
-      "accessTypes": [
-        {
-          "name": "select"
-        }
-      ],
-      "resources": [
-        {
-          "name": "catalog",
-          "matcherOptions": {
-            "wildCard": "true"
-          },
-          "lookupSupported": true,
-          "uiHint":"{ \"singleValue\":true }"
-        },
-        {
-          "name": "schema",
-          "matcherOptions": {
-            "wildCard": "true"
-          },
-          "lookupSupported": true,
-          "uiHint":"{ \"singleValue\":true }"
-        },
-        {
-          "name": "table",
-          "matcherOptions": {
-            "wildCard": "true"
-          },
-          "lookupSupported": true,
-          "uiHint":"{ \"singleValue\":true }"
-        },
-        {
-          "name": "column",
-          "matcherOptions": {
-            "wildCard": "true"
-          },
-          "lookupSupported": true,
-          "uiHint":"{ \"singleValue\":true }"
-        }
-      ],
-      "maskTypes": [
-        {
-          "itemId": 1,
-          "name": "MASK",
-          "label": "Redact",
-          "description": "Replace lowercase with 'x', uppercase with 'X', digits with '0'",
-          "transformer": "cast(regexp_replace(regexp_replace(regexp_replace({col},'([A-Z])', 'X'),'([a-z])','x'),'([0-9])','0') as {type})",
-          "dataMaskOptions": {
-          }
-        },
-        {
-          "itemId": 2,
-          "name": "MASK_SHOW_LAST_4",
-          "label": "Partial mask: show last 4",
-          "description": "Show last 4 characters; replace rest with 'X'",
-          "transformer": "cast(regexp_replace({col}, '(.*)(.{4}$)', x -> regexp_replace(x[1], '.', 'X') || x[2]) as {type})"
-        },
-        {
-          "itemId": 3,
-          "name": "MASK_SHOW_FIRST_4",
-          "label": "Partial mask: show first 4",
-          "description": "Show first 4 characters; replace rest with 'x'",
-          "transformer": "cast(regexp_replace({col}, '(^.{4})(.*)', x -> x[1] || regexp_replace(x[2], '.', 'X')) as {type})"
-        },
-        {
-          "itemId": 4,
-          "name": "MASK_HASH",
-          "label": "Hash",
-          "description": "Hash the value of a varchar with sha256",
-          "transformer": "cast(to_hex(sha256(to_utf8({col}))) as {type})"
-        },
-        {
-          "itemId": 5,
-          "name": "MASK_NULL",
-          "label": "Nullify",
-          "description": "Replace with NULL"
-        },
-        {
-          "itemId": 6,
-          "name": "MASK_NONE",
-          "label": "Unmasked (retain original value)",
-          "description": "No masking"
-        },
-        {
-          "itemId": 12,
-          "name": "MASK_DATE_SHOW_YEAR",
-          "label": "Date: show only year",
-          "description": "Date: show only year",
-          "transformer": "date_trunc('year', {col})"
-        },
-        {
-          "itemId": 13,
-          "name": "CUSTOM",
-          "label": "Custom",
-          "description": "Custom"
-        }
-      ]
-    },
-    "rowFilterDef": {
-      "accessTypes": [
-        {
-          "name": "select"
-        }
-      ],
-      "resources": [
-        {
-          "name": "catalog",
-          "matcherOptions": {
-            "wildCard": "true"
-          },
-          "lookupSupported": true,
-          "mandatory": true,
-          "uiHint": "{ \"singleValue\":true }"
-        },
-        {
-          "name": "schema",
-          "matcherOptions": {
-            "wildCard": "true"
-          },
-          "lookupSupported": true,
-          "mandatory": true,
-          "uiHint": "{ \"singleValue\":true }"
-        },
-        {
-          "name": "table",
-          "matcherOptions": {
-            "wildCard": "true"
-          },
-          "lookupSupported": true,
-          "mandatory": true,
-          "uiHint": "{ \"singleValue\":true }"
-        }
-      ]
-    }
-  }
-}
\ No newline at end of file
diff --git a/plugin-presto/src/test/resources/ranger-presto-security.xml b/plugin-presto/src/test/resources/ranger-presto-security.xml
deleted file mode 100644
index 8a1923d4d..000000000
--- a/plugin-presto/src/test/resources/ranger-presto-security.xml
+++ /dev/null
@@ -1,52 +0,0 @@
-<?xml version="1.0"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
--->
-<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
-<configuration xmlns:xi="http://www.w3.org/2001/XInclude">
-    <property>
-        <name>ranger.plugin.presto.service.name</name>
-        <value>cl1_presto</value>
-        <description>
-            Name of the Ranger service containing policies for this SampleApp instance
-        </description>
-    </property>
-
-    <property>
-        <name>ranger.plugin.presto.policy.source.impl</name>
-        <value>org.apache.ranger.authorization.presto.authorizer.RangerAdminClientImpl</value>
-        <description>
-            Policy source.
-        </description>
-    </property>
-
-    <property>
-        <name>ranger.plugin.presto.policy.pollIntervalMs</name>
-        <value>30000</value>
-        <description>
-            How often to poll for changes in policies?
-        </description>
-    </property>
-
-    <property>
-        <name>ranger.plugin.presto.policy.cache.dir</name>
-        <value>${project.build.directory}</value>
-        <description>
-            Directory where Ranger policies are cached after successful retrieval from the source
-        </description>
-    </property>
-
-</configuration>
diff --git a/pom.xml b/pom.xml
index ebd6818bb..953e3a6be 100644
--- a/pom.xml
+++ b/pom.xml
@@ -248,7 +248,6 @@
                 <module>plugin-yarn</module>
                 <module>security-admin</module>
                 <module>plugin-solr</module>
-                <module>plugin-presto</module>
                 <module>plugin-kudu</module>
                 <module>ugsync-util</module>
                 <module>ugsync</module>
@@ -449,20 +448,6 @@
                 <module>ranger-elasticsearch-plugin-shim</module>
             </modules>
         </profile>
-        <profile>
-            <id>ranger-presto-plugin</id>
-            <modules>
-                <module>agents-audit</module>
-                <module>agents-common</module>
-                <module>agents-cred</module>
-                <module>agents-installer</module>
-                <module>credentialbuilder</module>
-                <module>ranger-plugin-classloader</module>
-                <module>ranger-util</module>
-                <module>plugin-presto</module>
-                <module>ranger-presto-plugin-shim</module>
-            </modules>
-        </profile>
         <profile>
             <id>linux</id>
             <activation>
@@ -516,7 +501,6 @@
                 <module>ranger-sqoop-plugin-shim</module>
                 <module>plugin-kylin</module>
                 <module>ranger-kylin-plugin-shim</module>
-                <module>plugin-presto</module>
                 <module>ranger-presto-plugin-shim</module>
                 <module>plugin-elasticsearch</module>
                 <module>ranger-elasticsearch-plugin-shim</module>
@@ -566,7 +550,6 @@
                 <module>plugin-yarn</module>
                 <module>security-admin</module>
                 <module>plugin-solr</module>
-                <module>plugin-presto</module>
                 <module>ugsync-util</module>
                 <module>ugsync</module>
                 <module>ugsync/ldapconfigchecktool/ldapconfigcheck</module>
